//Test code generated by MISTA

package test;

import vending.Coin;
import vending.VendingMachine;

import org.junit.*;

import static org.junit.Assert.*;

public class VendingMachine_0_Tester_RT_2 {

	private VendingMachine vendingmachine;
	
	@Before
	public void setUp()  throws Exception {
		vendingmachine = new VendingMachine();
		vendingmachine.setDrink(COFFEE, 85, 1);
		vendingmachine.setDrink(JUICE, 60, 1);
		vendingmachine.setDrink(SODA, 115, 1);
	}
	
	@Test
	public void test1() throws Exception {
		System.out.println("Test case 1");
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_1", vendingmachine.getDeposit()==10);
		assertTrue("1_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_1_1", vendingmachine.getDeposit()==110);
		assertTrue("1_1_1", ! (vendingmachine.getDeposit()==10));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_1_1", vendingmachine.getDeposit()==135);
		assertTrue("1_1_1_1", ! (vendingmachine.getDeposit()==110));
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_1_1_1", vendingmachine.getDeposit()==140);
		assertTrue("1_1_1_1_1", ! (vendingmachine.getDeposit()==135));
		vendingmachine.purchase(SODA);
		assertTrue("1_1_1_1_1_1", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_1_1_1", checkDrink(SODA, 115, 0));
		assertTrue("1_1_1_1_1_1", ! (vendingmachine.getDeposit()==140));
		assertTrue("1_1_1_1_1_1", ! (checkDrink(SODA, 115, 1)));
		assertTrue("", vendingmachine.getChange()==140-115);
	}

	@Test
	public void test2() throws Exception {
		System.out.println("Test case 2");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_1_1_1_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_1_1_2", ! (vendingmachine.getDeposit()==140));
	}

	@Test
	public void test3() throws Exception {
		System.out.println("Test case 3");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_1_1_1_1_3", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_1_1_3", checkDrink(COFFEE, 85, 0));
		assertTrue("1_1_1_1_1_3", ! (vendingmachine.getDeposit()==140));
		assertTrue("1_1_1_1_1_3", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==140-85);
	}

	@Test
	public void test4() throws Exception {
		System.out.println("Test case 4");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(JUICE);
		assertTrue("1_1_1_1_1_4", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_1_1_4", checkDrink(JUICE, 60, 0));
		assertTrue("1_1_1_1_1_4", ! (vendingmachine.getDeposit()==140));
		assertTrue("1_1_1_1_1_4", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==140-60);
	}

	@Test
	public void test5() throws Exception {
		System.out.println("Test case 5");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(SODA);
		assertTrue("1_1_1_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_1_2", checkDrink(SODA, 115, 0));
		assertTrue("1_1_1_1_2", ! (vendingmachine.getDeposit()==135));
		assertTrue("1_1_1_1_2", ! (checkDrink(SODA, 115, 1)));
		assertTrue("", vendingmachine.getChange()==135-115);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_1_1_2_1", vendingmachine.getDeposit()==5);
		assertTrue("1_1_1_1_2_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test6() throws Exception {
		System.out.println("Test case 6");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_1_1_1_3", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_1_3", ! (vendingmachine.getDeposit()==135));
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_1_1_3_1", vendingmachine.getDeposit()==5);
		assertTrue("1_1_1_1_3_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test7() throws Exception {
		System.out.println("Test case 7");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_1_1_1_4", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_1_4", checkDrink(COFFEE, 85, 0));
		assertTrue("1_1_1_1_4", ! (vendingmachine.getDeposit()==135));
		assertTrue("1_1_1_1_4", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==135-85);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_1_1_4_1", vendingmachine.getDeposit()==5);
		assertTrue("1_1_1_1_4_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test8() throws Exception {
		System.out.println("Test case 8");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(JUICE);
		assertTrue("1_1_1_1_5", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_1_5", checkDrink(JUICE, 60, 0));
		assertTrue("1_1_1_1_5", ! (vendingmachine.getDeposit()==135));
		assertTrue("1_1_1_1_5", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==135-60);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_1_1_5_1", vendingmachine.getDeposit()==5);
		assertTrue("1_1_1_1_5_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test9() throws Exception {
		System.out.println("Test case 9");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_1_2", vendingmachine.getDeposit()==115);
		assertTrue("1_1_1_2", ! (vendingmachine.getDeposit()==110));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_1_2_1", vendingmachine.getDeposit()==140);
		assertTrue("1_1_1_2_1", ! (vendingmachine.getDeposit()==115));
	}

	@Test
	public void test10() throws Exception {
		System.out.println("Test case 10");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(SODA);
		assertTrue("1_1_1_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_2_2", checkDrink(SODA, 115, 0));
		assertTrue("1_1_1_2_2", ! (vendingmachine.getDeposit()==115));
		assertTrue("1_1_1_2_2", ! (checkDrink(SODA, 115, 1)));
		assertTrue("", vendingmachine.getChange()==115-115);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_1_2_2_1", vendingmachine.getDeposit()==25);
		assertTrue("1_1_1_2_2_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test11() throws Exception {
		System.out.println("Test case 11");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_1_1_2_3", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_2_3", ! (vendingmachine.getDeposit()==115));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_1_2_3_1", vendingmachine.getDeposit()==25);
		assertTrue("1_1_1_2_3_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test12() throws Exception {
		System.out.println("Test case 12");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_1_1_2_4", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_2_4", checkDrink(COFFEE, 85, 0));
		assertTrue("1_1_1_2_4", ! (vendingmachine.getDeposit()==115));
		assertTrue("1_1_1_2_4", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==115-85);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_1_2_4_1", vendingmachine.getDeposit()==25);
		assertTrue("1_1_1_2_4_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test13() throws Exception {
		System.out.println("Test case 13");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(JUICE);
		assertTrue("1_1_1_2_5", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_2_5", checkDrink(JUICE, 60, 0));
		assertTrue("1_1_1_2_5", ! (vendingmachine.getDeposit()==115));
		assertTrue("1_1_1_2_5", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==115-60);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_1_2_5_1", vendingmachine.getDeposit()==25);
		assertTrue("1_1_1_2_5_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test14() throws Exception {
		System.out.println("Test case 14");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		assertTrue("1_1_1_3", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_3", ! (vendingmachine.getDeposit()==110));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_1_3_1", vendingmachine.getDeposit()==25);
		assertTrue("1_1_1_3_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_1_3_1_1", vendingmachine.getDeposit()==30);
		assertTrue("1_1_1_3_1_1", ! (vendingmachine.getDeposit()==25));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==30));
	}

	@Test
	public void test15() throws Exception {
		System.out.println("Test case 15");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_1_1_3_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_3_1_2", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test16() throws Exception {
		System.out.println("Test case 16");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_1_3_2", vendingmachine.getDeposit()==5);
		assertTrue("1_1_1_3_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_1_3_2_1", vendingmachine.getDeposit()==30);
		assertTrue("1_1_1_3_2_1", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test17() throws Exception {
		System.out.println("Test case 17");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_1_1_3_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_3_2_2", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test18() throws Exception {
		System.out.println("Test case 18");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_1_1_4", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_4", checkDrink(COFFEE, 85, 0));
		assertTrue("1_1_1_4", ! (vendingmachine.getDeposit()==110));
		assertTrue("1_1_1_4", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==110-85);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_1_4_1", vendingmachine.getDeposit()==25);
		assertTrue("1_1_1_4_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_1_4_1_1", vendingmachine.getDeposit()==30);
		assertTrue("1_1_1_4_1_1", ! (vendingmachine.getDeposit()==25));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==30));
	}

	@Test
	public void test19() throws Exception {
		System.out.println("Test case 19");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_1_1_4_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_4_1_2", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test20() throws Exception {
		System.out.println("Test case 20");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_1_4_2", vendingmachine.getDeposit()==5);
		assertTrue("1_1_1_4_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_1_4_2_1", vendingmachine.getDeposit()==30);
		assertTrue("1_1_1_4_2_1", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test21() throws Exception {
		System.out.println("Test case 21");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_1_1_4_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_4_2_2", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test22() throws Exception {
		System.out.println("Test case 22");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		assertTrue("1_1_1_5", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_5", checkDrink(JUICE, 60, 0));
		assertTrue("1_1_1_5", ! (vendingmachine.getDeposit()==110));
		assertTrue("1_1_1_5", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==110-60);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_1_5_1", vendingmachine.getDeposit()==25);
		assertTrue("1_1_1_5_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_1_5_1_1", vendingmachine.getDeposit()==30);
		assertTrue("1_1_1_5_1_1", ! (vendingmachine.getDeposit()==25));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==30));
	}

	@Test
	public void test23() throws Exception {
		System.out.println("Test case 23");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_1_1_5_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_5_1_2", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test24() throws Exception {
		System.out.println("Test case 24");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_1_5_2", vendingmachine.getDeposit()==5);
		assertTrue("1_1_1_5_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_1_5_2_1", vendingmachine.getDeposit()==30);
		assertTrue("1_1_1_5_2_1", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test25() throws Exception {
		System.out.println("Test case 25");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_1_1_5_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_1_1_5_2_2", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test26() throws Exception {
		System.out.println("Test case 26");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_2", vendingmachine.getDeposit()==35);
		assertTrue("1_1_2", ! (vendingmachine.getDeposit()==10));
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_1_2_1", vendingmachine.getDeposit()==135);
		assertTrue("1_1_2_1", ! (vendingmachine.getDeposit()==35));
	}

	@Test
	public void test27() throws Exception {
		System.out.println("Test case 27");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_2_2", vendingmachine.getDeposit()==40);
		assertTrue("1_1_2_2", ! (vendingmachine.getDeposit()==35));
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_1_2_2_1", vendingmachine.getDeposit()==140);
		assertTrue("1_1_2_2_1", ! (vendingmachine.getDeposit()==40));
	}

	@Test
	public void test28() throws Exception {
		System.out.println("Test case 28");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_1_2_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_1_2_2_2", ! (vendingmachine.getDeposit()==40));
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_1_2_2_2_1", vendingmachine.getDeposit()==100);
		assertTrue("1_1_2_2_2_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==100));
	}

	@Test
	public void test29() throws Exception {
		System.out.println("Test case 29");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", checkDrink(COFFEE, 85, 0));
		assertTrue("", ! (vendingmachine.getDeposit()==100));
		assertTrue("", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==100-85);
	}

	@Test
	public void test30() throws Exception {
		System.out.println("Test case 30");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", checkDrink(JUICE, 60, 0));
		assertTrue("", ! (vendingmachine.getDeposit()==100));
		assertTrue("", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==100-60);
	}

	@Test
	public void test31() throws Exception {
		System.out.println("Test case 31");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_1_2_3", vendingmachine.getDeposit()==0);
		assertTrue("1_1_2_3", ! (vendingmachine.getDeposit()==35));
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_1_2_3_1", vendingmachine.getDeposit()==100);
		assertTrue("1_1_2_3_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_2_3_1_1", vendingmachine.getDeposit()==105);
		assertTrue("1_1_2_3_1_1", ! (vendingmachine.getDeposit()==100));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==105));
	}

	@Test
	public void test32() throws Exception {
		System.out.println("Test case 32");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(COFFEE);
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", checkDrink(COFFEE, 85, 0));
		assertTrue("", ! (vendingmachine.getDeposit()==105));
		assertTrue("", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==105-85);
	}

	@Test
	public void test33() throws Exception {
		System.out.println("Test case 33");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(JUICE);
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", checkDrink(JUICE, 60, 0));
		assertTrue("", ! (vendingmachine.getDeposit()==105));
		assertTrue("", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==105-60);
	}

	@Test
	public void test34() throws Exception {
		System.out.println("Test case 34");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		assertTrue("1_1_2_3_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_1_2_3_1_2", ! (vendingmachine.getDeposit()==100));
	}

	@Test
	public void test35() throws Exception {
		System.out.println("Test case 35");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_1_2_3_1_3", vendingmachine.getDeposit()==0);
		assertTrue("1_1_2_3_1_3", checkDrink(COFFEE, 85, 0));
		assertTrue("1_1_2_3_1_3", ! (vendingmachine.getDeposit()==100));
		assertTrue("1_1_2_3_1_3", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==100-85);
	}

	@Test
	public void test36() throws Exception {
		System.out.println("Test case 36");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		assertTrue("1_1_2_3_1_4", vendingmachine.getDeposit()==0);
		assertTrue("1_1_2_3_1_4", checkDrink(JUICE, 60, 0));
		assertTrue("1_1_2_3_1_4", ! (vendingmachine.getDeposit()==100));
		assertTrue("1_1_2_3_1_4", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==100-60);
	}

	@Test
	public void test37() throws Exception {
		System.out.println("Test case 37");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_2_3_2", vendingmachine.getDeposit()==5);
		assertTrue("1_1_2_3_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_1_2_3_2_1", vendingmachine.getDeposit()==105);
		assertTrue("1_1_2_3_2_1", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test38() throws Exception {
		System.out.println("Test case 38");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_1_2_3_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_1_2_3_2_2", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test39() throws Exception {
		System.out.println("Test case 39");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_3", vendingmachine.getDeposit()==15);
		assertTrue("1_1_3", ! (vendingmachine.getDeposit()==10));
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_1_3_1", vendingmachine.getDeposit()==115);
		assertTrue("1_1_3_1", ! (vendingmachine.getDeposit()==15));
	}

	@Test
	public void test40() throws Exception {
		System.out.println("Test case 40");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_3_2", vendingmachine.getDeposit()==40);
		assertTrue("1_1_3_2", ! (vendingmachine.getDeposit()==15));
	}

	@Test
	public void test41() throws Exception {
		System.out.println("Test case 41");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_1_3_3", vendingmachine.getDeposit()==0);
		assertTrue("1_1_3_3", ! (vendingmachine.getDeposit()==15));
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_1_3_3_1", vendingmachine.getDeposit()==100);
		assertTrue("1_1_3_3_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_3_3_1_1", vendingmachine.getDeposit()==125);
		assertTrue("1_1_3_3_1_1", ! (vendingmachine.getDeposit()==100));
		vendingmachine.purchase(SODA);
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", checkDrink(SODA, 115, 0));
		assertTrue("", ! (vendingmachine.getDeposit()==125));
		assertTrue("", ! (checkDrink(SODA, 115, 1)));
		assertTrue("", vendingmachine.getChange()==125-115);
	}

	@Test
	public void test42() throws Exception {
		System.out.println("Test case 42");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==125));
	}

	@Test
	public void test43() throws Exception {
		System.out.println("Test case 43");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(COFFEE);
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", checkDrink(COFFEE, 85, 0));
		assertTrue("", ! (vendingmachine.getDeposit()==125));
		assertTrue("", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==125-85);
	}

	@Test
	public void test44() throws Exception {
		System.out.println("Test case 44");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(JUICE);
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", checkDrink(JUICE, 60, 0));
		assertTrue("", ! (vendingmachine.getDeposit()==125));
		assertTrue("", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==125-60);
	}

	@Test
	public void test45() throws Exception {
		System.out.println("Test case 45");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		assertTrue("1_1_3_3_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_1_3_3_1_2", ! (vendingmachine.getDeposit()==100));
	}

	@Test
	public void test46() throws Exception {
		System.out.println("Test case 46");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_1_3_3_1_3", vendingmachine.getDeposit()==0);
		assertTrue("1_1_3_3_1_3", checkDrink(COFFEE, 85, 0));
		assertTrue("1_1_3_3_1_3", ! (vendingmachine.getDeposit()==100));
		assertTrue("1_1_3_3_1_3", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==100-85);
	}

	@Test
	public void test47() throws Exception {
		System.out.println("Test case 47");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		assertTrue("1_1_3_3_1_4", vendingmachine.getDeposit()==0);
		assertTrue("1_1_3_3_1_4", checkDrink(JUICE, 60, 0));
		assertTrue("1_1_3_3_1_4", ! (vendingmachine.getDeposit()==100));
		assertTrue("1_1_3_3_1_4", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==100-60);
	}

	@Test
	public void test48() throws Exception {
		System.out.println("Test case 48");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_3_3_2", vendingmachine.getDeposit()==25);
		assertTrue("1_1_3_3_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_1_3_3_2_1", vendingmachine.getDeposit()==125);
		assertTrue("1_1_3_3_2_1", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test49() throws Exception {
		System.out.println("Test case 49");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_1_3_3_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_1_3_3_2_2", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test50() throws Exception {
		System.out.println("Test case 50");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		assertTrue("1_1_4", vendingmachine.getDeposit()==0);
		assertTrue("1_1_4", ! (vendingmachine.getDeposit()==10));
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_1_4_1", vendingmachine.getDeposit()==100);
		assertTrue("1_1_4_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_4_1_1", vendingmachine.getDeposit()==125);
		assertTrue("1_1_4_1_1", ! (vendingmachine.getDeposit()==100));
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_4_1_1_1", vendingmachine.getDeposit()==130);
		assertTrue("1_1_4_1_1_1", ! (vendingmachine.getDeposit()==125));
		vendingmachine.purchase(SODA);
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", checkDrink(SODA, 115, 0));
		assertTrue("", ! (vendingmachine.getDeposit()==130));
		assertTrue("", ! (checkDrink(SODA, 115, 1)));
		assertTrue("", vendingmachine.getChange()==130-115);
	}

	@Test
	public void test51() throws Exception {
		System.out.println("Test case 51");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==130));
	}

	@Test
	public void test52() throws Exception {
		System.out.println("Test case 52");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(COFFEE);
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", checkDrink(COFFEE, 85, 0));
		assertTrue("", ! (vendingmachine.getDeposit()==130));
		assertTrue("", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==130-85);
	}

	@Test
	public void test53() throws Exception {
		System.out.println("Test case 53");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(JUICE);
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", checkDrink(JUICE, 60, 0));
		assertTrue("", ! (vendingmachine.getDeposit()==130));
		assertTrue("", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==130-60);
	}

	@Test
	public void test54() throws Exception {
		System.out.println("Test case 54");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(SODA);
		assertTrue("1_1_4_1_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_1_4_1_1_2", checkDrink(SODA, 115, 0));
		assertTrue("1_1_4_1_1_2", ! (vendingmachine.getDeposit()==125));
		assertTrue("1_1_4_1_1_2", ! (checkDrink(SODA, 115, 1)));
		assertTrue("", vendingmachine.getChange()==125-115);
	}

	@Test
	public void test55() throws Exception {
		System.out.println("Test case 55");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_1_4_1_1_3", vendingmachine.getDeposit()==0);
		assertTrue("1_1_4_1_1_3", ! (vendingmachine.getDeposit()==125));
	}

	@Test
	public void test56() throws Exception {
		System.out.println("Test case 56");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_1_4_1_1_4", vendingmachine.getDeposit()==0);
		assertTrue("1_1_4_1_1_4", checkDrink(COFFEE, 85, 0));
		assertTrue("1_1_4_1_1_4", ! (vendingmachine.getDeposit()==125));
		assertTrue("1_1_4_1_1_4", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==125-85);
	}

	@Test
	public void test57() throws Exception {
		System.out.println("Test case 57");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(JUICE);
		assertTrue("1_1_4_1_1_5", vendingmachine.getDeposit()==0);
		assertTrue("1_1_4_1_1_5", checkDrink(JUICE, 60, 0));
		assertTrue("1_1_4_1_1_5", ! (vendingmachine.getDeposit()==125));
		assertTrue("1_1_4_1_1_5", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==125-60);
	}

	@Test
	public void test58() throws Exception {
		System.out.println("Test case 58");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_4_1_2", vendingmachine.getDeposit()==105);
		assertTrue("1_1_4_1_2", ! (vendingmachine.getDeposit()==100));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_4_1_2_1", vendingmachine.getDeposit()==130);
		assertTrue("1_1_4_1_2_1", ! (vendingmachine.getDeposit()==105));
	}

	@Test
	public void test59() throws Exception {
		System.out.println("Test case 59");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_1_4_1_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_1_4_1_2_2", ! (vendingmachine.getDeposit()==105));
	}

	@Test
	public void test60() throws Exception {
		System.out.println("Test case 60");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_1_4_1_2_3", vendingmachine.getDeposit()==0);
		assertTrue("1_1_4_1_2_3", checkDrink(COFFEE, 85, 0));
		assertTrue("1_1_4_1_2_3", ! (vendingmachine.getDeposit()==105));
		assertTrue("1_1_4_1_2_3", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==105-85);
	}

	@Test
	public void test61() throws Exception {
		System.out.println("Test case 61");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(JUICE);
		assertTrue("1_1_4_1_2_4", vendingmachine.getDeposit()==0);
		assertTrue("1_1_4_1_2_4", checkDrink(JUICE, 60, 0));
		assertTrue("1_1_4_1_2_4", ! (vendingmachine.getDeposit()==105));
		assertTrue("1_1_4_1_2_4", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==105-60);
	}

	@Test
	public void test62() throws Exception {
		System.out.println("Test case 62");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		assertTrue("1_1_4_1_3", vendingmachine.getDeposit()==0);
		assertTrue("1_1_4_1_3", ! (vendingmachine.getDeposit()==100));
	}

	@Test
	public void test63() throws Exception {
		System.out.println("Test case 63");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_1_4_1_4", vendingmachine.getDeposit()==0);
		assertTrue("1_1_4_1_4", checkDrink(COFFEE, 85, 0));
		assertTrue("1_1_4_1_4", ! (vendingmachine.getDeposit()==100));
		assertTrue("1_1_4_1_4", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==100-85);
	}

	@Test
	public void test64() throws Exception {
		System.out.println("Test case 64");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		assertTrue("1_1_4_1_5", vendingmachine.getDeposit()==0);
		assertTrue("1_1_4_1_5", checkDrink(JUICE, 60, 0));
		assertTrue("1_1_4_1_5", ! (vendingmachine.getDeposit()==100));
		assertTrue("1_1_4_1_5", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==100-60);
	}

	@Test
	public void test65() throws Exception {
		System.out.println("Test case 65");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_4_2", vendingmachine.getDeposit()==25);
		assertTrue("1_1_4_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_1_4_2_1", vendingmachine.getDeposit()==125);
		assertTrue("1_1_4_2_1", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test66() throws Exception {
		System.out.println("Test case 66");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_4_2_2", vendingmachine.getDeposit()==30);
		assertTrue("1_1_4_2_2", ! (vendingmachine.getDeposit()==25));
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_1_4_2_2_1", vendingmachine.getDeposit()==130);
		assertTrue("1_1_4_2_2_1", ! (vendingmachine.getDeposit()==30));
	}

	@Test
	public void test67() throws Exception {
		System.out.println("Test case 67");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_1_4_2_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_1_4_2_2_2", ! (vendingmachine.getDeposit()==30));
	}

	@Test
	public void test68() throws Exception {
		System.out.println("Test case 68");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_1_4_2_3", vendingmachine.getDeposit()==0);
		assertTrue("1_1_4_2_3", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test69() throws Exception {
		System.out.println("Test case 69");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_1_4_3", vendingmachine.getDeposit()==5);
		assertTrue("1_1_4_3", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_1_4_3_1", vendingmachine.getDeposit()==105);
		assertTrue("1_1_4_3_1", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test70() throws Exception {
		System.out.println("Test case 70");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_1_4_3_2", vendingmachine.getDeposit()==30);
		assertTrue("1_1_4_3_2", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test71() throws Exception {
		System.out.println("Test case 71");
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_1_4_3_3", vendingmachine.getDeposit()==0);
		assertTrue("1_1_4_3_3", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test72() throws Exception {
		System.out.println("Test case 72");
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_2", vendingmachine.getDeposit()==100);
		assertTrue("1_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_1", vendingmachine.getDeposit()==110);
		assertTrue("1_2_1", ! (vendingmachine.getDeposit()==100));
	}

	@Test
	public void test73() throws Exception {
		System.out.println("Test case 73");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_2", vendingmachine.getDeposit()==125);
		assertTrue("1_2_2", ! (vendingmachine.getDeposit()==100));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_2_1", vendingmachine.getDeposit()==135);
		assertTrue("1_2_2_1", ! (vendingmachine.getDeposit()==125));
	}

	@Test
	public void test74() throws Exception {
		System.out.println("Test case 74");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_2_2", vendingmachine.getDeposit()==130);
		assertTrue("1_2_2_2", ! (vendingmachine.getDeposit()==125));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_2_2_1", vendingmachine.getDeposit()==140);
		assertTrue("1_2_2_2_1", ! (vendingmachine.getDeposit()==130));
	}

	@Test
	public void test75() throws Exception {
		System.out.println("Test case 75");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(SODA);
		assertTrue("1_2_2_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_2_2_2", checkDrink(SODA, 115, 0));
		assertTrue("1_2_2_2_2", ! (vendingmachine.getDeposit()==130));
		assertTrue("1_2_2_2_2", ! (checkDrink(SODA, 115, 1)));
		assertTrue("", vendingmachine.getChange()==130-115);
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_2_2_2_1", vendingmachine.getDeposit()==10);
		assertTrue("1_2_2_2_2_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==10));
	}

	@Test
	public void test76() throws Exception {
		System.out.println("Test case 76");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_2_2_2_3", vendingmachine.getDeposit()==0);
		assertTrue("1_2_2_2_3", ! (vendingmachine.getDeposit()==130));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_2_2_3_1", vendingmachine.getDeposit()==10);
		assertTrue("1_2_2_2_3_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==10));
	}

	@Test
	public void test77() throws Exception {
		System.out.println("Test case 77");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_2_2_2_4", vendingmachine.getDeposit()==0);
		assertTrue("1_2_2_2_4", checkDrink(COFFEE, 85, 0));
		assertTrue("1_2_2_2_4", ! (vendingmachine.getDeposit()==130));
		assertTrue("1_2_2_2_4", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==130-85);
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_2_2_4_1", vendingmachine.getDeposit()==10);
		assertTrue("1_2_2_2_4_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==10));
	}

	@Test
	public void test78() throws Exception {
		System.out.println("Test case 78");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(JUICE);
		assertTrue("1_2_2_2_5", vendingmachine.getDeposit()==0);
		assertTrue("1_2_2_2_5", checkDrink(JUICE, 60, 0));
		assertTrue("1_2_2_2_5", ! (vendingmachine.getDeposit()==130));
		assertTrue("1_2_2_2_5", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==130-60);
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_2_2_5_1", vendingmachine.getDeposit()==10);
		assertTrue("1_2_2_2_5_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==10));
	}

	@Test
	public void test79() throws Exception {
		System.out.println("Test case 79");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(SODA);
		assertTrue("1_2_2_3", vendingmachine.getDeposit()==0);
		assertTrue("1_2_2_3", checkDrink(SODA, 115, 0));
		assertTrue("1_2_2_3", ! (vendingmachine.getDeposit()==125));
		assertTrue("1_2_2_3", ! (checkDrink(SODA, 115, 1)));
		assertTrue("", vendingmachine.getChange()==125-115);
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_2_3_1", vendingmachine.getDeposit()==10);
		assertTrue("1_2_2_3_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_2_3_1_1", vendingmachine.getDeposit()==15);
		assertTrue("1_2_2_3_1_1", ! (vendingmachine.getDeposit()==10));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==15));
	}

	@Test
	public void test80() throws Exception {
		System.out.println("Test case 80");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(SODA);
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		assertTrue("1_2_2_3_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_2_3_1_2", ! (vendingmachine.getDeposit()==10));
	}

	@Test
	public void test81() throws Exception {
		System.out.println("Test case 81");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(SODA);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_2_3_2", vendingmachine.getDeposit()==5);
		assertTrue("1_2_2_3_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_2_3_2_1", vendingmachine.getDeposit()==15);
		assertTrue("1_2_2_3_2_1", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test82() throws Exception {
		System.out.println("Test case 82");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(SODA);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_2_2_3_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_2_3_2_2", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test83() throws Exception {
		System.out.println("Test case 83");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_2_2_4", vendingmachine.getDeposit()==0);
		assertTrue("1_2_2_4", ! (vendingmachine.getDeposit()==125));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_2_4_1", vendingmachine.getDeposit()==10);
		assertTrue("1_2_2_4_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_2_4_1_1", vendingmachine.getDeposit()==15);
		assertTrue("1_2_2_4_1_1", ! (vendingmachine.getDeposit()==10));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==15));
	}

	@Test
	public void test84() throws Exception {
		System.out.println("Test case 84");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		assertTrue("1_2_2_4_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_2_4_1_2", ! (vendingmachine.getDeposit()==10));
	}

	@Test
	public void test85() throws Exception {
		System.out.println("Test case 85");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_2_4_2", vendingmachine.getDeposit()==5);
		assertTrue("1_2_2_4_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_2_4_2_1", vendingmachine.getDeposit()==15);
		assertTrue("1_2_2_4_2_1", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test86() throws Exception {
		System.out.println("Test case 86");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_2_2_4_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_2_4_2_2", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test87() throws Exception {
		System.out.println("Test case 87");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_2_2_5", vendingmachine.getDeposit()==0);
		assertTrue("1_2_2_5", checkDrink(COFFEE, 85, 0));
		assertTrue("1_2_2_5", ! (vendingmachine.getDeposit()==125));
		assertTrue("1_2_2_5", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==125-85);
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_2_5_1", vendingmachine.getDeposit()==10);
		assertTrue("1_2_2_5_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_2_5_1_1", vendingmachine.getDeposit()==15);
		assertTrue("1_2_2_5_1_1", ! (vendingmachine.getDeposit()==10));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==15));
	}

	@Test
	public void test88() throws Exception {
		System.out.println("Test case 88");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		assertTrue("1_2_2_5_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_2_5_1_2", ! (vendingmachine.getDeposit()==10));
	}

	@Test
	public void test89() throws Exception {
		System.out.println("Test case 89");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_2_5_2", vendingmachine.getDeposit()==5);
		assertTrue("1_2_2_5_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_2_5_2_1", vendingmachine.getDeposit()==15);
		assertTrue("1_2_2_5_2_1", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test90() throws Exception {
		System.out.println("Test case 90");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_2_2_5_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_2_5_2_2", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test91() throws Exception {
		System.out.println("Test case 91");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(JUICE);
		assertTrue("1_2_2_6", vendingmachine.getDeposit()==0);
		assertTrue("1_2_2_6", checkDrink(JUICE, 60, 0));
		assertTrue("1_2_2_6", ! (vendingmachine.getDeposit()==125));
		assertTrue("1_2_2_6", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==125-60);
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_2_6_1", vendingmachine.getDeposit()==10);
		assertTrue("1_2_2_6_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_2_6_1_1", vendingmachine.getDeposit()==15);
		assertTrue("1_2_2_6_1_1", ! (vendingmachine.getDeposit()==10));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==15));
	}

	@Test
	public void test92() throws Exception {
		System.out.println("Test case 92");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		assertTrue("1_2_2_6_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_2_6_1_2", ! (vendingmachine.getDeposit()==10));
	}

	@Test
	public void test93() throws Exception {
		System.out.println("Test case 93");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_2_6_2", vendingmachine.getDeposit()==5);
		assertTrue("1_2_2_6_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_2_6_2_1", vendingmachine.getDeposit()==15);
		assertTrue("1_2_2_6_2_1", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test94() throws Exception {
		System.out.println("Test case 94");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_2_2_6_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_2_6_2_2", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test95() throws Exception {
		System.out.println("Test case 95");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_3", vendingmachine.getDeposit()==105);
		assertTrue("1_2_3", ! (vendingmachine.getDeposit()==100));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_3_1", vendingmachine.getDeposit()==115);
		assertTrue("1_2_3_1", ! (vendingmachine.getDeposit()==105));
	}

	@Test
	public void test96() throws Exception {
		System.out.println("Test case 96");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_3_2", vendingmachine.getDeposit()==130);
		assertTrue("1_2_3_2", ! (vendingmachine.getDeposit()==105));
	}

	@Test
	public void test97() throws Exception {
		System.out.println("Test case 97");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_2_3_3", vendingmachine.getDeposit()==0);
		assertTrue("1_2_3_3", ! (vendingmachine.getDeposit()==105));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_3_3_1", vendingmachine.getDeposit()==10);
		assertTrue("1_2_3_3_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_3_3_1_1", vendingmachine.getDeposit()==35);
		assertTrue("1_2_3_3_1_1", ! (vendingmachine.getDeposit()==10));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==35));
	}

	@Test
	public void test98() throws Exception {
		System.out.println("Test case 98");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		assertTrue("1_2_3_3_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_3_3_1_2", ! (vendingmachine.getDeposit()==10));
	}

	@Test
	public void test99() throws Exception {
		System.out.println("Test case 99");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_3_3_2", vendingmachine.getDeposit()==25);
		assertTrue("1_2_3_3_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_3_3_2_1", vendingmachine.getDeposit()==35);
		assertTrue("1_2_3_3_2_1", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test100() throws Exception {
		System.out.println("Test case 100");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_2_3_3_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_3_3_2_2", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test101() throws Exception {
		System.out.println("Test case 101");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_2_3_4", vendingmachine.getDeposit()==0);
		assertTrue("1_2_3_4", checkDrink(COFFEE, 85, 0));
		assertTrue("1_2_3_4", ! (vendingmachine.getDeposit()==105));
		assertTrue("1_2_3_4", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==105-85);
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_3_4_1", vendingmachine.getDeposit()==10);
		assertTrue("1_2_3_4_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_3_4_1_1", vendingmachine.getDeposit()==35);
		assertTrue("1_2_3_4_1_1", ! (vendingmachine.getDeposit()==10));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==35));
	}

	@Test
	public void test102() throws Exception {
		System.out.println("Test case 102");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		assertTrue("1_2_3_4_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_3_4_1_2", ! (vendingmachine.getDeposit()==10));
	}

	@Test
	public void test103() throws Exception {
		System.out.println("Test case 103");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_3_4_2", vendingmachine.getDeposit()==25);
		assertTrue("1_2_3_4_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_3_4_2_1", vendingmachine.getDeposit()==35);
		assertTrue("1_2_3_4_2_1", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test104() throws Exception {
		System.out.println("Test case 104");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_2_3_4_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_3_4_2_2", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test105() throws Exception {
		System.out.println("Test case 105");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(JUICE);
		assertTrue("1_2_3_5", vendingmachine.getDeposit()==0);
		assertTrue("1_2_3_5", checkDrink(JUICE, 60, 0));
		assertTrue("1_2_3_5", ! (vendingmachine.getDeposit()==105));
		assertTrue("1_2_3_5", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==105-60);
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_3_5_1", vendingmachine.getDeposit()==10);
		assertTrue("1_2_3_5_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_3_5_1_1", vendingmachine.getDeposit()==35);
		assertTrue("1_2_3_5_1_1", ! (vendingmachine.getDeposit()==10));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==35));
	}

	@Test
	public void test106() throws Exception {
		System.out.println("Test case 106");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		assertTrue("1_2_3_5_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_3_5_1_2", ! (vendingmachine.getDeposit()==10));
	}

	@Test
	public void test107() throws Exception {
		System.out.println("Test case 107");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_3_5_2", vendingmachine.getDeposit()==25);
		assertTrue("1_2_3_5_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_3_5_2_1", vendingmachine.getDeposit()==35);
		assertTrue("1_2_3_5_2_1", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test108() throws Exception {
		System.out.println("Test case 108");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_2_3_5_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_3_5_2_2", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test109() throws Exception {
		System.out.println("Test case 109");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		assertTrue("1_2_4", vendingmachine.getDeposit()==0);
		assertTrue("1_2_4", ! (vendingmachine.getDeposit()==100));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_4_1", vendingmachine.getDeposit()==10);
		assertTrue("1_2_4_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_4_1_1", vendingmachine.getDeposit()==35);
		assertTrue("1_2_4_1_1", ! (vendingmachine.getDeposit()==10));
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_4_1_1_1", vendingmachine.getDeposit()==40);
		assertTrue("1_2_4_1_1_1", ! (vendingmachine.getDeposit()==35));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==40));
	}

	@Test
	public void test110() throws Exception {
		System.out.println("Test case 110");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_2_4_1_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_4_1_1_2", ! (vendingmachine.getDeposit()==35));
	}

	@Test
	public void test111() throws Exception {
		System.out.println("Test case 111");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_4_1_2", vendingmachine.getDeposit()==15);
		assertTrue("1_2_4_1_2", ! (vendingmachine.getDeposit()==10));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_4_1_2_1", vendingmachine.getDeposit()==40);
		assertTrue("1_2_4_1_2_1", ! (vendingmachine.getDeposit()==15));
	}

	@Test
	public void test112() throws Exception {
		System.out.println("Test case 112");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_2_4_1_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_4_1_2_2", ! (vendingmachine.getDeposit()==15));
	}

	@Test
	public void test113() throws Exception {
		System.out.println("Test case 113");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		assertTrue("1_2_4_1_3", vendingmachine.getDeposit()==0);
		assertTrue("1_2_4_1_3", ! (vendingmachine.getDeposit()==10));
	}

	@Test
	public void test114() throws Exception {
		System.out.println("Test case 114");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_4_2", vendingmachine.getDeposit()==25);
		assertTrue("1_2_4_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_4_2_1", vendingmachine.getDeposit()==35);
		assertTrue("1_2_4_2_1", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test115() throws Exception {
		System.out.println("Test case 115");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_4_2_2", vendingmachine.getDeposit()==30);
		assertTrue("1_2_4_2_2", ! (vendingmachine.getDeposit()==25));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_4_2_2_1", vendingmachine.getDeposit()==40);
		assertTrue("1_2_4_2_2_1", ! (vendingmachine.getDeposit()==30));
	}

	@Test
	public void test116() throws Exception {
		System.out.println("Test case 116");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_2_4_2_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_4_2_2_2", ! (vendingmachine.getDeposit()==30));
	}

	@Test
	public void test117() throws Exception {
		System.out.println("Test case 117");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_2_4_2_3", vendingmachine.getDeposit()==0);
		assertTrue("1_2_4_2_3", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test118() throws Exception {
		System.out.println("Test case 118");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_4_3", vendingmachine.getDeposit()==5);
		assertTrue("1_2_4_3", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_4_3_1", vendingmachine.getDeposit()==15);
		assertTrue("1_2_4_3_1", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test119() throws Exception {
		System.out.println("Test case 119");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_4_3_2", vendingmachine.getDeposit()==30);
		assertTrue("1_2_4_3_2", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test120() throws Exception {
		System.out.println("Test case 120");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_2_4_3_3", vendingmachine.getDeposit()==0);
		assertTrue("1_2_4_3_3", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test121() throws Exception {
		System.out.println("Test case 121");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_2_5", vendingmachine.getDeposit()==0);
		assertTrue("1_2_5", checkDrink(COFFEE, 85, 0));
		assertTrue("1_2_5", ! (vendingmachine.getDeposit()==100));
		assertTrue("1_2_5", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==100-85);
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_5_1", vendingmachine.getDeposit()==10);
		assertTrue("1_2_5_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_5_1_1", vendingmachine.getDeposit()==35);
		assertTrue("1_2_5_1_1", ! (vendingmachine.getDeposit()==10));
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_5_1_1_1", vendingmachine.getDeposit()==40);
		assertTrue("1_2_5_1_1_1", ! (vendingmachine.getDeposit()==35));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==40));
	}

	@Test
	public void test122() throws Exception {
		System.out.println("Test case 122");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_2_5_1_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_5_1_1_2", ! (vendingmachine.getDeposit()==35));
	}

	@Test
	public void test123() throws Exception {
		System.out.println("Test case 123");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_5_1_2", vendingmachine.getDeposit()==15);
		assertTrue("1_2_5_1_2", ! (vendingmachine.getDeposit()==10));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_5_1_2_1", vendingmachine.getDeposit()==40);
		assertTrue("1_2_5_1_2_1", ! (vendingmachine.getDeposit()==15));
	}

	@Test
	public void test124() throws Exception {
		System.out.println("Test case 124");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_2_5_1_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_5_1_2_2", ! (vendingmachine.getDeposit()==15));
	}

	@Test
	public void test125() throws Exception {
		System.out.println("Test case 125");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		assertTrue("1_2_5_1_3", vendingmachine.getDeposit()==0);
		assertTrue("1_2_5_1_3", ! (vendingmachine.getDeposit()==10));
	}

	@Test
	public void test126() throws Exception {
		System.out.println("Test case 126");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_5_2", vendingmachine.getDeposit()==25);
		assertTrue("1_2_5_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_5_2_1", vendingmachine.getDeposit()==35);
		assertTrue("1_2_5_2_1", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test127() throws Exception {
		System.out.println("Test case 127");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_5_2_2", vendingmachine.getDeposit()==30);
		assertTrue("1_2_5_2_2", ! (vendingmachine.getDeposit()==25));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_5_2_2_1", vendingmachine.getDeposit()==40);
		assertTrue("1_2_5_2_2_1", ! (vendingmachine.getDeposit()==30));
	}

	@Test
	public void test128() throws Exception {
		System.out.println("Test case 128");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_2_5_2_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_5_2_2_2", ! (vendingmachine.getDeposit()==30));
	}

	@Test
	public void test129() throws Exception {
		System.out.println("Test case 129");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_2_5_2_3", vendingmachine.getDeposit()==0);
		assertTrue("1_2_5_2_3", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test130() throws Exception {
		System.out.println("Test case 130");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_5_3", vendingmachine.getDeposit()==5);
		assertTrue("1_2_5_3", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_5_3_1", vendingmachine.getDeposit()==15);
		assertTrue("1_2_5_3_1", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test131() throws Exception {
		System.out.println("Test case 131");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_5_3_2", vendingmachine.getDeposit()==30);
		assertTrue("1_2_5_3_2", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test132() throws Exception {
		System.out.println("Test case 132");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_2_5_3_3", vendingmachine.getDeposit()==0);
		assertTrue("1_2_5_3_3", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test133() throws Exception {
		System.out.println("Test case 133");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		assertTrue("1_2_6", vendingmachine.getDeposit()==0);
		assertTrue("1_2_6", checkDrink(JUICE, 60, 0));
		assertTrue("1_2_6", ! (vendingmachine.getDeposit()==100));
		assertTrue("1_2_6", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==100-60);
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_6_1", vendingmachine.getDeposit()==10);
		assertTrue("1_2_6_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_6_1_1", vendingmachine.getDeposit()==35);
		assertTrue("1_2_6_1_1", ! (vendingmachine.getDeposit()==10));
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_6_1_1_1", vendingmachine.getDeposit()==40);
		assertTrue("1_2_6_1_1_1", ! (vendingmachine.getDeposit()==35));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==40));
	}

	@Test
	public void test134() throws Exception {
		System.out.println("Test case 134");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_2_6_1_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_6_1_1_2", ! (vendingmachine.getDeposit()==35));
	}

	@Test
	public void test135() throws Exception {
		System.out.println("Test case 135");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_6_1_2", vendingmachine.getDeposit()==15);
		assertTrue("1_2_6_1_2", ! (vendingmachine.getDeposit()==10));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_6_1_2_1", vendingmachine.getDeposit()==40);
		assertTrue("1_2_6_1_2_1", ! (vendingmachine.getDeposit()==15));
	}

	@Test
	public void test136() throws Exception {
		System.out.println("Test case 136");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_2_6_1_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_6_1_2_2", ! (vendingmachine.getDeposit()==15));
	}

	@Test
	public void test137() throws Exception {
		System.out.println("Test case 137");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		assertTrue("1_2_6_1_3", vendingmachine.getDeposit()==0);
		assertTrue("1_2_6_1_3", ! (vendingmachine.getDeposit()==10));
	}

	@Test
	public void test138() throws Exception {
		System.out.println("Test case 138");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_6_2", vendingmachine.getDeposit()==25);
		assertTrue("1_2_6_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_6_2_1", vendingmachine.getDeposit()==35);
		assertTrue("1_2_6_2_1", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test139() throws Exception {
		System.out.println("Test case 139");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_6_2_2", vendingmachine.getDeposit()==30);
		assertTrue("1_2_6_2_2", ! (vendingmachine.getDeposit()==25));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_6_2_2_1", vendingmachine.getDeposit()==40);
		assertTrue("1_2_6_2_2_1", ! (vendingmachine.getDeposit()==30));
	}

	@Test
	public void test140() throws Exception {
		System.out.println("Test case 140");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_2_6_2_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_2_6_2_2_2", ! (vendingmachine.getDeposit()==30));
	}

	@Test
	public void test141() throws Exception {
		System.out.println("Test case 141");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_2_6_2_3", vendingmachine.getDeposit()==0);
		assertTrue("1_2_6_2_3", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test142() throws Exception {
		System.out.println("Test case 142");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_2_6_3", vendingmachine.getDeposit()==5);
		assertTrue("1_2_6_3", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_2_6_3_1", vendingmachine.getDeposit()==15);
		assertTrue("1_2_6_3_1", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test143() throws Exception {
		System.out.println("Test case 143");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_2_6_3_2", vendingmachine.getDeposit()==30);
		assertTrue("1_2_6_3_2", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test144() throws Exception {
		System.out.println("Test case 144");
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_2_6_3_3", vendingmachine.getDeposit()==0);
		assertTrue("1_2_6_3_3", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test145() throws Exception {
		System.out.println("Test case 145");
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_3", vendingmachine.getDeposit()==25);
		assertTrue("1_3", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_3_1", vendingmachine.getDeposit()==35);
		assertTrue("1_3_1", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test146() throws Exception {
		System.out.println("Test case 146");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_3_2", vendingmachine.getDeposit()==125);
		assertTrue("1_3_2", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test147() throws Exception {
		System.out.println("Test case 147");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_3_3", vendingmachine.getDeposit()==30);
		assertTrue("1_3_3", ! (vendingmachine.getDeposit()==25));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_3_3_1", vendingmachine.getDeposit()==40);
		assertTrue("1_3_3_1", ! (vendingmachine.getDeposit()==30));
	}

	@Test
	public void test148() throws Exception {
		System.out.println("Test case 148");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_3_3_2", vendingmachine.getDeposit()==130);
		assertTrue("1_3_3_2", ! (vendingmachine.getDeposit()==30));
	}

	@Test
	public void test149() throws Exception {
		System.out.println("Test case 149");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_3_3_3", vendingmachine.getDeposit()==0);
		assertTrue("1_3_3_3", ! (vendingmachine.getDeposit()==30));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_3_3_3_1", vendingmachine.getDeposit()==10);
		assertTrue("1_3_3_3_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_3_3_3_1_1", vendingmachine.getDeposit()==110);
		assertTrue("1_3_3_3_1_1", ! (vendingmachine.getDeposit()==10));
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==110));
	}

	@Test
	public void test150() throws Exception {
		System.out.println("Test case 150");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", checkDrink(COFFEE, 85, 0));
		assertTrue("", ! (vendingmachine.getDeposit()==110));
		assertTrue("", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==110-85);
	}

	@Test
	public void test151() throws Exception {
		System.out.println("Test case 151");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", checkDrink(JUICE, 60, 0));
		assertTrue("", ! (vendingmachine.getDeposit()==110));
		assertTrue("", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==110-60);
	}

	@Test
	public void test152() throws Exception {
		System.out.println("Test case 152");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		assertTrue("1_3_3_3_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_3_3_3_1_2", ! (vendingmachine.getDeposit()==10));
	}

	@Test
	public void test153() throws Exception {
		System.out.println("Test case 153");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_3_3_3_2", vendingmachine.getDeposit()==100);
		assertTrue("1_3_3_3_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_3_3_3_2_1", vendingmachine.getDeposit()==110);
		assertTrue("1_3_3_3_2_1", ! (vendingmachine.getDeposit()==100));
	}

	@Test
	public void test154() throws Exception {
		System.out.println("Test case 154");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		assertTrue("1_3_3_3_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_3_3_3_2_2", ! (vendingmachine.getDeposit()==100));
	}

	@Test
	public void test155() throws Exception {
		System.out.println("Test case 155");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_3_3_3_2_3", vendingmachine.getDeposit()==0);
		assertTrue("1_3_3_3_2_3", checkDrink(COFFEE, 85, 0));
		assertTrue("1_3_3_3_2_3", ! (vendingmachine.getDeposit()==100));
		assertTrue("1_3_3_3_2_3", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==100-85);
	}

	@Test
	public void test156() throws Exception {
		System.out.println("Test case 156");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		assertTrue("1_3_3_3_2_4", vendingmachine.getDeposit()==0);
		assertTrue("1_3_3_3_2_4", checkDrink(JUICE, 60, 0));
		assertTrue("1_3_3_3_2_4", ! (vendingmachine.getDeposit()==100));
		assertTrue("1_3_3_3_2_4", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==100-60);
	}

	@Test
	public void test157() throws Exception {
		System.out.println("Test case 157");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_3_4", vendingmachine.getDeposit()==0);
		assertTrue("1_3_4", ! (vendingmachine.getDeposit()==25));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_3_4_1", vendingmachine.getDeposit()==10);
		assertTrue("1_3_4_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_3_4_1_1", vendingmachine.getDeposit()==110);
		assertTrue("1_3_4_1_1", ! (vendingmachine.getDeposit()==10));
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_3_4_1_1_1", vendingmachine.getDeposit()==115);
		assertTrue("1_3_4_1_1_1", ! (vendingmachine.getDeposit()==110));
		vendingmachine.purchase(SODA);
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", checkDrink(SODA, 115, 0));
		assertTrue("", ! (vendingmachine.getDeposit()==115));
		assertTrue("", ! (checkDrink(SODA, 115, 1)));
		assertTrue("", vendingmachine.getChange()==115-115);
	}

	@Test
	public void test158() throws Exception {
		System.out.println("Test case 158");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==115));
	}

	@Test
	public void test159() throws Exception {
		System.out.println("Test case 159");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(COFFEE);
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", checkDrink(COFFEE, 85, 0));
		assertTrue("", ! (vendingmachine.getDeposit()==115));
		assertTrue("", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==115-85);
	}

	@Test
	public void test160() throws Exception {
		System.out.println("Test case 160");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(JUICE);
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", checkDrink(JUICE, 60, 0));
		assertTrue("", ! (vendingmachine.getDeposit()==115));
		assertTrue("", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==115-60);
	}

	@Test
	public void test161() throws Exception {
		System.out.println("Test case 161");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		assertTrue("1_3_4_1_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_3_4_1_1_2", ! (vendingmachine.getDeposit()==110));
	}

	@Test
	public void test162() throws Exception {
		System.out.println("Test case 162");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_3_4_1_1_3", vendingmachine.getDeposit()==0);
		assertTrue("1_3_4_1_1_3", checkDrink(COFFEE, 85, 0));
		assertTrue("1_3_4_1_1_3", ! (vendingmachine.getDeposit()==110));
		assertTrue("1_3_4_1_1_3", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==110-85);
	}

	@Test
	public void test163() throws Exception {
		System.out.println("Test case 163");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		assertTrue("1_3_4_1_1_4", vendingmachine.getDeposit()==0);
		assertTrue("1_3_4_1_1_4", checkDrink(JUICE, 60, 0));
		assertTrue("1_3_4_1_1_4", ! (vendingmachine.getDeposit()==110));
		assertTrue("1_3_4_1_1_4", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==110-60);
	}

	@Test
	public void test164() throws Exception {
		System.out.println("Test case 164");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_3_4_1_2", vendingmachine.getDeposit()==15);
		assertTrue("1_3_4_1_2", ! (vendingmachine.getDeposit()==10));
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_3_4_1_2_1", vendingmachine.getDeposit()==115);
		assertTrue("1_3_4_1_2_1", ! (vendingmachine.getDeposit()==15));
	}

	@Test
	public void test165() throws Exception {
		System.out.println("Test case 165");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_3_4_1_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_3_4_1_2_2", ! (vendingmachine.getDeposit()==15));
	}

	@Test
	public void test166() throws Exception {
		System.out.println("Test case 166");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		assertTrue("1_3_4_1_3", vendingmachine.getDeposit()==0);
		assertTrue("1_3_4_1_3", ! (vendingmachine.getDeposit()==10));
	}

	@Test
	public void test167() throws Exception {
		System.out.println("Test case 167");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_3_4_2", vendingmachine.getDeposit()==100);
		assertTrue("1_3_4_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_3_4_2_1", vendingmachine.getDeposit()==110);
		assertTrue("1_3_4_2_1", ! (vendingmachine.getDeposit()==100));
	}

	@Test
	public void test168() throws Exception {
		System.out.println("Test case 168");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_3_4_2_2", vendingmachine.getDeposit()==105);
		assertTrue("1_3_4_2_2", ! (vendingmachine.getDeposit()==100));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_3_4_2_2_1", vendingmachine.getDeposit()==115);
		assertTrue("1_3_4_2_2_1", ! (vendingmachine.getDeposit()==105));
	}

	@Test
	public void test169() throws Exception {
		System.out.println("Test case 169");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_3_4_2_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_3_4_2_2_2", ! (vendingmachine.getDeposit()==105));
	}

	@Test
	public void test170() throws Exception {
		System.out.println("Test case 170");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_3_4_2_2_3", vendingmachine.getDeposit()==0);
		assertTrue("1_3_4_2_2_3", checkDrink(COFFEE, 85, 0));
		assertTrue("1_3_4_2_2_3", ! (vendingmachine.getDeposit()==105));
		assertTrue("1_3_4_2_2_3", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==105-85);
	}

	@Test
	public void test171() throws Exception {
		System.out.println("Test case 171");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.purchase(JUICE);
		assertTrue("1_3_4_2_2_4", vendingmachine.getDeposit()==0);
		assertTrue("1_3_4_2_2_4", checkDrink(JUICE, 60, 0));
		assertTrue("1_3_4_2_2_4", ! (vendingmachine.getDeposit()==105));
		assertTrue("1_3_4_2_2_4", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==105-60);
	}

	@Test
	public void test172() throws Exception {
		System.out.println("Test case 172");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		assertTrue("1_3_4_2_3", vendingmachine.getDeposit()==0);
		assertTrue("1_3_4_2_3", ! (vendingmachine.getDeposit()==100));
	}

	@Test
	public void test173() throws Exception {
		System.out.println("Test case 173");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_3_4_2_4", vendingmachine.getDeposit()==0);
		assertTrue("1_3_4_2_4", checkDrink(COFFEE, 85, 0));
		assertTrue("1_3_4_2_4", ! (vendingmachine.getDeposit()==100));
		assertTrue("1_3_4_2_4", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==100-85);
	}

	@Test
	public void test174() throws Exception {
		System.out.println("Test case 174");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		assertTrue("1_3_4_2_5", vendingmachine.getDeposit()==0);
		assertTrue("1_3_4_2_5", checkDrink(JUICE, 60, 0));
		assertTrue("1_3_4_2_5", ! (vendingmachine.getDeposit()==100));
		assertTrue("1_3_4_2_5", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==100-60);
	}

	@Test
	public void test175() throws Exception {
		System.out.println("Test case 175");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_3_4_3", vendingmachine.getDeposit()==5);
		assertTrue("1_3_4_3", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_3_4_3_1", vendingmachine.getDeposit()==15);
		assertTrue("1_3_4_3_1", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test176() throws Exception {
		System.out.println("Test case 176");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_3_4_3_2", vendingmachine.getDeposit()==105);
		assertTrue("1_3_4_3_2", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test177() throws Exception {
		System.out.println("Test case 177");
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_3_4_3_3", vendingmachine.getDeposit()==0);
		assertTrue("1_3_4_3_3", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test178() throws Exception {
		System.out.println("Test case 178");
		vendingmachine.insertCoin(Coin.NICKEL);
		assertTrue("1_4", vendingmachine.getDeposit()==5);
		assertTrue("1_4", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_4_1", vendingmachine.getDeposit()==15);
		assertTrue("1_4_1", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test179() throws Exception {
		System.out.println("Test case 179");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_4_2", vendingmachine.getDeposit()==105);
		assertTrue("1_4_2", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test180() throws Exception {
		System.out.println("Test case 180");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_4_3", vendingmachine.getDeposit()==30);
		assertTrue("1_4_3", ! (vendingmachine.getDeposit()==5));
	}

	@Test
	public void test181() throws Exception {
		System.out.println("Test case 181");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		assertTrue("1_4_4", vendingmachine.getDeposit()==0);
		assertTrue("1_4_4", ! (vendingmachine.getDeposit()==5));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_4_4_1", vendingmachine.getDeposit()==10);
		assertTrue("1_4_4_1", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_4_4_1_1", vendingmachine.getDeposit()==110);
		assertTrue("1_4_4_1_1", ! (vendingmachine.getDeposit()==10));
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_4_4_1_1_1", vendingmachine.getDeposit()==135);
		assertTrue("1_4_4_1_1_1", ! (vendingmachine.getDeposit()==110));
		vendingmachine.purchase(SODA);
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", checkDrink(SODA, 115, 0));
		assertTrue("", ! (vendingmachine.getDeposit()==135));
		assertTrue("", ! (checkDrink(SODA, 115, 1)));
		assertTrue("", vendingmachine.getChange()==135-115);
	}

	@Test
	public void test182() throws Exception {
		System.out.println("Test case 182");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", ! (vendingmachine.getDeposit()==135));
	}

	@Test
	public void test183() throws Exception {
		System.out.println("Test case 183");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(COFFEE);
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", checkDrink(COFFEE, 85, 0));
		assertTrue("", ! (vendingmachine.getDeposit()==135));
		assertTrue("", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==135-85);
	}

	@Test
	public void test184() throws Exception {
		System.out.println("Test case 184");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(JUICE);
		assertTrue("", vendingmachine.getDeposit()==0);
		assertTrue("", checkDrink(JUICE, 60, 0));
		assertTrue("", ! (vendingmachine.getDeposit()==135));
		assertTrue("", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==135-60);
	}

	@Test
	public void test185() throws Exception {
		System.out.println("Test case 185");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		assertTrue("1_4_4_1_1_2", vendingmachine.getDeposit()==0);
		assertTrue("1_4_4_1_1_2", ! (vendingmachine.getDeposit()==110));
	}

	@Test
	public void test186() throws Exception {
		System.out.println("Test case 186");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_4_4_1_1_3", vendingmachine.getDeposit()==0);
		assertTrue("1_4_4_1_1_3", checkDrink(COFFEE, 85, 0));
		assertTrue("1_4_4_1_1_3", ! (vendingmachine.getDeposit()==110));
		assertTrue("1_4_4_1_1_3", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==110-85);
	}

	@Test
	public void test187() throws Exception {
		System.out.println("Test case 187");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		assertTrue("1_4_4_1_1_4", vendingmachine.getDeposit()==0);
		assertTrue("1_4_4_1_1_4", checkDrink(JUICE, 60, 0));
		assertTrue("1_4_4_1_1_4", ! (vendingmachine.getDeposit()==110));
		assertTrue("1_4_4_1_1_4", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==110-60);
	}

	@Test
	public void test188() throws Exception {
		System.out.println("Test case 188");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_4_4_1_2", vendingmachine.getDeposit()==35);
		assertTrue("1_4_4_1_2", ! (vendingmachine.getDeposit()==10));
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_4_4_1_2_1", vendingmachine.getDeposit()==135);
		assertTrue("1_4_4_1_2_1", ! (vendingmachine.getDeposit()==35));
	}

	@Test
	public void test189() throws Exception {
		System.out.println("Test case 189");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_4_4_1_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_4_4_1_2_2", ! (vendingmachine.getDeposit()==35));
	}

	@Test
	public void test190() throws Exception {
		System.out.println("Test case 190");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DIME);
		vendingmachine.returnCoins();
		assertTrue("1_4_4_1_3", vendingmachine.getDeposit()==0);
		assertTrue("1_4_4_1_3", ! (vendingmachine.getDeposit()==10));
	}

	@Test
	public void test191() throws Exception {
		System.out.println("Test case 191");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_4_4_2", vendingmachine.getDeposit()==100);
		assertTrue("1_4_4_2", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_4_4_2_1", vendingmachine.getDeposit()==110);
		assertTrue("1_4_4_2_1", ! (vendingmachine.getDeposit()==100));
	}

	@Test
	public void test192() throws Exception {
		System.out.println("Test case 192");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_4_4_2_2", vendingmachine.getDeposit()==125);
		assertTrue("1_4_4_2_2", ! (vendingmachine.getDeposit()==100));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_4_4_2_2_1", vendingmachine.getDeposit()==135);
		assertTrue("1_4_4_2_2_1", ! (vendingmachine.getDeposit()==125));
	}

	@Test
	public void test193() throws Exception {
		System.out.println("Test case 193");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(SODA);
		assertTrue("1_4_4_2_2_2", vendingmachine.getDeposit()==0);
		assertTrue("1_4_4_2_2_2", checkDrink(SODA, 115, 0));
		assertTrue("1_4_4_2_2_2", ! (vendingmachine.getDeposit()==125));
		assertTrue("1_4_4_2_2_2", ! (checkDrink(SODA, 115, 1)));
		assertTrue("", vendingmachine.getChange()==125-115);
	}

	@Test
	public void test194() throws Exception {
		System.out.println("Test case 194");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_4_4_2_2_3", vendingmachine.getDeposit()==0);
		assertTrue("1_4_4_2_2_3", ! (vendingmachine.getDeposit()==125));
	}

	@Test
	public void test195() throws Exception {
		System.out.println("Test case 195");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_4_4_2_2_4", vendingmachine.getDeposit()==0);
		assertTrue("1_4_4_2_2_4", checkDrink(COFFEE, 85, 0));
		assertTrue("1_4_4_2_2_4", ! (vendingmachine.getDeposit()==125));
		assertTrue("1_4_4_2_2_4", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==125-85);
	}

	@Test
	public void test196() throws Exception {
		System.out.println("Test case 196");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.purchase(JUICE);
		assertTrue("1_4_4_2_2_5", vendingmachine.getDeposit()==0);
		assertTrue("1_4_4_2_2_5", checkDrink(JUICE, 60, 0));
		assertTrue("1_4_4_2_2_5", ! (vendingmachine.getDeposit()==125));
		assertTrue("1_4_4_2_2_5", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==125-60);
	}

	@Test
	public void test197() throws Exception {
		System.out.println("Test case 197");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.returnCoins();
		assertTrue("1_4_4_2_3", vendingmachine.getDeposit()==0);
		assertTrue("1_4_4_2_3", ! (vendingmachine.getDeposit()==100));
	}

	@Test
	public void test198() throws Exception {
		System.out.println("Test case 198");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(COFFEE);
		assertTrue("1_4_4_2_4", vendingmachine.getDeposit()==0);
		assertTrue("1_4_4_2_4", checkDrink(COFFEE, 85, 0));
		assertTrue("1_4_4_2_4", ! (vendingmachine.getDeposit()==100));
		assertTrue("1_4_4_2_4", ! (checkDrink(COFFEE, 85, 1)));
		assertTrue("", vendingmachine.getChange()==100-85);
	}

	@Test
	public void test199() throws Exception {
		System.out.println("Test case 199");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.DOLLAR);
		vendingmachine.purchase(JUICE);
		assertTrue("1_4_4_2_5", vendingmachine.getDeposit()==0);
		assertTrue("1_4_4_2_5", checkDrink(JUICE, 60, 0));
		assertTrue("1_4_4_2_5", ! (vendingmachine.getDeposit()==100));
		assertTrue("1_4_4_2_5", ! (checkDrink(JUICE, 60, 1)));
		assertTrue("", vendingmachine.getChange()==100-60);
	}

	@Test
	public void test200() throws Exception {
		System.out.println("Test case 200");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.QUARTER);
		assertTrue("1_4_4_3", vendingmachine.getDeposit()==25);
		assertTrue("1_4_4_3", ! (vendingmachine.getDeposit()==0));
		vendingmachine.insertCoin(Coin.DIME);
		assertTrue("1_4_4_3_1", vendingmachine.getDeposit()==35);
		assertTrue("1_4_4_3_1", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test201() throws Exception {
		System.out.println("Test case 201");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.insertCoin(Coin.DOLLAR);
		assertTrue("1_4_4_3_2", vendingmachine.getDeposit()==125);
		assertTrue("1_4_4_3_2", ! (vendingmachine.getDeposit()==25));
	}

	@Test
	public void test202() throws Exception {
		System.out.println("Test case 202");
		vendingmachine.insertCoin(Coin.NICKEL);
		vendingmachine.returnCoins();
		vendingmachine.insertCoin(Coin.QUARTER);
		vendingmachine.returnCoins();
		assertTrue("1_4_4_3_3", vendingmachine.getDeposit()==0);
		assertTrue("1_4_4_3_3", ! (vendingmachine.getDeposit()==25));
	}


	public static final String COFFEE = VendingMachine.COFFEE; 
	public static final String JUICE = VendingMachine.JUICE; 
	public static final String SODA = VendingMachine.SODA; 
	
	private boolean checkDrink(String drink, int price, int count) {
		if (drink.equalsIgnoreCase(COFFEE)) 
				return vendingmachine.getCoffee().getPrice()==price && vendingmachine.getCoffee().getCount()==count;
		if (drink.equalsIgnoreCase(JUICE)) 
				return vendingmachine.getJuice().getPrice()==price && vendingmachine.getJuice().getCount()==count;
		if (drink.equalsIgnoreCase(SODA)) 
				return vendingmachine.getSoda().getPrice()==price && vendingmachine.getSoda().getCount()==count;
		else
			return true;
	}
	
	
}
