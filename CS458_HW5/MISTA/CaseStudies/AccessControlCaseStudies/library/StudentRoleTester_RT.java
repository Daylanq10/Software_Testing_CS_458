//Test code generated by MISTA

package com.library.test.software.modeltest;

import com.library.bo.book.Book;
import com.library.bo.user.Borrower;
import com.library.bo.user.Personnel;
import com.library.bo.user.BorrowerAccount;
import com.library.bo.user.PersonnelAccount;
import com.library.bo.user.User;
import com.library.dao.BookDAO;
import com.library.dao.dto.BookDTO;
import com.library.dao.dto.UserDTO;
import com.library.dao.dto.spec.DTO;
import com.library.security.impl.LibrarySecurityModel;
import com.library.security.impl.context.ContextManager;
import com.library.security.model.context.Context;
import com.library.service.BookService;
import com.library.service.BorrowerAccountService;
import com.library.service.PersonnelAccountService;
import com.library.service.UserService;
import com.library.service.exception.BSException;
import com.library.service.exception.SecuritPolicyViolationException;
import com.library.service.exception.UndefinedSecuritPolicyException;
import java.sql.SQLException;
import java.util.Collection;

public class StudentRoleTester_RT{

	private StudentRole studentrole;
	
	 public void setUp() {
	     try{
	      bookService = BookService.getInstance();
	      bookDAO = BookDAO.getInstance();
	      bookDAO.clearDatabase();
	      borrowerAccountService = BorrowerAccountService.getInstance();
	      personnelAccountService = PersonnelAccountService.getInstance();
	         
	      UserService userService = UserService.getInstance();
	      student = userService.logUser("tutu", "Not2Hard", UserService.BORROWER_LOGIN_MODE);
	            
	      borrower4Test = userService.logUser("tyty", "Tata", UserService.BORROWER_LOGIN_MODE);
	      borrower4Account = ((Borrower) borrower4Test.getRole()).getBorrowerAccount();
	         
	      borrower = userService.logUser("bobo", "B14me", UserService.BORROWER_LOGIN_MODE);
	      borrowerAccount = ((Borrower) borrower.getRole()).getBorrowerAccount();
	         
	      personnel4Test = userService.logUser("tftf", "titiopop", UserService.PERSONNEL_LOGIN_MODE);
	      personnel4Account = ((Personnel) personnel4Test.getRole()).getPersonnelAccount();
	         
	      personnel = userService.logUser("juju", "JI14one!", UserService.PERSONNEL_LOGIN_MODE);
	      personnelAccount = ((Personnel) personnel.getRole()).getPersonnelAccount();
	  
	      BookDTO book1 = new BookDTO();
	      book1.setTitle(bookToBorrowKeyword);
	      book1.setAuthor("McGraw");
	      book1.setPub_year(2007);
	      book1.setState(BookDTO.AVAILABLE_STATE);
	      bookDAO.insert(book1);
	  
	      BookDTO book2 = new BookDTO();
	      book2.setTitle(bookOrderedKeyword);
	      book2.setAuthor("Leo");
	      book2.setPub_year(2003);
	      book2.setState(BookDTO.ORDERED_STATE);
	      bookDAO.insert(book2);
	      ContextManager.doCalculateContext = false;
	      
	     }
	     catch (SQLException e) {} 
	     catch (BSException e) {}
	    }
	 

	public void test1() throws Exception {
		System.out.println("Test case 1");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedBorrow(bookToBorrowKeyword);;
		assert studentrole.PersonalAccount(PA) : "1_1";
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedGiveBack(bookToBorrowKeyword);;
		assert studentrole.PersonalAccount(PA) : "1_1_1";
	}

	public void test2() throws Exception {
		System.out.println("Test case 2");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedBorrow(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.holidays;
		studentrole.doProhibitedGiveBack(bookToBorrowKeyword, true);;
		assert studentrole.PersonalAccount(PA) : "1_1_2";
	}

	public void test3() throws Exception {
		System.out.println("Test case 3");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedBorrow(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.maintenanceDay;
		studentrole.doProhibitedGiveBack(bookToBorrowKeyword, false);;
		assert studentrole.PersonalAccount(PA) : "1_1_3";
	}

	public void test4() throws Exception {
		System.out.println("Test case 4");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedBorrow(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.holidays;
		studentrole.doUndefinedManageAccessPersonnelAccount();;
		assert studentrole.PersonalAccount(PA) : "1_1_4";
	}

	public void test5() throws Exception {
		System.out.println("Test case 5");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedBorrow(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.maintenanceDay;
		studentrole.doUndefinedManageAccessPersonnelAccount();;
		assert studentrole.PersonalAccount(PA) : "1_1_5";
	}

	public void test6() throws Exception {
		System.out.println("Test case 6");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedBorrow(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doUndefinedManageAccessPersonnelAccount();;
		assert studentrole.PersonalAccount(PA) : "1_1_6";
	}

	public void test7() throws Exception {
		System.out.println("Test case 7");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedBorrow(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.holidays;
		studentrole.doUndefinedCreateBorrowerAccount();;
		assert studentrole.PersonalAccount(PA) : "1_1_7";
	}

	public void test8() throws Exception {
		System.out.println("Test case 8");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedBorrow(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.maintenanceDay;
		studentrole.doUndefinedCreateBorrowerAccount();;
		assert studentrole.PersonalAccount(PA) : "1_1_8";
	}

	public void test9() throws Exception {
		System.out.println("Test case 9");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedBorrow(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doUndefinedCreateBorrowerAccount();;
		assert studentrole.PersonalAccount(PA) : "1_1_9";
	}

	public void test10() throws Exception {
		System.out.println("Test case 10");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedBorrow(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.holidays;
		studentrole.doUndefinedModifyBorrowerAccount();;
		assert studentrole.PersonalAccount(PA) : "1_1_10";
	}

	public void test11() throws Exception {
		System.out.println("Test case 11");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedBorrow(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.maintenanceDay;
		studentrole.doUndefinedModifyBorrowerAccount();;
		assert studentrole.PersonalAccount(PA) : "1_1_11";
	}

	public void test12() throws Exception {
		System.out.println("Test case 12");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedBorrow(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doUndefinedModifyBorrowerAccount();;
		assert studentrole.PersonalAccount(PA) : "1_1_12";
	}

	public void test13() throws Exception {
		System.out.println("Test case 13");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedBorrow(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.holidays;
		studentrole.doUndefinedConsultBorrowerAccount();;
		assert studentrole.PersonalAccount(PA) : "1_1_13";
	}

	public void test14() throws Exception {
		System.out.println("Test case 14");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedBorrow(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.maintenanceDay;
		studentrole.doUndefinedConsultBorrowerAccount();;
		assert studentrole.PersonalAccount(PA) : "1_1_14";
	}

	public void test15() throws Exception {
		System.out.println("Test case 15");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedBorrow(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doUndefinedConsultBorrowerAccount();;
		assert studentrole.PersonalAccount(PA) : "1_1_15";
	}

	public void test16() throws Exception {
		System.out.println("Test case 16");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.holidays;
		studentrole.doProhibitedBorrow(bookToBorrowKeyword, true);;
		assert studentrole.PersonalAccount(PA) : "1_2";
	}

	public void test17() throws Exception {
		System.out.println("Test case 17");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.holidays;
		studentrole.doUndefinedManageAccessPersonnelAccount();;
		assert studentrole.PersonalAccount(PA) : "1_3";
	}

	public void test18() throws Exception {
		System.out.println("Test case 18");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.maintenanceDay;
		studentrole.doUndefinedManageAccessPersonnelAccount();;
		assert studentrole.PersonalAccount(PA) : "1_4";
	}

	public void test19() throws Exception {
		System.out.println("Test case 19");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doUndefinedManageAccessPersonnelAccount();;
		assert studentrole.PersonalAccount(PA) : "1_5";
	}

	public void test20() throws Exception {
		System.out.println("Test case 20");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.holidays;
		studentrole.doUndefinedCreateBorrowerAccount();;
		assert studentrole.PersonalAccount(PA) : "1_6";
	}

	public void test21() throws Exception {
		System.out.println("Test case 21");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.maintenanceDay;
		studentrole.doUndefinedCreateBorrowerAccount();;
		assert studentrole.PersonalAccount(PA) : "1_7";
	}

	public void test22() throws Exception {
		System.out.println("Test case 22");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doUndefinedCreateBorrowerAccount();;
		assert studentrole.PersonalAccount(PA) : "1_8";
	}

	public void test23() throws Exception {
		System.out.println("Test case 23");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.holidays;
		studentrole.doUndefinedModifyBorrowerAccount();;
		assert studentrole.PersonalAccount(PA) : "1_9";
	}

	public void test24() throws Exception {
		System.out.println("Test case 24");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.maintenanceDay;
		studentrole.doUndefinedModifyBorrowerAccount();;
		assert studentrole.PersonalAccount(PA) : "1_10";
	}

	public void test25() throws Exception {
		System.out.println("Test case 25");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doUndefinedModifyBorrowerAccount();;
		assert studentrole.PersonalAccount(PA) : "1_11";
	}

	public void test26() throws Exception {
		System.out.println("Test case 26");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.holidays;
		studentrole.doUndefinedConsultBorrowerAccount();;
		assert studentrole.PersonalAccount(PA) : "1_12";
	}

	public void test27() throws Exception {
		System.out.println("Test case 27");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.maintenanceDay;
		studentrole.doUndefinedConsultBorrowerAccount();;
		assert studentrole.PersonalAccount(PA) : "1_13";
	}

	public void test28() throws Exception {
		System.out.println("Test case 28");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doUndefinedConsultBorrowerAccount();;
		assert studentrole.PersonalAccount(PA) : "1_14";
	}

	public void test29() throws Exception {
		System.out.println("Test case 29");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.holidays;
		studentrole.doProhibitedReserve(bookToBorrowKeyword, true);;
		assert studentrole.PersonalAccount(PA) : "1_15";
	}

	public void test30() throws Exception {
		System.out.println("Test case 30");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.maintenanceDay;
		studentrole.doProhibitedReserve(bookToBorrowKeyword, false);;
		assert studentrole.PersonalAccount(PA) : "1_16";
	}

	public void test31() throws Exception {
		System.out.println("Test case 31");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedReserve(bookToBorrowKeyword);;
		assert studentrole.reserved(B1) : "1_17";
		assert studentrole.PersonalAccount(PA) : "1_17";
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedBorrow(bookToBorrowKeyword);;
		assert studentrole.PersonalAccount(PA) : "1_17_1";
	}

	public void test32() throws Exception {
		System.out.println("Test case 32");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedReserve(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.holidays;
		studentrole.doProhibitedBorrow(bookToBorrowKeyword, true);;
		assert studentrole.reserved(B1) : "1_17_2";
		assert studentrole.PersonalAccount(PA) : "1_17_2";
	}

	public void test33() throws Exception {
		System.out.println("Test case 33");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedReserve(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.holidays;
		studentrole.doUndefinedManageAccessPersonnelAccount();;
		assert studentrole.reserved(B1) : "1_17_3";
		assert studentrole.PersonalAccount(PA) : "1_17_3";
	}

	public void test34() throws Exception {
		System.out.println("Test case 34");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedReserve(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.maintenanceDay;
		studentrole.doUndefinedManageAccessPersonnelAccount();;
		assert studentrole.reserved(B1) : "1_17_4";
		assert studentrole.PersonalAccount(PA) : "1_17_4";
	}

	public void test35() throws Exception {
		System.out.println("Test case 35");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedReserve(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doUndefinedManageAccessPersonnelAccount();;
		assert studentrole.reserved(B1) : "1_17_5";
		assert studentrole.PersonalAccount(PA) : "1_17_5";
	}

	public void test36() throws Exception {
		System.out.println("Test case 36");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedReserve(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.holidays;
		studentrole.doUndefinedCreateBorrowerAccount();;
		assert studentrole.reserved(B1) : "1_17_6";
		assert studentrole.PersonalAccount(PA) : "1_17_6";
	}

	public void test37() throws Exception {
		System.out.println("Test case 37");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedReserve(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.maintenanceDay;
		studentrole.doUndefinedCreateBorrowerAccount();;
		assert studentrole.reserved(B1) : "1_17_7";
		assert studentrole.PersonalAccount(PA) : "1_17_7";
	}

	public void test38() throws Exception {
		System.out.println("Test case 38");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedReserve(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doUndefinedCreateBorrowerAccount();;
		assert studentrole.reserved(B1) : "1_17_8";
		assert studentrole.PersonalAccount(PA) : "1_17_8";
	}

	public void test39() throws Exception {
		System.out.println("Test case 39");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedReserve(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.holidays;
		studentrole.doUndefinedModifyBorrowerAccount();;
		assert studentrole.reserved(B1) : "1_17_9";
		assert studentrole.PersonalAccount(PA) : "1_17_9";
	}

	public void test40() throws Exception {
		System.out.println("Test case 40");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedReserve(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.maintenanceDay;
		studentrole.doUndefinedModifyBorrowerAccount();;
		assert studentrole.reserved(B1) : "1_17_10";
		assert studentrole.PersonalAccount(PA) : "1_17_10";
	}

	public void test41() throws Exception {
		System.out.println("Test case 41");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedReserve(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doUndefinedModifyBorrowerAccount();;
		assert studentrole.reserved(B1) : "1_17_11";
		assert studentrole.PersonalAccount(PA) : "1_17_11";
	}

	public void test42() throws Exception {
		System.out.println("Test case 42");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedReserve(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.holidays;
		studentrole.doUndefinedConsultBorrowerAccount();;
		assert studentrole.reserved(B1) : "1_17_12";
		assert studentrole.PersonalAccount(PA) : "1_17_12";
	}

	public void test43() throws Exception {
		System.out.println("Test case 43");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedReserve(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.maintenanceDay;
		studentrole.doUndefinedConsultBorrowerAccount();;
		assert studentrole.reserved(B1) : "1_17_13";
		assert studentrole.PersonalAccount(PA) : "1_17_13";
	}

	public void test44() throws Exception {
		System.out.println("Test case 44");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doPermitedReserve(bookToBorrowKeyword);;
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doUndefinedConsultBorrowerAccount();;
		assert studentrole.reserved(B1) : "1_17_14";
		assert studentrole.PersonalAccount(PA) : "1_17_14";
	}

	public void test45() throws Exception {
		System.out.println("Test case 45");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.holidays;
		studentrole.doUndefinedDeliverBook();;
		assert studentrole.PersonalAccount(PA) : "1_18";
	}

	public void test46() throws Exception {
		System.out.println("Test case 46");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.maintenanceDay;
		studentrole.doUndefinedDeliverBook();;
		assert studentrole.PersonalAccount(PA) : "1_19";
	}

	public void test47() throws Exception {
		System.out.println("Test case 47");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doUndefinedDeliverBook();;
		assert studentrole.PersonalAccount(PA) : "1_20";
	}

	public void test48() throws Exception {
		System.out.println("Test case 48");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.holidays;
		studentrole.doUndefinedFixBook(bookToBorrowKeyword);;
		assert studentrole.PersonalAccount(PA) : "1_21";
	}

	public void test49() throws Exception {
		System.out.println("Test case 49");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.maintenanceDay;
		studentrole.doUndefinedFixBook(bookToBorrowKeyword);;
		assert studentrole.PersonalAccount(PA) : "1_22";
	}

	public void test50() throws Exception {
		System.out.println("Test case 50");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.workingday;
		studentrole.doUndefinedFixBook(bookToBorrowKeyword);;
		assert studentrole.PersonalAccount(PA) : "1_23";
	}

	public void test51() throws Exception {
		System.out.println("Test case 51");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.maintenanceDay;
		studentrole.doProhibitedBorrow(bookToBorrowKeyword, false);;
		assert studentrole.PersonalAccount(PA) : "1_24";
	}

	public void test52() throws Exception {
		System.out.println("Test case 52");
		setUp();
		studentrole.ContextManager.currentContext = ContextManager.maintenanceDay;
		studentrole.doProhibitedBorrow(bookToBorrowKeyword, false);;
		assert studentrole.PersonalAccount(PA) : "1_25";
	}

	public void testAll() throws Exception {
		test1();
		test2();
		test3();
		test4();
		test5();
		test6();
		test7();
		test8();
		test9();
		test10();
		test11();
		test12();
		test13();
		test14();
		test15();
		test16();
		test17();
		test18();
		test19();
		test20();
		test21();
		test22();
		test23();
		test24();
		test25();
		test26();
		test27();
		test28();
		test29();
		test30();
		test31();
		test32();
		test33();
		test34();
		test35();
		test36();
		test37();
		test38();
		test39();
		test40();
		test41();
		test42();
		test43();
		test44();
		test45();
		test46();
		test47();
		test48();
		test49();
		test50();
		test51();
		test52();
	}


	      private BookService bookService;
	      private BookDAO bookDAO;
	      public User student, borrower, personnel, secretary;
	      private User personnel4Test, borrower4Test;
	      public Book book1, book2, book3;
	  
	      private final String bookToBorrowKeyword = "Software security";
	      private final String bookOrderedKeyword = "Malware and Virus";
	       
	       private BorrowerAccount borrowerAccount, borrower4Account;
	       private BorrowerAccountService borrowerAccountService;
	       private PersonnelAccount personnelAccount, personnel4Account;
	       private PersonnelAccountService personnelAccountService;
	
	      private Book findBookByTitle(String title) throws BSException {
	          Collection<Book> result = bookService.findBookByKeyword(title);
	      return result.iterator().next();
	      }
	   
	   public void doPermitedBorrow(String title){
	    try {
	     Book book = findBookByTitle(title);
	     bookService.borrowBook(student, book);
	     assertTrue(student.getBorrowed().contains(book));
	     assertTrue(!student.getReservations().contains(book));
	     Collection<DTO> bookDtos = bookDAO.loadUserReservedBooks((UserDTO) student.getDTO());
	     assertTrue(bookDtos.size()==0);
	     bookDtos = bookDAO.loadUserBorrowedBooks((UserDTO) student.getDTO());
	     assertTrue(bookDtos.size()==1);
	     assertTrue(book.equals(new Book(bookDtos.iterator().next())));
	     bookDtos = bookDAO.seachBooksByKeyword(title);
	     Book bookReturned = new Book(bookDtos.iterator().next());
	     assertTrue(bookReturned.getCurrentStateString().equals(Book.BORROWED));
	    }
	    catch (UndefinedSecuritPolicyException e) {
	     fail("Permitted borrow not defined.");
	    }
	    catch (SecuritPolicyViolationException e) {
	     fail("Permitted borrow not allowed.");
	    }
	   catch (Exception e){   }
	   }
	
	
	   private Book findBorrowedBookByTitle(String title){
	    for (Book book: student.getBorrowed())
	     if (book.getTitle().equals(title))
	      return book;
	    return null;
	   }
	   
	  public void doPermitedGiveBack(String title) {
	   try{
	     Book book = findBorrowedBookByTitle(title);
	              bookService.giveBackBook(student, book);
	           assertTrue(!student.getBorrowed().contains(book));
	           assertTrue(!student.getReservations().contains(book));
	           Collection<DTO> bookDtos = bookDAO.seachBooksByKeyword(title);
	           Book bookReturned = new Book(bookDtos.iterator().next());
	           assertTrue(bookReturned.getCurrentStateString().equals(Book.AVAILABLE));
	         } 
	   catch (UndefinedSecuritPolicyException e) {
	     fail("Permitted giveBack not defined.");
	   }
	   catch (SecuritPolicyViolationException e) {
	         fail("Permitted give back not allowed");
	   } 
	   catch (Exception e) {
	   }
	  }
	
	
	   public void doPermitedReserve(String title){    
	      try {
	    Book book = findBookByTitle(title);
	    bookService.reserveBook(student, book);
	    assertTrue(student.getReservations().contains(book));
	
	    Collection<DTO> bookDtos = bookDAO.loadUserReservedBooks((UserDTO) student.getDTO());
	             assertTrue(bookDtos.size() == 1);
	    assertTrue(book.equals(new Book(bookDtos.iterator().next())));
	
	    //test if the state is reserved by calling DAO
	    bookDtos = bookDAO.seachBooksByKeyword(title);
	    Book bookReturned = new Book(bookDtos.iterator().next());
	             assertTrue(bookReturned.getCurrentStateString().equals(Book.RESERVED));
	           } 
	            catch (UndefinedSecuritPolicyException e) {
	                 fail("Permitted reserve not defined.");
	            } 
	           catch (SecuritPolicyViolationException e) {
	              fail("Permited reserve not allowed");
	           }
	            catch (Exception e) {
	           }
	     }
	
	
	    public void doProhibitedReserve(String title, boolean isProhibition) {
	          try {
	               LibrarySecurityModel.DEFAULT_CONTEXT = ContextManager.currentContext;
	               Book book = findBookByTitle(title);
	               bookService.reserveBook(student, book);
	               fail("Prohited reserve is alllowed");
	           }
	           catch (UndefinedSecuritPolicyException e) {
	                if (isProhibition)
	                       fail("Porhibited reserve implemented as undefined");
	           }
	           catch (SecuritPolicyViolationException e) {
	                if (!isProhibition)
	                       fail("Undefined reserve implemented as prohibition");
	                try {
	                Collection<DTO> bookDtos = bookDAO.seachBooksByKeyword(title);
	                Book bookReturned = new Book(bookDtos.iterator().next());
	                assertFalse(bookReturned.getCurrentStateString().equals(Book.RESERVED));
	                 }catch (SQLException sqle) {
	                 }
	           }
	            catch (Exception e) {
	           }
	   }
	
	
	 public void doProhibitedBorrow(String title, boolean isProhibition) {
	          try {
	               LibrarySecurityModel.DEFAULT_CONTEXT = ContextManager.currentContext;
	               Book book = findBookByTitle(title);
	               bookService.borrowBook(student, book);
	               fail("Prohibited borrow allowed.");
	         } 
	         catch (UndefinedSecuritPolicyException e) {
	                if (isProhibition)
	                       fail("Porhibited reserve implemented as undefined");
	         }
	         catch (SecuritPolicyViolationException e) {
	                 if (!isProhibition)
	                       fail("Undefined reserve implemented as prohibition");
	                 try {
	                     Collection<DTO> bookDtos = bookDAO.seachBooksByKeyword(title);
	                     Book bookReturned = new Book(bookDtos.iterator().next());
	                     assertTrue(!bookReturned.getCurrentStateString().equals(Book.BORROWED));
	                     }catch (SQLException sqle) {
	                     }
	          } 
	          catch (Exception e) {
	          }
	    }
	
	
	    public void doProhibitedGiveBack(String title, boolean isProhibition) {
	           try {
	                LibrarySecurityModel.DEFAULT_CONTEXT = ContextManager.currentContext;
	                Book book = findBookByTitle(title);
	                bookService.giveBackBook(student, book);
	                fail("Prohibited give back allowed");
	           } 
	           catch (UndefinedSecuritPolicyException e1) {
	                if (isProhibition)
	                       fail("Porhibited reserve implemented as undefined");
	           }
	           catch (SecuritPolicyViolationException svp2) {
	                    if (!isProhibition)
	                       fail("Undefined reserve implemented as prohibition");
	                    try {
	                        Collection<DTO> bookDtos = bookDAO.seachBooksByKeyword(title);
	                        Book bookReturned = new Book(bookDtos.iterator().next());
	                        assertTrue(!bookReturned.getCurrentStateString().equals(Book.AVAILABLE));
	                        } catch (SQLException sqle) {
	                        }
	           } 
	          catch (Exception e) {
	          }
	    }
	
	public void doUndefinedFixBook(String title) {
	         try {    
	          LibrarySecurityModel.DEFAULT_CONTEXT = ContextManager.currentContext;
	          Book book = findBookByTitle(title);
	          bookService.bookDamaged(student, book);
	          bookService.fixBook(student, book);
	          fail("Undefined Fix Book is permitted");
	          } 
	         catch (UndefinedSecuritPolicyException e1) {
	          }
	         catch (SecuritPolicyViolationException svp2) {
	             fail("Undefined Fix Book is prohibited");
	          } 
	          catch (Exception e) {
	          }
	}        
	
	public void doUndefinedDeliverBook( ) {           
	             try {
	             LibrarySecurityModel.DEFAULT_CONTEXT = ContextManager.currentContext;
	             Book book = findBookByTitle(bookOrderedKeyword);
	             bookService.deliverBook(student, book);
	             fail("Undefined Deliverbook is permitted");
	            } catch (UndefinedSecuritPolicyException e1) {
	               // pass
	             } catch (SecuritPolicyViolationException e) {
	                fail("Undefined Deliverbook is prohibited");
	            }
	          catch (Exception e) {
	          }
	       }
	
	public void doUndefinedModifyBorrowerAccount () {
	      try { 
	        LibrarySecurityModel.DEFAULT_CONTEXT = ContextManager.currentContext;
	        borrowerAccount.setBorrowerAccountID(1441);
	        borrowerAccountService.updateBorrowerAccount(borrower, borrowerAccount, student); 
	              fail("Undefined Modify BorrowerAccount is permitted");
	       } catch (UndefinedSecuritPolicyException e) {
	       } catch (SecuritPolicyViolationException e) {
	              fail("Undefined Modify BorrowerAccount is permitted");
	       }
	          catch (Exception e) {
	          }
	}
	
	public void doUndefinedCreateBorrowerAccount() {
	         try {
	          LibrarySecurityModel.DEFAULT_CONTEXT = ContextManager.currentContext;
	          borrowerAccountService.createBorrowerAccount(borrower4Test, borrower4Account, student);
	          fail("Undefined Create Borrower Account is permitted");
	          } catch (UndefinedSecuritPolicyException e) {   
	          } catch (SecuritPolicyViolationException e) {
	          fail("Undefined Create Borrower Account is prohibited");
	          } 
	          catch (Exception e) {
	          }
	       }
	
	public void doUndefinedManageAccessPersonnelAccount() {
	     LibrarySecurityModel.DEFAULT_CONTEXT = ContextManager.currentContext;
	         try {
	             personnelAccountService.updatePersonnelAccount(personnel, personnelAccount, student);
	                fail("Undefined Access Personnel account is permitted");
	          } catch (UndefinedSecuritPolicyException e) {
	          } catch (SecuritPolicyViolationException e) {
	                fail("Undefined Access Personnel account is prohibited");
	          }
	          catch (Exception e) {
	          }
	          try {
	               personnelAccountService.deletePersonnelAccount(personnel, personnelAccount, student);
	                  fail("Undefined Delete Personnel account is allowed");
	          } catch (UndefinedSecuritPolicyException e) {
	          } catch (SecuritPolicyViolationException e){ 
	                  fail("Undefined Delete Personnel account is prohibited");
	          }
	          catch (Exception e) {
	          }
	          try {
	               personnelAccountService.createPersonnelAccount(personnel4Test, personnel4Account, student);
	                  fail("Undefined Create Personnel account is allowed");
	           } catch (UndefinedSecuritPolicyException e) {
	           } catch (SecuritPolicyViolationException e) {                 
	                  fail("Undefined Create Personnel account is prohibited");
	          }
	          catch (Exception e) {
	          }
	       }
	
	public void doUndefinedConsultBorrowerAccount() {
	      try {
	       LibrarySecurityModel.DEFAULT_CONTEXT = ContextManager.currentContext;
	          borrowerAccountService.consultBorrowerAccount(borrower, student);
	          fail("Undefined Consult Borrower account is permitted ");
	          } catch (UndefinedSecuritPolicyException e) {
	          } catch (SecuritPolicyViolationException e) {
	          fail("Undefined Consult Borrower account is prohibited ");
	          } 
	          catch (Exception e) {
	          }
	}
	
	
	public static void main(String[] args) throws Exception {
		 new StudentRoleTester_RT().testAll();
	}

}
