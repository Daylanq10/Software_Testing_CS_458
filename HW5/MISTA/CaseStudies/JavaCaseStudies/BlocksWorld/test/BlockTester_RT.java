//Test code generated by MISTA

package test;

import blocks.*;
import org.junit.*;
import static org.junit.Assert.*;


public class BlockTester_RT {

	private Block block;
	
	public void setUp()  throws Exception {
		block = new Block();
		block.getClears().add("B1");
		block.getClears().add("B6");
		block.getOns().add(new ON("B1", "B3"));
		block.getOntables().add("B3");
		block.getOntables().add("B6");
		block.setHandempty(true);
	}
	
	public void test1() throws Exception {
		System.out.println("Test case 1");
		block.pickup("B6");
		assertTrue("1_1", block.isClear("B1"));
		assertTrue("1_1", block.isHolding("B6"));
		assertTrue("1_1", block.isOn("B1", "B3"));
		assertTrue("1_1", block.isOntable("B3"));
		block.putdown("B6");
		assertTrue("1_1_1", block.isClear("B1"));
		assertTrue("1_1_1", block.isClear("B6"));
		assertTrue("1_1_1", block.isHandempty());
		assertTrue("1_1_1", block.isOn("B1", "B3"));
		assertTrue("1_1_1", block.isOntable("B3"));
		assertTrue("1_1_1", block.isOntable("B6"));
	}

	public void test2() throws Exception {
		System.out.println("Test case 2");
		block.pickup("B6");
		block.stack("B6", "B1");
		assertTrue("1_1_2", block.isClear("B6"));
		assertTrue("1_1_2", block.isHandempty());
		assertTrue("1_1_2", block.isOn("B1", "B3"));
		assertTrue("1_1_2", block.isOn("B6", "B1"));
		assertTrue("1_1_2", block.isOntable("B3"));
		block.unstack("B6", "B1");
		assertTrue("1_1_2_1", block.isClear("B1"));
		assertTrue("1_1_2_1", block.isHolding("B6"));
		assertTrue("1_1_2_1", block.isOn("B1", "B3"));
		assertTrue("1_1_2_1", block.isOntable("B3"));
	}

	public void test3() throws Exception {
		System.out.println("Test case 3");
		block.unstack("B1", "B3");
		assertTrue("1_2", block.isClear("B3"));
		assertTrue("1_2", block.isClear("B6"));
		assertTrue("1_2", block.isHolding("B1"));
		assertTrue("1_2", block.isOntable("B3"));
		assertTrue("1_2", block.isOntable("B6"));
		block.putdown("B1");
		assertTrue("1_2_1", block.isClear("B1"));
		assertTrue("1_2_1", block.isClear("B3"));
		assertTrue("1_2_1", block.isClear("B6"));
		assertTrue("1_2_1", block.isHandempty());
		assertTrue("1_2_1", block.isOntable("B1"));
		assertTrue("1_2_1", block.isOntable("B3"));
		assertTrue("1_2_1", block.isOntable("B6"));
		block.pickup("B1");
		assertTrue("1_2_1_1", block.isClear("B3"));
		assertTrue("1_2_1_1", block.isClear("B6"));
		assertTrue("1_2_1_1", block.isHolding("B1"));
		assertTrue("1_2_1_1", block.isOntable("B3"));
		assertTrue("1_2_1_1", block.isOntable("B6"));
	}

	public void test4() throws Exception {
		System.out.println("Test case 4");
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B3");
		assertTrue("1_2_1_2", block.isClear("B1"));
		assertTrue("1_2_1_2", block.isClear("B6"));
		assertTrue("1_2_1_2", block.isHolding("B3"));
		assertTrue("1_2_1_2", block.isOntable("B1"));
		assertTrue("1_2_1_2", block.isOntable("B6"));
		block.putdown("B3");
		assertTrue("1_2_1_2_1", block.isClear("B1"));
		assertTrue("1_2_1_2_1", block.isClear("B3"));
		assertTrue("1_2_1_2_1", block.isClear("B6"));
		assertTrue("1_2_1_2_1", block.isHandempty());
		assertTrue("1_2_1_2_1", block.isOntable("B1"));
		assertTrue("1_2_1_2_1", block.isOntable("B3"));
		assertTrue("1_2_1_2_1", block.isOntable("B6"));
	}

	public void test5() throws Exception {
		System.out.println("Test case 5");
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B3");
		block.stack("B3", "B1");
		assertTrue("1_2_1_2_2", block.isClear("B3"));
		assertTrue("1_2_1_2_2", block.isClear("B6"));
		assertTrue("1_2_1_2_2", block.isHandempty());
		assertTrue("1_2_1_2_2", block.isOn("B3", "B1"));
		assertTrue("1_2_1_2_2", block.isOntable("B1"));
		assertTrue("1_2_1_2_2", block.isOntable("B6"));
		block.pickup("B6");
		assertTrue("1_2_1_2_2_1", block.isClear("B3"));
		assertTrue("1_2_1_2_2_1", block.isHolding("B6"));
		assertTrue("1_2_1_2_2_1", block.isOn("B3", "B1"));
		assertTrue("1_2_1_2_2_1", block.isOntable("B1"));
		block.putdown("B6");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHandempty());
		assertTrue("", block.isOn("B3", "B1"));
		assertTrue("", block.isOntable("B1"));
		assertTrue("", block.isOntable("B6"));
	}

	public void test6() throws Exception {
		System.out.println("Test case 6");
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B3");
		block.stack("B3", "B1");
		block.pickup("B6");
		block.stack("B6", "B3");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHandempty());
		assertTrue("", block.isOn("B3", "B1"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B1"));
		block.unstack("B6", "B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B1"));
		assertTrue("", block.isOntable("B1"));
	}

	public void test7() throws Exception {
		System.out.println("Test case 7");
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B3");
		block.stack("B3", "B1");
		block.unstack("B3", "B1");
		assertTrue("1_2_1_2_2_2", block.isClear("B1"));
		assertTrue("1_2_1_2_2_2", block.isClear("B6"));
		assertTrue("1_2_1_2_2_2", block.isHolding("B3"));
		assertTrue("1_2_1_2_2_2", block.isOntable("B1"));
		assertTrue("1_2_1_2_2_2", block.isOntable("B6"));
	}

	public void test8() throws Exception {
		System.out.println("Test case 8");
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B3");
		block.stack("B3", "B6");
		assertTrue("1_2_1_2_3", block.isClear("B1"));
		assertTrue("1_2_1_2_3", block.isClear("B3"));
		assertTrue("1_2_1_2_3", block.isHandempty());
		assertTrue("1_2_1_2_3", block.isOn("B3", "B6"));
		assertTrue("1_2_1_2_3", block.isOntable("B1"));
		assertTrue("1_2_1_2_3", block.isOntable("B6"));
		block.pickup("B1");
		assertTrue("1_2_1_2_3_1", block.isClear("B3"));
		assertTrue("1_2_1_2_3_1", block.isHolding("B1"));
		assertTrue("1_2_1_2_3_1", block.isOn("B3", "B6"));
		assertTrue("1_2_1_2_3_1", block.isOntable("B6"));
		block.putdown("B1");
		assertTrue("", block.isClear("B1"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHandempty());
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B1"));
		assertTrue("", block.isOntable("B6"));
	}

	public void test9() throws Exception {
		System.out.println("Test case 9");
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B1");
		block.stack("B1", "B3");
		assertTrue("", block.isClear("B1"));
		assertTrue("", block.isHandempty());
		assertTrue("", block.isOn("B1", "B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B6"));
		block.unstack("B1", "B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B1"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B6"));
	}

	public void test10() throws Exception {
		System.out.println("Test case 10");
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.unstack("B3", "B6");
		assertTrue("1_2_1_2_3_2", block.isClear("B1"));
		assertTrue("1_2_1_2_3_2", block.isClear("B6"));
		assertTrue("1_2_1_2_3_2", block.isHolding("B3"));
		assertTrue("1_2_1_2_3_2", block.isOntable("B1"));
		assertTrue("1_2_1_2_3_2", block.isOntable("B6"));
	}

	public void test11() throws Exception {
		System.out.println("Test case 11");
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B6");
		assertTrue("1_2_1_3", block.isClear("B1"));
		assertTrue("1_2_1_3", block.isClear("B3"));
		assertTrue("1_2_1_3", block.isHolding("B6"));
		assertTrue("1_2_1_3", block.isOntable("B1"));
		assertTrue("1_2_1_3", block.isOntable("B3"));
		block.putdown("B6");
		assertTrue("1_2_1_3_1", block.isClear("B1"));
		assertTrue("1_2_1_3_1", block.isClear("B3"));
		assertTrue("1_2_1_3_1", block.isClear("B6"));
		assertTrue("1_2_1_3_1", block.isHandempty());
		assertTrue("1_2_1_3_1", block.isOntable("B1"));
		assertTrue("1_2_1_3_1", block.isOntable("B3"));
		assertTrue("1_2_1_3_1", block.isOntable("B6"));
	}

	public void test12() throws Exception {
		System.out.println("Test case 12");
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B6");
		block.stack("B6", "B1");
		assertTrue("1_2_1_3_2", block.isClear("B3"));
		assertTrue("1_2_1_3_2", block.isClear("B6"));
		assertTrue("1_2_1_3_2", block.isHandempty());
		assertTrue("1_2_1_3_2", block.isOn("B6", "B1"));
		assertTrue("1_2_1_3_2", block.isOntable("B1"));
		assertTrue("1_2_1_3_2", block.isOntable("B3"));
		block.pickup("B3");
		assertTrue("1_2_1_3_2_1", block.isClear("B6"));
		assertTrue("1_2_1_3_2_1", block.isHolding("B3"));
		assertTrue("1_2_1_3_2_1", block.isOn("B6", "B1"));
		assertTrue("1_2_1_3_2_1", block.isOntable("B1"));
		block.putdown("B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHandempty());
		assertTrue("", block.isOn("B6", "B1"));
		assertTrue("", block.isOntable("B1"));
		assertTrue("", block.isOntable("B3"));
	}

	public void test13() throws Exception {
		System.out.println("Test case 13");
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B6");
		block.stack("B6", "B1");
		block.pickup("B3");
		block.stack("B3", "B6");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHandempty());
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B1"));
		assertTrue("", block.isOntable("B1"));
		block.unstack("B3", "B6");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B6", "B1"));
		assertTrue("", block.isOntable("B1"));
	}

	public void test14() throws Exception {
		System.out.println("Test case 14");
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B6");
		block.stack("B6", "B1");
		block.unstack("B6", "B1");
		assertTrue("1_2_1_3_2_2", block.isClear("B1"));
		assertTrue("1_2_1_3_2_2", block.isClear("B3"));
		assertTrue("1_2_1_3_2_2", block.isHolding("B6"));
		assertTrue("1_2_1_3_2_2", block.isOntable("B1"));
		assertTrue("1_2_1_3_2_2", block.isOntable("B3"));
	}

	public void test15() throws Exception {
		System.out.println("Test case 15");
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B6");
		block.stack("B6", "B3");
		assertTrue("1_2_1_3_3", block.isClear("B1"));
		assertTrue("1_2_1_3_3", block.isClear("B6"));
		assertTrue("1_2_1_3_3", block.isHandempty());
		assertTrue("1_2_1_3_3", block.isOn("B6", "B3"));
		assertTrue("1_2_1_3_3", block.isOntable("B1"));
		assertTrue("1_2_1_3_3", block.isOntable("B3"));
		block.pickup("B1");
		assertTrue("1_2_1_3_3_1", block.isClear("B6"));
		assertTrue("1_2_1_3_3_1", block.isHolding("B1"));
		assertTrue("1_2_1_3_3_1", block.isOn("B6", "B3"));
		assertTrue("1_2_1_3_3_1", block.isOntable("B3"));
		block.putdown("B1");
		assertTrue("", block.isClear("B1"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHandempty());
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B1"));
		assertTrue("", block.isOntable("B3"));
	}

	public void test16() throws Exception {
		System.out.println("Test case 16");
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B1");
		block.stack("B1", "B6");
		assertTrue("", block.isClear("B1"));
		assertTrue("", block.isHandempty());
		assertTrue("", block.isOn("B1", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		block.unstack("B1", "B6");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B1"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
	}

	public void test17() throws Exception {
		System.out.println("Test case 17");
		block.unstack("B1", "B3");
		block.putdown("B1");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.unstack("B6", "B3");
		assertTrue("1_2_1_3_3_2", block.isClear("B1"));
		assertTrue("1_2_1_3_3_2", block.isClear("B3"));
		assertTrue("1_2_1_3_3_2", block.isHolding("B6"));
		assertTrue("1_2_1_3_3_2", block.isOntable("B1"));
		assertTrue("1_2_1_3_3_2", block.isOntable("B3"));
	}

	public void test18() throws Exception {
		System.out.println("Test case 18");
		block.unstack("B1", "B3");
		block.stack("B1", "B3");
		assertTrue("1_2_2", block.isClear("B1"));
		assertTrue("1_2_2", block.isClear("B6"));
		assertTrue("1_2_2", block.isHandempty());
		assertTrue("1_2_2", block.isOn("B1", "B3"));
		assertTrue("1_2_2", block.isOntable("B3"));
		assertTrue("1_2_2", block.isOntable("B6"));
	}

	public void test19() throws Exception {
		System.out.println("Test case 19");
		block.unstack("B1", "B3");
		block.stack("B1", "B6");
		assertTrue("1_2_3", block.isClear("B1"));
		assertTrue("1_2_3", block.isClear("B3"));
		assertTrue("1_2_3", block.isHandempty());
		assertTrue("1_2_3", block.isOn("B1", "B6"));
		assertTrue("1_2_3", block.isOntable("B3"));
		assertTrue("1_2_3", block.isOntable("B6"));
		block.pickup("B3");
		assertTrue("1_2_3_1", block.isClear("B1"));
		assertTrue("1_2_3_1", block.isHolding("B3"));
		assertTrue("1_2_3_1", block.isOn("B1", "B6"));
		assertTrue("1_2_3_1", block.isOntable("B6"));
		block.putdown("B3");
		assertTrue("1_2_3_1_1", block.isClear("B1"));
		assertTrue("1_2_3_1_1", block.isClear("B3"));
		assertTrue("1_2_3_1_1", block.isHandempty());
		assertTrue("1_2_3_1_1", block.isOn("B1", "B6"));
		assertTrue("1_2_3_1_1", block.isOntable("B3"));
		assertTrue("1_2_3_1_1", block.isOntable("B6"));
	}

	public void test20() throws Exception {
		System.out.println("Test case 20");
		block.unstack("B1", "B3");
		block.stack("B1", "B6");
		block.pickup("B3");
		block.stack("B3", "B1");
		assertTrue("1_2_3_1_2", block.isClear("B3"));
		assertTrue("1_2_3_1_2", block.isHandempty());
		assertTrue("1_2_3_1_2", block.isOn("B1", "B6"));
		assertTrue("1_2_3_1_2", block.isOn("B3", "B1"));
		assertTrue("1_2_3_1_2", block.isOntable("B6"));
		block.unstack("B3", "B1");
		assertTrue("1_2_3_1_2_1", block.isClear("B1"));
		assertTrue("1_2_3_1_2_1", block.isHolding("B3"));
		assertTrue("1_2_3_1_2_1", block.isOn("B1", "B6"));
		assertTrue("1_2_3_1_2_1", block.isOntable("B6"));
	}

	public void test21() throws Exception {
		System.out.println("Test case 21");
		block.unstack("B1", "B3");
		block.stack("B1", "B6");
		block.unstack("B1", "B6");
		assertTrue("1_2_3_2", block.isClear("B3"));
		assertTrue("1_2_3_2", block.isClear("B6"));
		assertTrue("1_2_3_2", block.isHolding("B1"));
		assertTrue("1_2_3_2", block.isOntable("B3"));
		assertTrue("1_2_3_2", block.isOntable("B6"));
	}

}
