//Test code generated by MISTA

package test;

import cruisecontrol.*;
import org.junit.*;
import static org.junit.Assert.*;

public class ControllerTester_RTD {

	private Controller controller;
	
	@Before
	public void setUp()  throws Exception {
		controller = new Controller();
	}
	
	@Test
	public void test1() throws Exception {
		System.out.println("Test case 1");
		controller.engineOff();
		assertTrue("1_1", controller.getControlState()==Controller.INACTIVE);
	}

	@Test
	public void test2() throws Exception {
		System.out.println("Test case 2");
		controller.resume();
		assertTrue("1_2", controller.getControlState()==Controller.INACTIVE);
	}

	@Test
	public void test3() throws Exception {
		System.out.println("Test case 3");
		controller.accelerator();
		assertTrue("1_3", controller.getControlState()==Controller.INACTIVE);
	}

	@Test
	public void test4() throws Exception {
		System.out.println("Test case 4");
		controller.on();
		assertTrue("1_4", controller.getControlState()==Controller.INACTIVE);
	}

	@Test
	public void test5() throws Exception {
		System.out.println("Test case 5");
		controller.engineOn();
		assertTrue("1_5", controller.getControlState()==Controller.ACTIVE);
		assertTrue("1_5", ! (controller.getControlState()==Controller.INACTIVE));
		controller.engineOff();
		assertTrue("1_5_1", controller.getControlState()==Controller.INACTIVE);
		assertTrue("1_5_1", ! (controller.getControlState()==Controller.ACTIVE));
		assertTrue("", controller.getSpeedControl().getSpeedControlState()==SpeedControl.DISABLED);
	}

	@Test
	public void test6() throws Exception {
		System.out.println("Test case 6");
		controller.engineOn();
		controller.resume();
		assertTrue("1_5_2", controller.getControlState()==Controller.ACTIVE);
	}

	@Test
	public void test7() throws Exception {
		System.out.println("Test case 7");
		controller.engineOn();
		controller.accelerator();
		assertTrue("1_5_3", controller.getControlState()==Controller.ACTIVE);
	}

	@Test
	public void test8() throws Exception {
		System.out.println("Test case 8");
		controller.engineOn();
		controller.on();
		assertTrue("1_5_4", controller.getControlState()==Controller.CRUISING);
		assertTrue("1_5_4", ! (controller.getControlState()==Controller.ACTIVE));
		assertTrue("", controller.getSpeedControl().getSpeedControlState()==SpeedControl.ENABLED);
		controller.engineOff();
		assertTrue("1_5_4_1", controller.getControlState()==Controller.INACTIVE);
		assertTrue("1_5_4_1", ! (controller.getControlState()==Controller.CRUISING));
		assertTrue("", controller.getSpeedControl().getSpeedControlState()==SpeedControl.DISABLED);
	}

	@Test
	public void test9() throws Exception {
		System.out.println("Test case 9");
		controller.engineOn();
		controller.on();
		controller.resume();
		assertTrue("1_5_4_2", controller.getControlState()==Controller.CRUISING);
	}

	@Test
	public void test10() throws Exception {
		System.out.println("Test case 10");
		controller.engineOn();
		controller.on();
		controller.accelerator();
		assertTrue("1_5_4_3", controller.getControlState()==Controller.STANDBY);
		assertTrue("1_5_4_3", ! (controller.getControlState()==Controller.CRUISING));
		assertTrue("", controller.getSpeedControl().getSpeedControlState()==SpeedControl.DISABLED);
		controller.engineOff();
		assertTrue("1_5_4_3_1", controller.getControlState()==Controller.INACTIVE);
		assertTrue("1_5_4_3_1", ! (controller.getControlState()==Controller.STANDBY));
		assertTrue("", controller.getSpeedControl().getSpeedControlState()==SpeedControl.DISABLED);
	}

	@Test
	public void test11() throws Exception {
		System.out.println("Test case 11");
		controller.engineOn();
		controller.on();
		controller.accelerator();
		controller.resume();
		assertTrue("1_5_4_3_2", controller.getControlState()==Controller.CRUISING);
		assertTrue("1_5_4_3_2", ! (controller.getControlState()==Controller.STANDBY));
		assertTrue("", controller.getSpeedControl().getSpeedControlState()==SpeedControl.ENABLED);
	}

	@Test
	public void test12() throws Exception {
		System.out.println("Test case 12");
		controller.engineOn();
		controller.on();
		controller.accelerator();
		controller.accelerator();
		assertTrue("1_5_4_3_3", controller.getControlState()==Controller.STANDBY);
	}

	@Test
	public void test13() throws Exception {
		System.out.println("Test case 13");
		controller.engineOn();
		controller.on();
		controller.accelerator();
		controller.on();
		assertTrue("1_5_4_3_4", controller.getControlState()==Controller.CRUISING);
		assertTrue("1_5_4_3_4", ! (controller.getControlState()==Controller.STANDBY));
		assertTrue("", controller.getSpeedControl().getSpeedControlState()==SpeedControl.ENABLED);
	}

	@Test
	public void test14() throws Exception {
		System.out.println("Test case 14");
		controller.engineOn();
		controller.on();
		controller.accelerator();
		controller.engineOn();
		assertTrue("1_5_4_3_5", controller.getControlState()==Controller.STANDBY);
	}

	@Test
	public void test15() throws Exception {
		System.out.println("Test case 15");
		controller.engineOn();
		controller.on();
		controller.accelerator();
		controller.brake();
		assertTrue("1_5_4_3_6", controller.getControlState()==Controller.STANDBY);
	}

	@Test
	public void test16() throws Exception {
		System.out.println("Test case 16");
		controller.engineOn();
		controller.on();
		controller.accelerator();
		controller.off();
		assertTrue("1_5_4_3_7", controller.getControlState()==Controller.STANDBY);
	}

	@Test
	public void test17() throws Exception {
		System.out.println("Test case 17");
		controller.engineOn();
		controller.on();
		controller.on();
		assertTrue("1_5_4_4", controller.getControlState()==Controller.CRUISING);
	}

	@Test
	public void test18() throws Exception {
		System.out.println("Test case 18");
		controller.engineOn();
		controller.on();
		controller.engineOn();
		assertTrue("1_5_4_5", controller.getControlState()==Controller.CRUISING);
	}

	@Test
	public void test19() throws Exception {
		System.out.println("Test case 19");
		controller.engineOn();
		controller.on();
		controller.brake();
		assertTrue("1_5_4_6", controller.getControlState()==Controller.STANDBY);
		assertTrue("1_5_4_6", ! (controller.getControlState()==Controller.CRUISING));
		assertTrue("", controller.getSpeedControl().getSpeedControlState()==SpeedControl.DISABLED);
	}

	@Test
	public void test20() throws Exception {
		System.out.println("Test case 20");
		controller.engineOn();
		controller.on();
		controller.off();
		assertTrue("1_5_4_7", controller.getControlState()==Controller.STANDBY);
		assertTrue("1_5_4_7", ! (controller.getControlState()==Controller.CRUISING));
		assertTrue("", controller.getSpeedControl().getSpeedControlState()==SpeedControl.DISABLED);
	}

	@Test
	public void test21() throws Exception {
		System.out.println("Test case 21");
		controller.engineOn();
		controller.engineOn();
		assertTrue("1_5_5", controller.getControlState()==Controller.ACTIVE);
	}

	@Test
	public void test22() throws Exception {
		System.out.println("Test case 22");
		controller.engineOn();
		controller.brake();
		assertTrue("1_5_6", controller.getControlState()==Controller.ACTIVE);
	}

	@Test
	public void test23() throws Exception {
		System.out.println("Test case 23");
		controller.engineOn();
		controller.off();
		assertTrue("1_5_7", controller.getControlState()==Controller.ACTIVE);
	}

	@Test
	public void test24() throws Exception {
		System.out.println("Test case 24");
		controller.brake();
		assertTrue("1_6", controller.getControlState()==Controller.INACTIVE);
	}

	@Test
	public void test25() throws Exception {
		System.out.println("Test case 25");
		controller.off();
		assertTrue("1_7", controller.getControlState()==Controller.INACTIVE);
	}

}
