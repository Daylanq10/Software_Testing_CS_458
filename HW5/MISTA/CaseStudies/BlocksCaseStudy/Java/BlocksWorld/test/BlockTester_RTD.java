//Test code generated by MISTA

package test;

import blocks.*;
import org.junit.*;
import static org.junit.Assert.*;

public class BlockTester_RTD {

	private Block block;
	
	@Before
	public void setUp()  throws Exception {
		block = new Block();
		block.getClears().add("B2");
		block.getClears().add("B5");
		block.getOns().add(new ON("B2", "B3"));
		block.getOns().add(new ON("B5", "B6"));
		block.getOntables().add("B3");
		block.getOntables().add("B6");
	}
	
	@Test
	public void test1() throws Exception {
		System.out.println("Test case 1");
		try {
			block.pickup("B2");
			System.out.println("Test failed at test 1_1: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_1", block.isClear("B2"));
		assertTrue("1_1", block.isClear("B5"));
		assertTrue("1_1", block.isOn("B2", "B3"));
		assertTrue("1_1", block.isOn("B5", "B6"));
		assertTrue("1_1", block.isOntable("B3"));
		assertTrue("1_1", block.isOntable("B6"));
	}

	@Test
	public void test2() throws Exception {
		System.out.println("Test case 2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test 1_2: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_2", block.isClear("B2"));
		assertTrue("1_2", block.isClear("B5"));
		assertTrue("1_2", block.isOn("B2", "B3"));
		assertTrue("1_2", block.isOn("B5", "B6"));
		assertTrue("1_2", block.isOntable("B3"));
		assertTrue("1_2", block.isOntable("B6"));
	}

	@Test
	public void test3() throws Exception {
		System.out.println("Test case 3");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test 1_3: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_3", block.isClear("B2"));
		assertTrue("1_3", block.isClear("B5"));
		assertTrue("1_3", block.isOn("B2", "B3"));
		assertTrue("1_3", block.isOn("B5", "B6"));
		assertTrue("1_3", block.isOntable("B3"));
		assertTrue("1_3", block.isOntable("B6"));
	}

	@Test
	public void test4() throws Exception {
		System.out.println("Test case 4");
		block.unstack("B2", "B3");
		assertTrue("1_4", block.isClear("B3"));
		assertTrue("1_4", block.isClear("B5"));
		assertTrue("1_4", block.isHolding("B2"));
		assertTrue("1_4", block.isOn("B5", "B6"));
		assertTrue("1_4", block.isOntable("B3"));
		assertTrue("1_4", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test 1_4_1: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_1", block.isClear("B3"));
		assertTrue("1_4_1", block.isClear("B5"));
		assertTrue("1_4_1", block.isHolding("B2"));
		assertTrue("1_4_1", block.isOn("B5", "B6"));
		assertTrue("1_4_1", block.isOntable("B3"));
		assertTrue("1_4_1", block.isOntable("B6"));
	}

	@Test
	public void test5() throws Exception {
		System.out.println("Test case 5");
		block.unstack("B2", "B3");
		block.putdown("B2");
		assertTrue("1_4_2", block.isClear("B2"));
		assertTrue("1_4_2", block.isClear("B3"));
		assertTrue("1_4_2", block.isClear("B5"));
		assertTrue("1_4_2", block.isOn("B5", "B6"));
		assertTrue("1_4_2", block.isOntable("B2"));
		assertTrue("1_4_2", block.isOntable("B3"));
		assertTrue("1_4_2", block.isOntable("B6"));
		block.pickup("B2");
		assertTrue("1_4_2_1", block.isClear("B3"));
		assertTrue("1_4_2_1", block.isClear("B5"));
		assertTrue("1_4_2_1", block.isHolding("B2"));
		assertTrue("1_4_2_1", block.isOn("B5", "B6"));
		assertTrue("1_4_2_1", block.isOntable("B3"));
		assertTrue("1_4_2_1", block.isOntable("B6"));
	}

	@Test
	public void test6() throws Exception {
		System.out.println("Test case 6");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		assertTrue("1_4_2_2", block.isClear("B2"));
		assertTrue("1_4_2_2", block.isClear("B5"));
		assertTrue("1_4_2_2", block.isHolding("B3"));
		assertTrue("1_4_2_2", block.isOn("B5", "B6"));
		assertTrue("1_4_2_2", block.isOntable("B2"));
		assertTrue("1_4_2_2", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test 1_4_2_2_1: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_2_2_1", block.isClear("B2"));
		assertTrue("1_4_2_2_1", block.isClear("B5"));
		assertTrue("1_4_2_2_1", block.isHolding("B3"));
		assertTrue("1_4_2_2_1", block.isOn("B5", "B6"));
		assertTrue("1_4_2_2_1", block.isOntable("B2"));
		assertTrue("1_4_2_2_1", block.isOntable("B6"));
	}

	@Test
	public void test7() throws Exception {
		System.out.println("Test case 7");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.putdown("B3");
		assertTrue("1_4_2_2_2", block.isClear("B2"));
		assertTrue("1_4_2_2_2", block.isClear("B3"));
		assertTrue("1_4_2_2_2", block.isClear("B5"));
		assertTrue("1_4_2_2_2", block.isOn("B5", "B6"));
		assertTrue("1_4_2_2_2", block.isOntable("B2"));
		assertTrue("1_4_2_2_2", block.isOntable("B3"));
		assertTrue("1_4_2_2_2", block.isOntable("B6"));
	}

	@Test
	public void test8() throws Exception {
		System.out.println("Test case 8");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		assertTrue("1_4_2_2_3", block.isClear("B3"));
		assertTrue("1_4_2_2_3", block.isClear("B5"));
		assertTrue("1_4_2_2_3", block.isOn("B3", "B2"));
		assertTrue("1_4_2_2_3", block.isOn("B5", "B6"));
		assertTrue("1_4_2_2_3", block.isOntable("B2"));
		assertTrue("1_4_2_2_3", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test 1_4_2_2_3_1: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_2_2_3_1", block.isClear("B3"));
		assertTrue("1_4_2_2_3_1", block.isClear("B5"));
		assertTrue("1_4_2_2_3_1", block.isOn("B3", "B2"));
		assertTrue("1_4_2_2_3_1", block.isOn("B5", "B6"));
		assertTrue("1_4_2_2_3_1", block.isOntable("B2"));
		assertTrue("1_4_2_2_3_1", block.isOntable("B6"));
	}

	@Test
	public void test9() throws Exception {
		System.out.println("Test case 9");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test 1_4_2_2_3_2: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_2_2_3_2", block.isClear("B3"));
		assertTrue("1_4_2_2_3_2", block.isClear("B5"));
		assertTrue("1_4_2_2_3_2", block.isOn("B3", "B2"));
		assertTrue("1_4_2_2_3_2", block.isOn("B5", "B6"));
		assertTrue("1_4_2_2_3_2", block.isOntable("B2"));
		assertTrue("1_4_2_2_3_2", block.isOntable("B6"));
	}

	@Test
	public void test10() throws Exception {
		System.out.println("Test case 10");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test 1_4_2_2_3_3: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_2_2_3_3", block.isClear("B3"));
		assertTrue("1_4_2_2_3_3", block.isClear("B5"));
		assertTrue("1_4_2_2_3_3", block.isOn("B3", "B2"));
		assertTrue("1_4_2_2_3_3", block.isOn("B5", "B6"));
		assertTrue("1_4_2_2_3_3", block.isOntable("B2"));
		assertTrue("1_4_2_2_3_3", block.isOntable("B6"));
	}

	@Test
	public void test11() throws Exception {
		System.out.println("Test case 11");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B3", "B2");
		assertTrue("1_4_2_2_3_4", block.isClear("B2"));
		assertTrue("1_4_2_2_3_4", block.isClear("B5"));
		assertTrue("1_4_2_2_3_4", block.isHolding("B3"));
		assertTrue("1_4_2_2_3_4", block.isOn("B5", "B6"));
		assertTrue("1_4_2_2_3_4", block.isOntable("B2"));
		assertTrue("1_4_2_2_3_4", block.isOntable("B6"));
	}

	@Test
	public void test12() throws Exception {
		System.out.println("Test case 12");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		assertTrue("1_4_2_2_3_5", block.isClear("B3"));
		assertTrue("1_4_2_2_3_5", block.isClear("B6"));
		assertTrue("1_4_2_2_3_5", block.isHolding("B5"));
		assertTrue("1_4_2_2_3_5", block.isOn("B3", "B2"));
		assertTrue("1_4_2_2_3_5", block.isOntable("B2"));
		assertTrue("1_4_2_2_3_5", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test13() throws Exception {
		System.out.println("Test case 13");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
		block.pickup("B5");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test14() throws Exception {
		System.out.println("Test case 14");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test15() throws Exception {
		System.out.println("Test case 15");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.putdown("B6");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test16() throws Exception {
		System.out.println("Test case 16");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		block.pickup("B5");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test17() throws Exception {
		System.out.println("Test case 17");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.putdown("B5");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test18() throws Exception {
		System.out.println("Test case 18");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B6");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test19() throws Exception {
		System.out.println("Test case 19");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B6");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test20() throws Exception {
		System.out.println("Test case 20");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B6");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test21() throws Exception {
		System.out.println("Test case 21");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.unstack("B5", "B6");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test22() throws Exception {
		System.out.println("Test case 22");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test23() throws Exception {
		System.out.println("Test case 23");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test24() throws Exception {
		System.out.println("Test case 24");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test25() throws Exception {
		System.out.println("Test case 25");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.unstack("B6", "B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test26() throws Exception {
		System.out.println("Test case 26");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test27() throws Exception {
		System.out.println("Test case 27");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test28() throws Exception {
		System.out.println("Test case 28");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test29() throws Exception {
		System.out.println("Test case 29");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B3", "B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test30() throws Exception {
		System.out.println("Test case 30");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B6", "B5");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test31() throws Exception {
		System.out.println("Test case 31");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test32() throws Exception {
		System.out.println("Test case 32");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test33() throws Exception {
		System.out.println("Test case 33");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test34() throws Exception {
		System.out.println("Test case 34");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B3", "B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test35() throws Exception {
		System.out.println("Test case 35");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
		block.pickup("B6");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B2"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test36() throws Exception {
		System.out.println("Test case 36");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.putdown("B6");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test37() throws Exception {
		System.out.println("Test case 37");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B5");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test38() throws Exception {
		System.out.println("Test case 38");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test39() throws Exception {
		System.out.println("Test case 39");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test40() throws Exception {
		System.out.println("Test case 40");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B6", "B5");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test41() throws Exception {
		System.out.println("Test case 41");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test42() throws Exception {
		System.out.println("Test case 42");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test43() throws Exception {
		System.out.println("Test case 43");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test44() throws Exception {
		System.out.println("Test case 44");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.unstack("B5", "B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test45() throws Exception {
		System.out.println("Test case 45");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B6");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test46() throws Exception {
		System.out.println("Test case 46");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B5", "B6");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test47() throws Exception {
		System.out.println("Test case 47");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		assertTrue("1_4_2_2_4", block.isClear("B2"));
		assertTrue("1_4_2_2_4", block.isClear("B3"));
		assertTrue("1_4_2_2_4", block.isOn("B3", "B5"));
		assertTrue("1_4_2_2_4", block.isOn("B5", "B6"));
		assertTrue("1_4_2_2_4", block.isOntable("B2"));
		assertTrue("1_4_2_2_4", block.isOntable("B6"));
		block.pickup("B2");
		assertTrue("1_4_2_2_4_1", block.isClear("B3"));
		assertTrue("1_4_2_2_4_1", block.isHolding("B2"));
		assertTrue("1_4_2_2_4_1", block.isOn("B3", "B5"));
		assertTrue("1_4_2_2_4_1", block.isOn("B5", "B6"));
		assertTrue("1_4_2_2_4_1", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test48() throws Exception {
		System.out.println("Test case 48");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.putdown("B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test49() throws Exception {
		System.out.println("Test case 49");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test50() throws Exception {
		System.out.println("Test case 50");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B3");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test51() throws Exception {
		System.out.println("Test case 51");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B3");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test52() throws Exception {
		System.out.println("Test case 52");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.unstack("B2", "B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test53() throws Exception {
		System.out.println("Test case 53");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test54() throws Exception {
		System.out.println("Test case 54");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test 1_4_2_2_4_2: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_2_2_4_2", block.isClear("B2"));
		assertTrue("1_4_2_2_4_2", block.isClear("B3"));
		assertTrue("1_4_2_2_4_2", block.isOn("B3", "B5"));
		assertTrue("1_4_2_2_4_2", block.isOn("B5", "B6"));
		assertTrue("1_4_2_2_4_2", block.isOntable("B2"));
		assertTrue("1_4_2_2_4_2", block.isOntable("B6"));
	}

	@Test
	public void test55() throws Exception {
		System.out.println("Test case 55");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test 1_4_2_2_4_3: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_2_2_4_3", block.isClear("B2"));
		assertTrue("1_4_2_2_4_3", block.isClear("B3"));
		assertTrue("1_4_2_2_4_3", block.isOn("B3", "B5"));
		assertTrue("1_4_2_2_4_3", block.isOn("B5", "B6"));
		assertTrue("1_4_2_2_4_3", block.isOntable("B2"));
		assertTrue("1_4_2_2_4_3", block.isOntable("B6"));
	}

	@Test
	public void test56() throws Exception {
		System.out.println("Test case 56");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.unstack("B3", "B5");
		assertTrue("1_4_2_2_4_4", block.isClear("B2"));
		assertTrue("1_4_2_2_4_4", block.isClear("B5"));
		assertTrue("1_4_2_2_4_4", block.isHolding("B3"));
		assertTrue("1_4_2_2_4_4", block.isOn("B5", "B6"));
		assertTrue("1_4_2_2_4_4", block.isOntable("B2"));
		assertTrue("1_4_2_2_4_4", block.isOntable("B6"));
	}

	@Test
	public void test57() throws Exception {
		System.out.println("Test case 57");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.pickup("B3");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test 1_4_2_2_5: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_2_2_5", block.isClear("B2"));
		assertTrue("1_4_2_2_5", block.isClear("B5"));
		assertTrue("1_4_2_2_5", block.isHolding("B3"));
		assertTrue("1_4_2_2_5", block.isOn("B5", "B6"));
		assertTrue("1_4_2_2_5", block.isOntable("B2"));
		assertTrue("1_4_2_2_5", block.isOntable("B6"));
	}

	@Test
	public void test58() throws Exception {
		System.out.println("Test case 58");
		block.unstack("B2", "B3");
		block.putdown("B2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test 1_4_2_3: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_2_3", block.isClear("B2"));
		assertTrue("1_4_2_3", block.isClear("B3"));
		assertTrue("1_4_2_3", block.isClear("B5"));
		assertTrue("1_4_2_3", block.isOn("B5", "B6"));
		assertTrue("1_4_2_3", block.isOntable("B2"));
		assertTrue("1_4_2_3", block.isOntable("B3"));
		assertTrue("1_4_2_3", block.isOntable("B6"));
	}

	@Test
	public void test59() throws Exception {
		System.out.println("Test case 59");
		block.unstack("B2", "B3");
		block.putdown("B2");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test 1_4_2_4: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_2_4", block.isClear("B2"));
		assertTrue("1_4_2_4", block.isClear("B3"));
		assertTrue("1_4_2_4", block.isClear("B5"));
		assertTrue("1_4_2_4", block.isOn("B5", "B6"));
		assertTrue("1_4_2_4", block.isOntable("B2"));
		assertTrue("1_4_2_4", block.isOntable("B3"));
		assertTrue("1_4_2_4", block.isOntable("B6"));
	}

	@Test
	public void test60() throws Exception {
		System.out.println("Test case 60");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		assertTrue("1_4_2_5", block.isClear("B2"));
		assertTrue("1_4_2_5", block.isClear("B3"));
		assertTrue("1_4_2_5", block.isClear("B6"));
		assertTrue("1_4_2_5", block.isHolding("B5"));
		assertTrue("1_4_2_5", block.isOntable("B2"));
		assertTrue("1_4_2_5", block.isOntable("B3"));
		assertTrue("1_4_2_5", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test 1_4_2_5_1: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_2_5_1", block.isClear("B2"));
		assertTrue("1_4_2_5_1", block.isClear("B3"));
		assertTrue("1_4_2_5_1", block.isClear("B6"));
		assertTrue("1_4_2_5_1", block.isHolding("B5"));
		assertTrue("1_4_2_5_1", block.isOntable("B2"));
		assertTrue("1_4_2_5_1", block.isOntable("B3"));
		assertTrue("1_4_2_5_1", block.isOntable("B6"));
	}

	@Test
	public void test61() throws Exception {
		System.out.println("Test case 61");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		assertTrue("1_4_2_5_2", block.isClear("B2"));
		assertTrue("1_4_2_5_2", block.isClear("B3"));
		assertTrue("1_4_2_5_2", block.isClear("B5"));
		assertTrue("1_4_2_5_2", block.isClear("B6"));
		assertTrue("1_4_2_5_2", block.isOntable("B2"));
		assertTrue("1_4_2_5_2", block.isOntable("B3"));
		assertTrue("1_4_2_5_2", block.isOntable("B5"));
		assertTrue("1_4_2_5_2", block.isOntable("B6"));
		block.pickup("B2");
		assertTrue("1_4_2_5_2_1", block.isClear("B3"));
		assertTrue("1_4_2_5_2_1", block.isClear("B5"));
		assertTrue("1_4_2_5_2_1", block.isClear("B6"));
		assertTrue("1_4_2_5_2_1", block.isHolding("B2"));
		assertTrue("1_4_2_5_2_1", block.isOntable("B3"));
		assertTrue("1_4_2_5_2_1", block.isOntable("B5"));
		assertTrue("1_4_2_5_2_1", block.isOntable("B6"));
	}

	@Test
	public void test62() throws Exception {
		System.out.println("Test case 62");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		assertTrue("1_4_2_5_2_2", block.isClear("B2"));
		assertTrue("1_4_2_5_2_2", block.isClear("B5"));
		assertTrue("1_4_2_5_2_2", block.isClear("B6"));
		assertTrue("1_4_2_5_2_2", block.isHolding("B3"));
		assertTrue("1_4_2_5_2_2", block.isOntable("B2"));
		assertTrue("1_4_2_5_2_2", block.isOntable("B5"));
		assertTrue("1_4_2_5_2_2", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test63() throws Exception {
		System.out.println("Test case 63");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.putdown("B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test64() throws Exception {
		System.out.println("Test case 64");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test65() throws Exception {
		System.out.println("Test case 65");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
		block.pickup("B2");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test66() throws Exception {
		System.out.println("Test case 66");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.putdown("B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test67() throws Exception {
		System.out.println("Test case 67");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
		block.pickup("B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test68() throws Exception {
		System.out.println("Test case 68");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.pickup("B6");
		block.putdown("B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test69() throws Exception {
		System.out.println("Test case 69");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.pickup("B6");
		block.stack("B6", "B2");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test70() throws Exception {
		System.out.println("Test case 70");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.pickup("B6");
		block.stack("B6", "B2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test71() throws Exception {
		System.out.println("Test case 71");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.pickup("B6");
		block.stack("B6", "B2");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test72() throws Exception {
		System.out.println("Test case 72");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.unstack("B6", "B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test73() throws Exception {
		System.out.println("Test case 73");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.pickup("B6");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test74() throws Exception {
		System.out.println("Test case 74");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B3");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test75() throws Exception {
		System.out.println("Test case 75");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B3");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test76() throws Exception {
		System.out.println("Test case 76");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.unstack("B2", "B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test77() throws Exception {
		System.out.println("Test case 77");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		block.stack("B2", "B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test78() throws Exception {
		System.out.println("Test case 78");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B2");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test79() throws Exception {
		System.out.println("Test case 79");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test80() throws Exception {
		System.out.println("Test case 80");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.putdown("B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test81() throws Exception {
		System.out.println("Test case 81");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test82() throws Exception {
		System.out.println("Test case 82");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test83() throws Exception {
		System.out.println("Test case 83");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test84() throws Exception {
		System.out.println("Test case 84");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.unstack("B3", "B5");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test85() throws Exception {
		System.out.println("Test case 85");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.unstack("B6", "B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test86() throws Exception {
		System.out.println("Test case 86");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		block.pickup("B2");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test87() throws Exception {
		System.out.println("Test case 87");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.putdown("B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test88() throws Exception {
		System.out.println("Test case 88");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test89() throws Exception {
		System.out.println("Test case 89");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test90() throws Exception {
		System.out.println("Test case 90");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test91() throws Exception {
		System.out.println("Test case 91");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		block.unstack("B2", "B6");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test92() throws Exception {
		System.out.println("Test case 92");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test93() throws Exception {
		System.out.println("Test case 93");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test94() throws Exception {
		System.out.println("Test case 94");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test95() throws Exception {
		System.out.println("Test case 95");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.unstack("B6", "B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test96() throws Exception {
		System.out.println("Test case 96");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test97() throws Exception {
		System.out.println("Test case 97");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test98() throws Exception {
		System.out.println("Test case 98");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test99() throws Exception {
		System.out.println("Test case 99");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.unstack("B3", "B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test100() throws Exception {
		System.out.println("Test case 100");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
		block.pickup("B2");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test101() throws Exception {
		System.out.println("Test case 101");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.putdown("B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test102() throws Exception {
		System.out.println("Test case 102");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
		block.pickup("B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test103() throws Exception {
		System.out.println("Test case 103");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.pickup("B5");
		block.putdown("B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test104() throws Exception {
		System.out.println("Test case 104");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.pickup("B5");
		block.stack("B5", "B2");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test105() throws Exception {
		System.out.println("Test case 105");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.pickup("B5");
		block.stack("B5", "B2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test106() throws Exception {
		System.out.println("Test case 106");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.pickup("B5");
		block.stack("B5", "B2");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test107() throws Exception {
		System.out.println("Test case 107");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.pickup("B5");
		block.stack("B5", "B2");
		block.unstack("B5", "B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test108() throws Exception {
		System.out.println("Test case 108");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.pickup("B5");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test109() throws Exception {
		System.out.println("Test case 109");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B3");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test110() throws Exception {
		System.out.println("Test case 110");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B3");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test111() throws Exception {
		System.out.println("Test case 111");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.unstack("B2", "B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test112() throws Exception {
		System.out.println("Test case 112");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test113() throws Exception {
		System.out.println("Test case 113");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test114() throws Exception {
		System.out.println("Test case 114");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test115() throws Exception {
		System.out.println("Test case 115");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.putdown("B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test116() throws Exception {
		System.out.println("Test case 116");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test117() throws Exception {
		System.out.println("Test case 117");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
		block.pickup("B2");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test118() throws Exception {
		System.out.println("Test case 118");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.putdown("B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test119() throws Exception {
		System.out.println("Test case 119");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test120() throws Exception {
		System.out.println("Test case 120");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test121() throws Exception {
		System.out.println("Test case 121");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test122() throws Exception {
		System.out.println("Test case 122");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		block.unstack("B2", "B5");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test123() throws Exception {
		System.out.println("Test case 123");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		block.pickup("B2");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test124() throws Exception {
		System.out.println("Test case 124");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test125() throws Exception {
		System.out.println("Test case 125");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test126() throws Exception {
		System.out.println("Test case 126");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		block.unstack("B5", "B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test127() throws Exception {
		System.out.println("Test case 127");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test128() throws Exception {
		System.out.println("Test case 128");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test129() throws Exception {
		System.out.println("Test case 129");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test130() throws Exception {
		System.out.println("Test case 130");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.unstack("B3", "B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test131() throws Exception {
		System.out.println("Test case 131");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B3");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test132() throws Exception {
		System.out.println("Test case 132");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B5");
		assertTrue("1_4_2_5_2_3", block.isClear("B2"));
		assertTrue("1_4_2_5_2_3", block.isClear("B3"));
		assertTrue("1_4_2_5_2_3", block.isClear("B6"));
		assertTrue("1_4_2_5_2_3", block.isHolding("B5"));
		assertTrue("1_4_2_5_2_3", block.isOntable("B2"));
		assertTrue("1_4_2_5_2_3", block.isOntable("B3"));
		assertTrue("1_4_2_5_2_3", block.isOntable("B6"));
	}

	@Test
	public void test133() throws Exception {
		System.out.println("Test case 133");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		assertTrue("1_4_2_5_2_4", block.isClear("B2"));
		assertTrue("1_4_2_5_2_4", block.isClear("B3"));
		assertTrue("1_4_2_5_2_4", block.isClear("B5"));
		assertTrue("1_4_2_5_2_4", block.isHolding("B6"));
		assertTrue("1_4_2_5_2_4", block.isOntable("B2"));
		assertTrue("1_4_2_5_2_4", block.isOntable("B3"));
		assertTrue("1_4_2_5_2_4", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test134() throws Exception {
		System.out.println("Test case 134");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.putdown("B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test135() throws Exception {
		System.out.println("Test case 135");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
		block.pickup("B3");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test136() throws Exception {
		System.out.println("Test case 136");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.putdown("B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test137() throws Exception {
		System.out.println("Test case 137");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test138() throws Exception {
		System.out.println("Test case 138");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		block.pickup("B5");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test139() throws Exception {
		System.out.println("Test case 139");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.putdown("B5");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test140() throws Exception {
		System.out.println("Test case 140");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test141() throws Exception {
		System.out.println("Test case 141");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test142() throws Exception {
		System.out.println("Test case 142");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test143() throws Exception {
		System.out.println("Test case 143");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		block.unstack("B5", "B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test144() throws Exception {
		System.out.println("Test case 144");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B5");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test145() throws Exception {
		System.out.println("Test case 145");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test146() throws Exception {
		System.out.println("Test case 146");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test147() throws Exception {
		System.out.println("Test case 147");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.unstack("B3", "B6");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test148() throws Exception {
		System.out.println("Test case 148");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test149() throws Exception {
		System.out.println("Test case 149");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test150() throws Exception {
		System.out.println("Test case 150");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.putdown("B5");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test151() throws Exception {
		System.out.println("Test case 151");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B3");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test152() throws Exception {
		System.out.println("Test case 152");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B6");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		block.pickup("B3");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test153() throws Exception {
		System.out.println("Test case 153");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.pickup("B3");
		block.putdown("B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test154() throws Exception {
		System.out.println("Test case 154");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.pickup("B3");
		block.stack("B3", "B5");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test155() throws Exception {
		System.out.println("Test case 155");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.pickup("B3");
		block.stack("B3", "B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test156() throws Exception {
		System.out.println("Test case 156");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.pickup("B3");
		block.stack("B3", "B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test157() throws Exception {
		System.out.println("Test case 157");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.unstack("B3", "B5");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test158() throws Exception {
		System.out.println("Test case 158");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.pickup("B3");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test159() throws Exception {
		System.out.println("Test case 159");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B6");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test160() throws Exception {
		System.out.println("Test case 160");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B6");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test161() throws Exception {
		System.out.println("Test case 161");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.unstack("B5", "B6");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test162() throws Exception {
		System.out.println("Test case 162");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test163() throws Exception {
		System.out.println("Test case 163");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test164() throws Exception {
		System.out.println("Test case 164");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test165() throws Exception {
		System.out.println("Test case 165");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.unstack("B6", "B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test166() throws Exception {
		System.out.println("Test case 166");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
		block.pickup("B2");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test167() throws Exception {
		System.out.println("Test case 167");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.putdown("B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test168() throws Exception {
		System.out.println("Test case 168");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test169() throws Exception {
		System.out.println("Test case 169");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
		block.pickup("B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test170() throws Exception {
		System.out.println("Test case 170");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.putdown("B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test171() throws Exception {
		System.out.println("Test case 171");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test172() throws Exception {
		System.out.println("Test case 172");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test173() throws Exception {
		System.out.println("Test case 173");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test174() throws Exception {
		System.out.println("Test case 174");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		block.unstack("B5", "B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test175() throws Exception {
		System.out.println("Test case 175");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		block.pickup("B5");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test176() throws Exception {
		System.out.println("Test case 176");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test177() throws Exception {
		System.out.println("Test case 177");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test178() throws Exception {
		System.out.println("Test case 178");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		block.unstack("B2", "B6");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test179() throws Exception {
		System.out.println("Test case 179");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B2");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test180() throws Exception {
		System.out.println("Test case 180");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test181() throws Exception {
		System.out.println("Test case 181");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.putdown("B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test182() throws Exception {
		System.out.println("Test case 182");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B2");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test183() throws Exception {
		System.out.println("Test case 183");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		block.pickup("B2");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test184() throws Exception {
		System.out.println("Test case 184");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.pickup("B2");
		block.putdown("B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test185() throws Exception {
		System.out.println("Test case 185");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.pickup("B2");
		block.stack("B2", "B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test186() throws Exception {
		System.out.println("Test case 186");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.pickup("B2");
		block.stack("B2", "B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test187() throws Exception {
		System.out.println("Test case 187");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.pickup("B2");
		block.stack("B2", "B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test188() throws Exception {
		System.out.println("Test case 188");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.pickup("B2");
		block.stack("B2", "B5");
		block.unstack("B2", "B5");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test189() throws Exception {
		System.out.println("Test case 189");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.pickup("B2");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test190() throws Exception {
		System.out.println("Test case 190");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B6");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test191() throws Exception {
		System.out.println("Test case 191");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B6");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test192() throws Exception {
		System.out.println("Test case 192");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.unstack("B5", "B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test193() throws Exception {
		System.out.println("Test case 193");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.pickup("B5");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test194() throws Exception {
		System.out.println("Test case 194");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test195() throws Exception {
		System.out.println("Test case 195");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test196() throws Exception {
		System.out.println("Test case 196");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.unstack("B6", "B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test197() throws Exception {
		System.out.println("Test case 197");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
		block.pickup("B2");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test198() throws Exception {
		System.out.println("Test case 198");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test199() throws Exception {
		System.out.println("Test case 199");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.putdown("B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test200() throws Exception {
		System.out.println("Test case 200");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test201() throws Exception {
		System.out.println("Test case 201");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
		block.pickup("B2");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test202() throws Exception {
		System.out.println("Test case 202");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.putdown("B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test203() throws Exception {
		System.out.println("Test case 203");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test204() throws Exception {
		System.out.println("Test case 204");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B3");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test205() throws Exception {
		System.out.println("Test case 205");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B3");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test206() throws Exception {
		System.out.println("Test case 206");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		block.stack("B2", "B3");
		block.unstack("B2", "B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test207() throws Exception {
		System.out.println("Test case 207");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.pickup("B2");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test208() throws Exception {
		System.out.println("Test case 208");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test209() throws Exception {
		System.out.println("Test case 209");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test210() throws Exception {
		System.out.println("Test case 210");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.unstack("B3", "B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test211() throws Exception {
		System.out.println("Test case 211");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test212() throws Exception {
		System.out.println("Test case 212");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test213() throws Exception {
		System.out.println("Test case 213");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test214() throws Exception {
		System.out.println("Test case 214");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B6", "B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test215() throws Exception {
		System.out.println("Test case 215");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test216() throws Exception {
		System.out.println("Test case 216");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test 1_4_2_5_2_5: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_2_5_2_5", block.isClear("B2"));
		assertTrue("1_4_2_5_2_5", block.isClear("B3"));
		assertTrue("1_4_2_5_2_5", block.isClear("B5"));
		assertTrue("1_4_2_5_2_5", block.isClear("B6"));
		assertTrue("1_4_2_5_2_5", block.isOntable("B2"));
		assertTrue("1_4_2_5_2_5", block.isOntable("B3"));
		assertTrue("1_4_2_5_2_5", block.isOntable("B5"));
		assertTrue("1_4_2_5_2_5", block.isOntable("B6"));
	}

	@Test
	public void test217() throws Exception {
		System.out.println("Test case 217");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test 1_4_2_5_2_6: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_2_5_2_6", block.isClear("B2"));
		assertTrue("1_4_2_5_2_6", block.isClear("B3"));
		assertTrue("1_4_2_5_2_6", block.isClear("B5"));
		assertTrue("1_4_2_5_2_6", block.isClear("B6"));
		assertTrue("1_4_2_5_2_6", block.isOntable("B2"));
		assertTrue("1_4_2_5_2_6", block.isOntable("B3"));
		assertTrue("1_4_2_5_2_6", block.isOntable("B5"));
		assertTrue("1_4_2_5_2_6", block.isOntable("B6"));
	}

	@Test
	public void test218() throws Exception {
		System.out.println("Test case 218");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.putdown("B5");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test 1_4_2_5_2_7: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_2_5_2_7", block.isClear("B2"));
		assertTrue("1_4_2_5_2_7", block.isClear("B3"));
		assertTrue("1_4_2_5_2_7", block.isClear("B5"));
		assertTrue("1_4_2_5_2_7", block.isClear("B6"));
		assertTrue("1_4_2_5_2_7", block.isOntable("B2"));
		assertTrue("1_4_2_5_2_7", block.isOntable("B3"));
		assertTrue("1_4_2_5_2_7", block.isOntable("B5"));
		assertTrue("1_4_2_5_2_7", block.isOntable("B6"));
	}

	@Test
	public void test219() throws Exception {
		System.out.println("Test case 219");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		assertTrue("1_4_2_5_3", block.isClear("B3"));
		assertTrue("1_4_2_5_3", block.isClear("B5"));
		assertTrue("1_4_2_5_3", block.isClear("B6"));
		assertTrue("1_4_2_5_3", block.isOn("B5", "B2"));
		assertTrue("1_4_2_5_3", block.isOntable("B2"));
		assertTrue("1_4_2_5_3", block.isOntable("B3"));
		assertTrue("1_4_2_5_3", block.isOntable("B6"));
		block.pickup("B3");
		assertTrue("1_4_2_5_3_1", block.isClear("B5"));
		assertTrue("1_4_2_5_3_1", block.isClear("B6"));
		assertTrue("1_4_2_5_3_1", block.isHolding("B3"));
		assertTrue("1_4_2_5_3_1", block.isOn("B5", "B2"));
		assertTrue("1_4_2_5_3_1", block.isOntable("B2"));
		assertTrue("1_4_2_5_3_1", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test220() throws Exception {
		System.out.println("Test case 220");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.putdown("B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test221() throws Exception {
		System.out.println("Test case 221");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
		block.pickup("B6");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test222() throws Exception {
		System.out.println("Test case 222");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.putdown("B6");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test223() throws Exception {
		System.out.println("Test case 223");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test224() throws Exception {
		System.out.println("Test case 224");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test225() throws Exception {
		System.out.println("Test case 225");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test226() throws Exception {
		System.out.println("Test case 226");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.unstack("B6", "B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test227() throws Exception {
		System.out.println("Test case 227");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.pickup("B6");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test228() throws Exception {
		System.out.println("Test case 228");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test229() throws Exception {
		System.out.println("Test case 229");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test230() throws Exception {
		System.out.println("Test case 230");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.unstack("B3", "B5");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test231() throws Exception {
		System.out.println("Test case 231");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test232() throws Exception {
		System.out.println("Test case 232");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test233() throws Exception {
		System.out.println("Test case 233");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test234() throws Exception {
		System.out.println("Test case 234");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.unstack("B3", "B6");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test235() throws Exception {
		System.out.println("Test case 235");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.unstack("B5", "B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test236() throws Exception {
		System.out.println("Test case 236");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B3");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test237() throws Exception {
		System.out.println("Test case 237");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		assertTrue("1_4_2_5_3_2", block.isClear("B3"));
		assertTrue("1_4_2_5_3_2", block.isClear("B5"));
		assertTrue("1_4_2_5_3_2", block.isHolding("B6"));
		assertTrue("1_4_2_5_3_2", block.isOn("B5", "B2"));
		assertTrue("1_4_2_5_3_2", block.isOntable("B2"));
		assertTrue("1_4_2_5_3_2", block.isOntable("B3"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test238() throws Exception {
		System.out.println("Test case 238");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.putdown("B6");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test239() throws Exception {
		System.out.println("Test case 239");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B3");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test240() throws Exception {
		System.out.println("Test case 240");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B3");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test241() throws Exception {
		System.out.println("Test case 241");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B3");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test242() throws Exception {
		System.out.println("Test case 242");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.unstack("B5", "B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test243() throws Exception {
		System.out.println("Test case 243");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.unstack("B6", "B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test244() throws Exception {
		System.out.println("Test case 244");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B5");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		block.pickup("B3");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test245() throws Exception {
		System.out.println("Test case 245");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.putdown("B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test246() throws Exception {
		System.out.println("Test case 246");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test247() throws Exception {
		System.out.println("Test case 247");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test248() throws Exception {
		System.out.println("Test case 248");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test249() throws Exception {
		System.out.println("Test case 249");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.unstack("B3", "B6");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test250() throws Exception {
		System.out.println("Test case 250");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B3");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
	}

	@Test
	public void test251() throws Exception {
		System.out.println("Test case 251");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test252() throws Exception {
		System.out.println("Test case 252");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test253() throws Exception {
		System.out.println("Test case 253");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B6", "B5");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test254() throws Exception {
		System.out.println("Test case 254");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test255() throws Exception {
		System.out.println("Test case 255");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test 1_4_2_5_3_3: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_2_5_3_3", block.isClear("B3"));
		assertTrue("1_4_2_5_3_3", block.isClear("B5"));
		assertTrue("1_4_2_5_3_3", block.isClear("B6"));
		assertTrue("1_4_2_5_3_3", block.isOn("B5", "B2"));
		assertTrue("1_4_2_5_3_3", block.isOntable("B2"));
		assertTrue("1_4_2_5_3_3", block.isOntable("B3"));
		assertTrue("1_4_2_5_3_3", block.isOntable("B6"));
	}

	@Test
	public void test256() throws Exception {
		System.out.println("Test case 256");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test 1_4_2_5_3_4: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_2_5_3_4", block.isClear("B3"));
		assertTrue("1_4_2_5_3_4", block.isClear("B5"));
		assertTrue("1_4_2_5_3_4", block.isClear("B6"));
		assertTrue("1_4_2_5_3_4", block.isOn("B5", "B2"));
		assertTrue("1_4_2_5_3_4", block.isOntable("B2"));
		assertTrue("1_4_2_5_3_4", block.isOntable("B3"));
		assertTrue("1_4_2_5_3_4", block.isOntable("B6"));
	}

	@Test
	public void test257() throws Exception {
		System.out.println("Test case 257");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.unstack("B5", "B2");
		assertTrue("1_4_2_5_3_5", block.isClear("B2"));
		assertTrue("1_4_2_5_3_5", block.isClear("B3"));
		assertTrue("1_4_2_5_3_5", block.isClear("B6"));
		assertTrue("1_4_2_5_3_5", block.isHolding("B5"));
		assertTrue("1_4_2_5_3_5", block.isOntable("B2"));
		assertTrue("1_4_2_5_3_5", block.isOntable("B3"));
		assertTrue("1_4_2_5_3_5", block.isOntable("B6"));
	}

	@Test
	public void test258() throws Exception {
		System.out.println("Test case 258");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		assertTrue("1_4_2_5_4", block.isClear("B2"));
		assertTrue("1_4_2_5_4", block.isClear("B5"));
		assertTrue("1_4_2_5_4", block.isClear("B6"));
		assertTrue("1_4_2_5_4", block.isOn("B5", "B3"));
		assertTrue("1_4_2_5_4", block.isOntable("B2"));
		assertTrue("1_4_2_5_4", block.isOntable("B3"));
		assertTrue("1_4_2_5_4", block.isOntable("B6"));
		block.pickup("B2");
		assertTrue("1_4_2_5_4_1", block.isClear("B5"));
		assertTrue("1_4_2_5_4_1", block.isClear("B6"));
		assertTrue("1_4_2_5_4_1", block.isHolding("B2"));
		assertTrue("1_4_2_5_4_1", block.isOn("B5", "B3"));
		assertTrue("1_4_2_5_4_1", block.isOntable("B3"));
		assertTrue("1_4_2_5_4_1", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test259() throws Exception {
		System.out.println("Test case 259");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.putdown("B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test260() throws Exception {
		System.out.println("Test case 260");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
		block.pickup("B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B3"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test261() throws Exception {
		System.out.println("Test case 261");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.putdown("B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test262() throws Exception {
		System.out.println("Test case 262");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B3"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test263() throws Exception {
		System.out.println("Test case 263");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test264() throws Exception {
		System.out.println("Test case 264");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test265() throws Exception {
		System.out.println("Test case 265");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.unstack("B6", "B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test266() throws Exception {
		System.out.println("Test case 266");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		block.pickup("B6");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test267() throws Exception {
		System.out.println("Test case 267");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test268() throws Exception {
		System.out.println("Test case 268");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test269() throws Exception {
		System.out.println("Test case 269");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B5");
		block.unstack("B2", "B5");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test270() throws Exception {
		System.out.println("Test case 270");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test271() throws Exception {
		System.out.println("Test case 271");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test272() throws Exception {
		System.out.println("Test case 272");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test273() throws Exception {
		System.out.println("Test case 273");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		block.unstack("B2", "B6");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test274() throws Exception {
		System.out.println("Test case 274");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		block.stack("B2", "B6");
		block.unstack("B5", "B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test275() throws Exception {
		System.out.println("Test case 275");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B2");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test276() throws Exception {
		System.out.println("Test case 276");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		assertTrue("1_4_2_5_4_2", block.isClear("B2"));
		assertTrue("1_4_2_5_4_2", block.isClear("B5"));
		assertTrue("1_4_2_5_4_2", block.isHolding("B6"));
		assertTrue("1_4_2_5_4_2", block.isOn("B5", "B3"));
		assertTrue("1_4_2_5_4_2", block.isOntable("B2"));
		assertTrue("1_4_2_5_4_2", block.isOntable("B3"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test277() throws Exception {
		System.out.println("Test case 277");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.putdown("B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test278() throws Exception {
		System.out.println("Test case 278");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B2");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test279() throws Exception {
		System.out.println("Test case 279");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test280() throws Exception {
		System.out.println("Test case 280");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B2");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test281() throws Exception {
		System.out.println("Test case 281");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.unstack("B5", "B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test282() throws Exception {
		System.out.println("Test case 282");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.unstack("B6", "B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test283() throws Exception {
		System.out.println("Test case 283");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		block.pickup("B2");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B3"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test284() throws Exception {
		System.out.println("Test case 284");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B2");
		block.putdown("B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test285() throws Exception {
		System.out.println("Test case 285");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B2");
		block.stack("B2", "B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B3"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test286() throws Exception {
		System.out.println("Test case 286");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B2");
		block.stack("B2", "B6");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test287() throws Exception {
		System.out.println("Test case 287");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B2");
		block.stack("B2", "B6");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test288() throws Exception {
		System.out.println("Test case 288");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B2");
		block.stack("B2", "B6");
		block.unstack("B2", "B6");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test289() throws Exception {
		System.out.println("Test case 289");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.pickup("B2");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test290() throws Exception {
		System.out.println("Test case 290");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test291() throws Exception {
		System.out.println("Test case 291");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test292() throws Exception {
		System.out.println("Test case 292");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B6", "B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test293() throws Exception {
		System.out.println("Test case 293");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.pickup("B6");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test294() throws Exception {
		System.out.println("Test case 294");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test 1_4_2_5_4_3: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_2_5_4_3", block.isClear("B2"));
		assertTrue("1_4_2_5_4_3", block.isClear("B5"));
		assertTrue("1_4_2_5_4_3", block.isClear("B6"));
		assertTrue("1_4_2_5_4_3", block.isOn("B5", "B3"));
		assertTrue("1_4_2_5_4_3", block.isOntable("B2"));
		assertTrue("1_4_2_5_4_3", block.isOntable("B3"));
		assertTrue("1_4_2_5_4_3", block.isOntable("B6"));
	}

	@Test
	public void test295() throws Exception {
		System.out.println("Test case 295");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test 1_4_2_5_4_4: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_2_5_4_4", block.isClear("B2"));
		assertTrue("1_4_2_5_4_4", block.isClear("B5"));
		assertTrue("1_4_2_5_4_4", block.isClear("B6"));
		assertTrue("1_4_2_5_4_4", block.isOn("B5", "B3"));
		assertTrue("1_4_2_5_4_4", block.isOntable("B2"));
		assertTrue("1_4_2_5_4_4", block.isOntable("B3"));
		assertTrue("1_4_2_5_4_4", block.isOntable("B6"));
	}

	@Test
	public void test296() throws Exception {
		System.out.println("Test case 296");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B3");
		block.unstack("B5", "B3");
		assertTrue("1_4_2_5_4_5", block.isClear("B2"));
		assertTrue("1_4_2_5_4_5", block.isClear("B3"));
		assertTrue("1_4_2_5_4_5", block.isClear("B6"));
		assertTrue("1_4_2_5_4_5", block.isHolding("B5"));
		assertTrue("1_4_2_5_4_5", block.isOntable("B2"));
		assertTrue("1_4_2_5_4_5", block.isOntable("B3"));
		assertTrue("1_4_2_5_4_5", block.isOntable("B6"));
	}

	@Test
	public void test297() throws Exception {
		System.out.println("Test case 297");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		block.stack("B5", "B6");
		assertTrue("1_4_2_5_5", block.isClear("B2"));
		assertTrue("1_4_2_5_5", block.isClear("B3"));
		assertTrue("1_4_2_5_5", block.isClear("B5"));
		assertTrue("1_4_2_5_5", block.isOn("B5", "B6"));
		assertTrue("1_4_2_5_5", block.isOntable("B2"));
		assertTrue("1_4_2_5_5", block.isOntable("B3"));
		assertTrue("1_4_2_5_5", block.isOntable("B6"));
	}

	@Test
	public void test298() throws Exception {
		System.out.println("Test case 298");
		block.unstack("B2", "B3");
		block.putdown("B2");
		block.unstack("B5", "B6");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test 1_4_2_5_6: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_2_5_6", block.isClear("B2"));
		assertTrue("1_4_2_5_6", block.isClear("B3"));
		assertTrue("1_4_2_5_6", block.isClear("B6"));
		assertTrue("1_4_2_5_6", block.isHolding("B5"));
		assertTrue("1_4_2_5_6", block.isOntable("B2"));
		assertTrue("1_4_2_5_6", block.isOntable("B3"));
		assertTrue("1_4_2_5_6", block.isOntable("B6"));
	}

	@Test
	public void test299() throws Exception {
		System.out.println("Test case 299");
		block.unstack("B2", "B3");
		block.stack("B2", "B3");
		assertTrue("1_4_3", block.isClear("B2"));
		assertTrue("1_4_3", block.isClear("B5"));
		assertTrue("1_4_3", block.isOn("B2", "B3"));
		assertTrue("1_4_3", block.isOn("B5", "B6"));
		assertTrue("1_4_3", block.isOntable("B3"));
		assertTrue("1_4_3", block.isOntable("B6"));
	}

	@Test
	public void test300() throws Exception {
		System.out.println("Test case 300");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		assertTrue("1_4_4", block.isClear("B2"));
		assertTrue("1_4_4", block.isClear("B3"));
		assertTrue("1_4_4", block.isOn("B2", "B5"));
		assertTrue("1_4_4", block.isOn("B5", "B6"));
		assertTrue("1_4_4", block.isOntable("B3"));
		assertTrue("1_4_4", block.isOntable("B6"));
		block.pickup("B3");
		assertTrue("1_4_4_1", block.isClear("B2"));
		assertTrue("1_4_4_1", block.isHolding("B3"));
		assertTrue("1_4_4_1", block.isOn("B2", "B5"));
		assertTrue("1_4_4_1", block.isOn("B5", "B6"));
		assertTrue("1_4_4_1", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test 1_4_4_1_1: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_4_1_1", block.isClear("B2"));
		assertTrue("1_4_4_1_1", block.isHolding("B3"));
		assertTrue("1_4_4_1_1", block.isOn("B2", "B5"));
		assertTrue("1_4_4_1_1", block.isOn("B5", "B6"));
		assertTrue("1_4_4_1_1", block.isOntable("B6"));
	}

	@Test
	public void test301() throws Exception {
		System.out.println("Test case 301");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.putdown("B3");
		assertTrue("1_4_4_1_2", block.isClear("B2"));
		assertTrue("1_4_4_1_2", block.isClear("B3"));
		assertTrue("1_4_4_1_2", block.isOn("B2", "B5"));
		assertTrue("1_4_4_1_2", block.isOn("B5", "B6"));
		assertTrue("1_4_4_1_2", block.isOntable("B3"));
		assertTrue("1_4_4_1_2", block.isOntable("B6"));
	}

	@Test
	public void test302() throws Exception {
		System.out.println("Test case 302");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		assertTrue("1_4_4_1_3", block.isClear("B3"));
		assertTrue("1_4_4_1_3", block.isOn("B2", "B5"));
		assertTrue("1_4_4_1_3", block.isOn("B3", "B2"));
		assertTrue("1_4_4_1_3", block.isOn("B5", "B6"));
		assertTrue("1_4_4_1_3", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test 1_4_4_1_3_1: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_4_1_3_1", block.isClear("B3"));
		assertTrue("1_4_4_1_3_1", block.isOn("B2", "B5"));
		assertTrue("1_4_4_1_3_1", block.isOn("B3", "B2"));
		assertTrue("1_4_4_1_3_1", block.isOn("B5", "B6"));
		assertTrue("1_4_4_1_3_1", block.isOntable("B6"));
	}

	@Test
	public void test303() throws Exception {
		System.out.println("Test case 303");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test 1_4_4_1_3_2: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_4_1_3_2", block.isClear("B3"));
		assertTrue("1_4_4_1_3_2", block.isOn("B2", "B5"));
		assertTrue("1_4_4_1_3_2", block.isOn("B3", "B2"));
		assertTrue("1_4_4_1_3_2", block.isOn("B5", "B6"));
		assertTrue("1_4_4_1_3_2", block.isOntable("B6"));
	}

	@Test
	public void test304() throws Exception {
		System.out.println("Test case 304");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test 1_4_4_1_3_3: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_4_1_3_3", block.isClear("B3"));
		assertTrue("1_4_4_1_3_3", block.isOn("B2", "B5"));
		assertTrue("1_4_4_1_3_3", block.isOn("B3", "B2"));
		assertTrue("1_4_4_1_3_3", block.isOn("B5", "B6"));
		assertTrue("1_4_4_1_3_3", block.isOntable("B6"));
	}

	@Test
	public void test305() throws Exception {
		System.out.println("Test case 305");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B3", "B2");
		assertTrue("1_4_4_1_3_4", block.isClear("B2"));
		assertTrue("1_4_4_1_3_4", block.isHolding("B3"));
		assertTrue("1_4_4_1_3_4", block.isOn("B2", "B5"));
		assertTrue("1_4_4_1_3_4", block.isOn("B5", "B6"));
		assertTrue("1_4_4_1_3_4", block.isOntable("B6"));
	}

	@Test
	public void test306() throws Exception {
		System.out.println("Test case 306");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test 1_4_4_1_4: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_4_1_4", block.isClear("B2"));
		assertTrue("1_4_4_1_4", block.isHolding("B3"));
		assertTrue("1_4_4_1_4", block.isOn("B2", "B5"));
		assertTrue("1_4_4_1_4", block.isOn("B5", "B6"));
		assertTrue("1_4_4_1_4", block.isOntable("B6"));
	}

	@Test
	public void test307() throws Exception {
		System.out.println("Test case 307");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test 1_4_4_2: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_4_2", block.isClear("B2"));
		assertTrue("1_4_4_2", block.isClear("B3"));
		assertTrue("1_4_4_2", block.isOn("B2", "B5"));
		assertTrue("1_4_4_2", block.isOn("B5", "B6"));
		assertTrue("1_4_4_2", block.isOntable("B3"));
		assertTrue("1_4_4_2", block.isOntable("B6"));
	}

	@Test
	public void test308() throws Exception {
		System.out.println("Test case 308");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test 1_4_4_3: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_4_3", block.isClear("B2"));
		assertTrue("1_4_4_3", block.isClear("B3"));
		assertTrue("1_4_4_3", block.isOn("B2", "B5"));
		assertTrue("1_4_4_3", block.isOn("B5", "B6"));
		assertTrue("1_4_4_3", block.isOntable("B3"));
		assertTrue("1_4_4_3", block.isOntable("B6"));
	}

	@Test
	public void test309() throws Exception {
		System.out.println("Test case 309");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.unstack("B2", "B5");
		assertTrue("1_4_4_4", block.isClear("B3"));
		assertTrue("1_4_4_4", block.isClear("B5"));
		assertTrue("1_4_4_4", block.isHolding("B2"));
		assertTrue("1_4_4_4", block.isOn("B5", "B6"));
		assertTrue("1_4_4_4", block.isOntable("B3"));
		assertTrue("1_4_4_4", block.isOntable("B6"));
	}

	@Test
	public void test310() throws Exception {
		System.out.println("Test case 310");
		block.unstack("B2", "B3");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test 1_4_5: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_4_5", block.isClear("B3"));
		assertTrue("1_4_5", block.isClear("B5"));
		assertTrue("1_4_5", block.isHolding("B2"));
		assertTrue("1_4_5", block.isOn("B5", "B6"));
		assertTrue("1_4_5", block.isOntable("B3"));
		assertTrue("1_4_5", block.isOntable("B6"));
	}

	@Test
	public void test311() throws Exception {
		System.out.println("Test case 311");
		block.unstack("B5", "B6");
		assertTrue("1_5", block.isClear("B2"));
		assertTrue("1_5", block.isClear("B6"));
		assertTrue("1_5", block.isHolding("B5"));
		assertTrue("1_5", block.isOn("B2", "B3"));
		assertTrue("1_5", block.isOntable("B3"));
		assertTrue("1_5", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test 1_5_1: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_1", block.isClear("B2"));
		assertTrue("1_5_1", block.isClear("B6"));
		assertTrue("1_5_1", block.isHolding("B5"));
		assertTrue("1_5_1", block.isOn("B2", "B3"));
		assertTrue("1_5_1", block.isOntable("B3"));
		assertTrue("1_5_1", block.isOntable("B6"));
	}

	@Test
	public void test312() throws Exception {
		System.out.println("Test case 312");
		block.unstack("B5", "B6");
		block.putdown("B5");
		assertTrue("1_5_2", block.isClear("B2"));
		assertTrue("1_5_2", block.isClear("B5"));
		assertTrue("1_5_2", block.isClear("B6"));
		assertTrue("1_5_2", block.isOn("B2", "B3"));
		assertTrue("1_5_2", block.isOntable("B3"));
		assertTrue("1_5_2", block.isOntable("B5"));
		assertTrue("1_5_2", block.isOntable("B6"));
		block.pickup("B5");
		assertTrue("1_5_2_1", block.isClear("B2"));
		assertTrue("1_5_2_1", block.isClear("B6"));
		assertTrue("1_5_2_1", block.isHolding("B5"));
		assertTrue("1_5_2_1", block.isOn("B2", "B3"));
		assertTrue("1_5_2_1", block.isOntable("B3"));
		assertTrue("1_5_2_1", block.isOntable("B6"));
	}

	@Test
	public void test313() throws Exception {
		System.out.println("Test case 313");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		assertTrue("1_5_2_2", block.isClear("B2"));
		assertTrue("1_5_2_2", block.isClear("B5"));
		assertTrue("1_5_2_2", block.isHolding("B6"));
		assertTrue("1_5_2_2", block.isOn("B2", "B3"));
		assertTrue("1_5_2_2", block.isOntable("B3"));
		assertTrue("1_5_2_2", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test 1_5_2_2_1: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_2_2_1", block.isClear("B2"));
		assertTrue("1_5_2_2_1", block.isClear("B5"));
		assertTrue("1_5_2_2_1", block.isHolding("B6"));
		assertTrue("1_5_2_2_1", block.isOn("B2", "B3"));
		assertTrue("1_5_2_2_1", block.isOntable("B3"));
		assertTrue("1_5_2_2_1", block.isOntable("B5"));
	}

	@Test
	public void test314() throws Exception {
		System.out.println("Test case 314");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.putdown("B6");
		assertTrue("1_5_2_2_2", block.isClear("B2"));
		assertTrue("1_5_2_2_2", block.isClear("B5"));
		assertTrue("1_5_2_2_2", block.isClear("B6"));
		assertTrue("1_5_2_2_2", block.isOn("B2", "B3"));
		assertTrue("1_5_2_2_2", block.isOntable("B3"));
		assertTrue("1_5_2_2_2", block.isOntable("B5"));
		assertTrue("1_5_2_2_2", block.isOntable("B6"));
	}

	@Test
	public void test315() throws Exception {
		System.out.println("Test case 315");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		assertTrue("1_5_2_2_3", block.isClear("B5"));
		assertTrue("1_5_2_2_3", block.isClear("B6"));
		assertTrue("1_5_2_2_3", block.isOn("B2", "B3"));
		assertTrue("1_5_2_2_3", block.isOn("B6", "B2"));
		assertTrue("1_5_2_2_3", block.isOntable("B3"));
		assertTrue("1_5_2_2_3", block.isOntable("B5"));
		block.pickup("B5");
		assertTrue("1_5_2_2_3_1", block.isClear("B6"));
		assertTrue("1_5_2_2_3_1", block.isHolding("B5"));
		assertTrue("1_5_2_2_3_1", block.isOn("B2", "B3"));
		assertTrue("1_5_2_2_3_1", block.isOn("B6", "B2"));
		assertTrue("1_5_2_2_3_1", block.isOntable("B3"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test316() throws Exception {
		System.out.println("Test case 316");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.putdown("B5");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test317() throws Exception {
		System.out.println("Test case 317");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B6");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B3"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test318() throws Exception {
		System.out.println("Test case 318");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B6");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test319() throws Exception {
		System.out.println("Test case 319");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B6");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B5", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test320() throws Exception {
		System.out.println("Test case 320");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		block.stack("B5", "B6");
		block.unstack("B5", "B6");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test321() throws Exception {
		System.out.println("Test case 321");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B5");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B3"));
	}

	@Test
	public void test322() throws Exception {
		System.out.println("Test case 322");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test 1_5_2_2_3_2: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_2_2_3_2", block.isClear("B5"));
		assertTrue("1_5_2_2_3_2", block.isClear("B6"));
		assertTrue("1_5_2_2_3_2", block.isOn("B2", "B3"));
		assertTrue("1_5_2_2_3_2", block.isOn("B6", "B2"));
		assertTrue("1_5_2_2_3_2", block.isOntable("B3"));
		assertTrue("1_5_2_2_3_2", block.isOntable("B5"));
	}

	@Test
	public void test323() throws Exception {
		System.out.println("Test case 323");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test 1_5_2_2_3_3: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_2_2_3_3", block.isClear("B5"));
		assertTrue("1_5_2_2_3_3", block.isClear("B6"));
		assertTrue("1_5_2_2_3_3", block.isOn("B2", "B3"));
		assertTrue("1_5_2_2_3_3", block.isOn("B6", "B2"));
		assertTrue("1_5_2_2_3_3", block.isOntable("B3"));
		assertTrue("1_5_2_2_3_3", block.isOntable("B5"));
	}

	@Test
	public void test324() throws Exception {
		System.out.println("Test case 324");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.unstack("B6", "B2");
		assertTrue("1_5_2_2_3_4", block.isClear("B2"));
		assertTrue("1_5_2_2_3_4", block.isClear("B5"));
		assertTrue("1_5_2_2_3_4", block.isHolding("B6"));
		assertTrue("1_5_2_2_3_4", block.isOn("B2", "B3"));
		assertTrue("1_5_2_2_3_4", block.isOntable("B3"));
		assertTrue("1_5_2_2_3_4", block.isOntable("B5"));
	}

	@Test
	public void test325() throws Exception {
		System.out.println("Test case 325");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		assertTrue("1_5_2_2_4", block.isClear("B2"));
		assertTrue("1_5_2_2_4", block.isClear("B6"));
		assertTrue("1_5_2_2_4", block.isOn("B2", "B3"));
		assertTrue("1_5_2_2_4", block.isOn("B6", "B5"));
		assertTrue("1_5_2_2_4", block.isOntable("B3"));
		assertTrue("1_5_2_2_4", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test 1_5_2_2_4_1: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_2_2_4_1", block.isClear("B2"));
		assertTrue("1_5_2_2_4_1", block.isClear("B6"));
		assertTrue("1_5_2_2_4_1", block.isOn("B2", "B3"));
		assertTrue("1_5_2_2_4_1", block.isOn("B6", "B5"));
		assertTrue("1_5_2_2_4_1", block.isOntable("B3"));
		assertTrue("1_5_2_2_4_1", block.isOntable("B5"));
	}

	@Test
	public void test326() throws Exception {
		System.out.println("Test case 326");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test 1_5_2_2_4_2: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_2_2_4_2", block.isClear("B2"));
		assertTrue("1_5_2_2_4_2", block.isClear("B6"));
		assertTrue("1_5_2_2_4_2", block.isOn("B2", "B3"));
		assertTrue("1_5_2_2_4_2", block.isOn("B6", "B5"));
		assertTrue("1_5_2_2_4_2", block.isOntable("B3"));
		assertTrue("1_5_2_2_4_2", block.isOntable("B5"));
	}

	@Test
	public void test327() throws Exception {
		System.out.println("Test case 327");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test 1_5_2_2_4_3: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_2_2_4_3", block.isClear("B2"));
		assertTrue("1_5_2_2_4_3", block.isClear("B6"));
		assertTrue("1_5_2_2_4_3", block.isOn("B2", "B3"));
		assertTrue("1_5_2_2_4_3", block.isOn("B6", "B5"));
		assertTrue("1_5_2_2_4_3", block.isOntable("B3"));
		assertTrue("1_5_2_2_4_3", block.isOntable("B5"));
	}

	@Test
	public void test328() throws Exception {
		System.out.println("Test case 328");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B2", "B3");
		assertTrue("1_5_2_2_4_4", block.isClear("B3"));
		assertTrue("1_5_2_2_4_4", block.isClear("B6"));
		assertTrue("1_5_2_2_4_4", block.isHolding("B2"));
		assertTrue("1_5_2_2_4_4", block.isOn("B6", "B5"));
		assertTrue("1_5_2_2_4_4", block.isOntable("B3"));
		assertTrue("1_5_2_2_4_4", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test329() throws Exception {
		System.out.println("Test case 329");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B2", "B3");
		block.putdown("B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test330() throws Exception {
		System.out.println("Test case 330");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B3"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test331() throws Exception {
		System.out.println("Test case 331");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
		block.pickup("B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test332() throws Exception {
		System.out.println("Test case 332");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.putdown("B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test333() throws Exception {
		System.out.println("Test case 333");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B2");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test334() throws Exception {
		System.out.println("Test case 334");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test335() throws Exception {
		System.out.println("Test case 335");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B2");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test336() throws Exception {
		System.out.println("Test case 336");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B3", "B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test337() throws Exception {
		System.out.println("Test case 337");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test338() throws Exception {
		System.out.println("Test case 338");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test339() throws Exception {
		System.out.println("Test case 339");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test340() throws Exception {
		System.out.println("Test case 340");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.unstack("B2", "B6");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test341() throws Exception {
		System.out.println("Test case 341");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B2", "B3");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B6", "B5"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test342() throws Exception {
		System.out.println("Test case 342");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B6", "B5");
		assertTrue("1_5_2_2_4_5", block.isClear("B2"));
		assertTrue("1_5_2_2_4_5", block.isClear("B5"));
		assertTrue("1_5_2_2_4_5", block.isHolding("B6"));
		assertTrue("1_5_2_2_4_5", block.isOn("B2", "B3"));
		assertTrue("1_5_2_2_4_5", block.isOntable("B3"));
		assertTrue("1_5_2_2_4_5", block.isOntable("B5"));
	}

	@Test
	public void test343() throws Exception {
		System.out.println("Test case 343");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.pickup("B6");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test 1_5_2_2_5: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_2_2_5", block.isClear("B2"));
		assertTrue("1_5_2_2_5", block.isClear("B5"));
		assertTrue("1_5_2_2_5", block.isHolding("B6"));
		assertTrue("1_5_2_2_5", block.isOn("B2", "B3"));
		assertTrue("1_5_2_2_5", block.isOntable("B3"));
		assertTrue("1_5_2_2_5", block.isOntable("B5"));
	}

	@Test
	public void test344() throws Exception {
		System.out.println("Test case 344");
		block.unstack("B5", "B6");
		block.putdown("B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test 1_5_2_3: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_2_3", block.isClear("B2"));
		assertTrue("1_5_2_3", block.isClear("B5"));
		assertTrue("1_5_2_3", block.isClear("B6"));
		assertTrue("1_5_2_3", block.isOn("B2", "B3"));
		assertTrue("1_5_2_3", block.isOntable("B3"));
		assertTrue("1_5_2_3", block.isOntable("B5"));
		assertTrue("1_5_2_3", block.isOntable("B6"));
	}

	@Test
	public void test345() throws Exception {
		System.out.println("Test case 345");
		block.unstack("B5", "B6");
		block.putdown("B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test 1_5_2_4: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_2_4", block.isClear("B2"));
		assertTrue("1_5_2_4", block.isClear("B5"));
		assertTrue("1_5_2_4", block.isClear("B6"));
		assertTrue("1_5_2_4", block.isOn("B2", "B3"));
		assertTrue("1_5_2_4", block.isOntable("B3"));
		assertTrue("1_5_2_4", block.isOntable("B5"));
		assertTrue("1_5_2_4", block.isOntable("B6"));
	}

	@Test
	public void test346() throws Exception {
		System.out.println("Test case 346");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		assertTrue("1_5_2_5", block.isClear("B3"));
		assertTrue("1_5_2_5", block.isClear("B5"));
		assertTrue("1_5_2_5", block.isClear("B6"));
		assertTrue("1_5_2_5", block.isHolding("B2"));
		assertTrue("1_5_2_5", block.isOntable("B3"));
		assertTrue("1_5_2_5", block.isOntable("B5"));
		assertTrue("1_5_2_5", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test 1_5_2_5_1: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_2_5_1", block.isClear("B3"));
		assertTrue("1_5_2_5_1", block.isClear("B5"));
		assertTrue("1_5_2_5_1", block.isClear("B6"));
		assertTrue("1_5_2_5_1", block.isHolding("B2"));
		assertTrue("1_5_2_5_1", block.isOntable("B3"));
		assertTrue("1_5_2_5_1", block.isOntable("B5"));
		assertTrue("1_5_2_5_1", block.isOntable("B6"));
	}

	@Test
	public void test347() throws Exception {
		System.out.println("Test case 347");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.putdown("B2");
		assertTrue("1_5_2_5_2", block.isClear("B2"));
		assertTrue("1_5_2_5_2", block.isClear("B3"));
		assertTrue("1_5_2_5_2", block.isClear("B5"));
		assertTrue("1_5_2_5_2", block.isClear("B6"));
		assertTrue("1_5_2_5_2", block.isOntable("B2"));
		assertTrue("1_5_2_5_2", block.isOntable("B3"));
		assertTrue("1_5_2_5_2", block.isOntable("B5"));
		assertTrue("1_5_2_5_2", block.isOntable("B6"));
	}

	@Test
	public void test348() throws Exception {
		System.out.println("Test case 348");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B3");
		assertTrue("1_5_2_5_3", block.isClear("B2"));
		assertTrue("1_5_2_5_3", block.isClear("B5"));
		assertTrue("1_5_2_5_3", block.isClear("B6"));
		assertTrue("1_5_2_5_3", block.isOn("B2", "B3"));
		assertTrue("1_5_2_5_3", block.isOntable("B3"));
		assertTrue("1_5_2_5_3", block.isOntable("B5"));
		assertTrue("1_5_2_5_3", block.isOntable("B6"));
	}

	@Test
	public void test349() throws Exception {
		System.out.println("Test case 349");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		assertTrue("1_5_2_5_4", block.isClear("B2"));
		assertTrue("1_5_2_5_4", block.isClear("B3"));
		assertTrue("1_5_2_5_4", block.isClear("B6"));
		assertTrue("1_5_2_5_4", block.isOn("B2", "B5"));
		assertTrue("1_5_2_5_4", block.isOntable("B3"));
		assertTrue("1_5_2_5_4", block.isOntable("B5"));
		assertTrue("1_5_2_5_4", block.isOntable("B6"));
		block.pickup("B3");
		assertTrue("1_5_2_5_4_1", block.isClear("B2"));
		assertTrue("1_5_2_5_4_1", block.isClear("B6"));
		assertTrue("1_5_2_5_4_1", block.isHolding("B3"));
		assertTrue("1_5_2_5_4_1", block.isOn("B2", "B5"));
		assertTrue("1_5_2_5_4_1", block.isOntable("B5"));
		assertTrue("1_5_2_5_4_1", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test350() throws Exception {
		System.out.println("Test case 350");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.putdown("B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test351() throws Exception {
		System.out.println("Test case 351");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
		block.pickup("B6");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test352() throws Exception {
		System.out.println("Test case 352");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.pickup("B6");
		block.putdown("B6");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test353() throws Exception {
		System.out.println("Test case 353");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.pickup("B6");
		block.stack("B6", "B3");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test354() throws Exception {
		System.out.println("Test case 354");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.pickup("B6");
		block.stack("B6", "B3");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test355() throws Exception {
		System.out.println("Test case 355");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.pickup("B6");
		block.stack("B6", "B3");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test356() throws Exception {
		System.out.println("Test case 356");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.unstack("B6", "B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test357() throws Exception {
		System.out.println("Test case 357");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.pickup("B6");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test358() throws Exception {
		System.out.println("Test case 358");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test359() throws Exception {
		System.out.println("Test case 359");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test360() throws Exception {
		System.out.println("Test case 360");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B3", "B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test361() throws Exception {
		System.out.println("Test case 361");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test362() throws Exception {
		System.out.println("Test case 362");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test363() throws Exception {
		System.out.println("Test case 363");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test364() throws Exception {
		System.out.println("Test case 364");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.unstack("B2", "B5");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test365() throws Exception {
		System.out.println("Test case 365");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.unstack("B3", "B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test366() throws Exception {
		System.out.println("Test case 366");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B3");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test367() throws Exception {
		System.out.println("Test case 367");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		assertTrue("1_5_2_5_4_2", block.isClear("B2"));
		assertTrue("1_5_2_5_4_2", block.isClear("B3"));
		assertTrue("1_5_2_5_4_2", block.isHolding("B6"));
		assertTrue("1_5_2_5_4_2", block.isOn("B2", "B5"));
		assertTrue("1_5_2_5_4_2", block.isOntable("B3"));
		assertTrue("1_5_2_5_4_2", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test368() throws Exception {
		System.out.println("Test case 368");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.putdown("B6");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test369() throws Exception {
		System.out.println("Test case 369");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
		block.pickup("B3");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test370() throws Exception {
		System.out.println("Test case 370");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.putdown("B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test371() throws Exception {
		System.out.println("Test case 371");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test372() throws Exception {
		System.out.println("Test case 372");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test373() throws Exception {
		System.out.println("Test case 373");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B3", "B6"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test374() throws Exception {
		System.out.println("Test case 374");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		block.stack("B3", "B6");
		block.unstack("B3", "B6");
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test375() throws Exception {
		System.out.println("Test case 375");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.pickup("B3");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test376() throws Exception {
		System.out.println("Test case 376");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test377() throws Exception {
		System.out.println("Test case 377");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B6", "B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test378() throws Exception {
		System.out.println("Test case 378");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B2");
		block.unstack("B6", "B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test379() throws Exception {
		System.out.println("Test case 379");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test380() throws Exception {
		System.out.println("Test case 380");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test381() throws Exception {
		System.out.println("Test case 381");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test382() throws Exception {
		System.out.println("Test case 382");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.unstack("B2", "B5");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B6", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test383() throws Exception {
		System.out.println("Test case 383");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		block.stack("B6", "B3");
		block.unstack("B6", "B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test384() throws Exception {
		System.out.println("Test case 384");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.pickup("B6");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B6"));
		assertTrue("", block.isOn("B2", "B5"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
	}

	@Test
	public void test385() throws Exception {
		System.out.println("Test case 385");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test 1_5_2_5_4_3: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_2_5_4_3", block.isClear("B2"));
		assertTrue("1_5_2_5_4_3", block.isClear("B3"));
		assertTrue("1_5_2_5_4_3", block.isClear("B6"));
		assertTrue("1_5_2_5_4_3", block.isOn("B2", "B5"));
		assertTrue("1_5_2_5_4_3", block.isOntable("B3"));
		assertTrue("1_5_2_5_4_3", block.isOntable("B5"));
		assertTrue("1_5_2_5_4_3", block.isOntable("B6"));
	}

	@Test
	public void test386() throws Exception {
		System.out.println("Test case 386");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test 1_5_2_5_4_4: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_2_5_4_4", block.isClear("B2"));
		assertTrue("1_5_2_5_4_4", block.isClear("B3"));
		assertTrue("1_5_2_5_4_4", block.isClear("B6"));
		assertTrue("1_5_2_5_4_4", block.isOn("B2", "B5"));
		assertTrue("1_5_2_5_4_4", block.isOntable("B3"));
		assertTrue("1_5_2_5_4_4", block.isOntable("B5"));
		assertTrue("1_5_2_5_4_4", block.isOntable("B6"));
	}

	@Test
	public void test387() throws Exception {
		System.out.println("Test case 387");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B5");
		block.unstack("B2", "B5");
		assertTrue("1_5_2_5_4_5", block.isClear("B3"));
		assertTrue("1_5_2_5_4_5", block.isClear("B5"));
		assertTrue("1_5_2_5_4_5", block.isClear("B6"));
		assertTrue("1_5_2_5_4_5", block.isHolding("B2"));
		assertTrue("1_5_2_5_4_5", block.isOntable("B3"));
		assertTrue("1_5_2_5_4_5", block.isOntable("B5"));
		assertTrue("1_5_2_5_4_5", block.isOntable("B6"));
	}

	@Test
	public void test388() throws Exception {
		System.out.println("Test case 388");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		assertTrue("1_5_2_5_5", block.isClear("B2"));
		assertTrue("1_5_2_5_5", block.isClear("B3"));
		assertTrue("1_5_2_5_5", block.isClear("B5"));
		assertTrue("1_5_2_5_5", block.isOn("B2", "B6"));
		assertTrue("1_5_2_5_5", block.isOntable("B3"));
		assertTrue("1_5_2_5_5", block.isOntable("B5"));
		assertTrue("1_5_2_5_5", block.isOntable("B6"));
		block.pickup("B3");
		assertTrue("1_5_2_5_5_1", block.isClear("B2"));
		assertTrue("1_5_2_5_5_1", block.isClear("B5"));
		assertTrue("1_5_2_5_5_1", block.isHolding("B3"));
		assertTrue("1_5_2_5_5_1", block.isOn("B2", "B6"));
		assertTrue("1_5_2_5_5_1", block.isOntable("B5"));
		assertTrue("1_5_2_5_5_1", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test389() throws Exception {
		System.out.println("Test case 389");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.putdown("B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test390() throws Exception {
		System.out.println("Test case 390");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B2");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
		block.pickup("B5");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test391() throws Exception {
		System.out.println("Test case 391");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.pickup("B5");
		block.putdown("B5");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test392() throws Exception {
		System.out.println("Test case 392");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.pickup("B5");
		block.stack("B5", "B3");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test393() throws Exception {
		System.out.println("Test case 393");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.pickup("B5");
		block.stack("B5", "B3");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test394() throws Exception {
		System.out.println("Test case 394");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.pickup("B5");
		block.stack("B5", "B3");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test395() throws Exception {
		System.out.println("Test case 395");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.pickup("B5");
		block.stack("B5", "B3");
		block.unstack("B5", "B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test396() throws Exception {
		System.out.println("Test case 396");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.pickup("B5");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test397() throws Exception {
		System.out.println("Test case 397");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test398() throws Exception {
		System.out.println("Test case 398");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B2");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B2"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test399() throws Exception {
		System.out.println("Test case 399");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B2");
		block.unstack("B3", "B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test400() throws Exception {
		System.out.println("Test case 400");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test401() throws Exception {
		System.out.println("Test case 401");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test402() throws Exception {
		System.out.println("Test case 402");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test403() throws Exception {
		System.out.println("Test case 403");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.unstack("B2", "B6");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B6"));
		assertTrue("", block.isHolding("B2"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test404() throws Exception {
		System.out.println("Test case 404");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.unstack("B3", "B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test405() throws Exception {
		System.out.println("Test case 405");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B3");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test406() throws Exception {
		System.out.println("Test case 406");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		assertTrue("1_5_2_5_5_2", block.isClear("B2"));
		assertTrue("1_5_2_5_5_2", block.isClear("B3"));
		assertTrue("1_5_2_5_5_2", block.isHolding("B5"));
		assertTrue("1_5_2_5_5_2", block.isOn("B2", "B6"));
		assertTrue("1_5_2_5_5_2", block.isOntable("B3"));
		assertTrue("1_5_2_5_5_2", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test407() throws Exception {
		System.out.println("Test case 407");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.putdown("B5");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B5"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test408() throws Exception {
		System.out.println("Test case 408");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
		block.pickup("B3");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test409() throws Exception {
		System.out.println("Test case 409");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.putdown("B3");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test410() throws Exception {
		System.out.println("Test case 410");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B6"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test411() throws Exception {
		System.out.println("Test case 411");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test412() throws Exception {
		System.out.println("Test case 412");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B3", "B5"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test413() throws Exception {
		System.out.println("Test case 413");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		block.pickup("B3");
		block.stack("B3", "B5");
		block.unstack("B3", "B5");
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test414() throws Exception {
		System.out.println("Test case 414");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		block.pickup("B3");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isHolding("B3"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test415() throws Exception {
		System.out.println("Test case 415");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test416() throws Exception {
		System.out.println("Test case 416");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B2"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test417() throws Exception {
		System.out.println("Test case 417");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B2");
		block.unstack("B5", "B2");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test418() throws Exception {
		System.out.println("Test case 418");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		block.stack("B5", "B3");
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOn("B5", "B3"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test419() throws Exception {
		System.out.println("Test case 419");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.pickup("B5");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test : an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("", block.isClear("B2"));
		assertTrue("", block.isClear("B3"));
		assertTrue("", block.isHolding("B5"));
		assertTrue("", block.isOn("B2", "B6"));
		assertTrue("", block.isOntable("B3"));
		assertTrue("", block.isOntable("B6"));
	}

	@Test
	public void test420() throws Exception {
		System.out.println("Test case 420");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test 1_5_2_5_5_3: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_2_5_5_3", block.isClear("B2"));
		assertTrue("1_5_2_5_5_3", block.isClear("B3"));
		assertTrue("1_5_2_5_5_3", block.isClear("B5"));
		assertTrue("1_5_2_5_5_3", block.isOn("B2", "B6"));
		assertTrue("1_5_2_5_5_3", block.isOntable("B3"));
		assertTrue("1_5_2_5_5_3", block.isOntable("B5"));
		assertTrue("1_5_2_5_5_3", block.isOntable("B6"));
	}

	@Test
	public void test421() throws Exception {
		System.out.println("Test case 421");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test 1_5_2_5_5_4: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_2_5_5_4", block.isClear("B2"));
		assertTrue("1_5_2_5_5_4", block.isClear("B3"));
		assertTrue("1_5_2_5_5_4", block.isClear("B5"));
		assertTrue("1_5_2_5_5_4", block.isOn("B2", "B6"));
		assertTrue("1_5_2_5_5_4", block.isOntable("B3"));
		assertTrue("1_5_2_5_5_4", block.isOntable("B5"));
		assertTrue("1_5_2_5_5_4", block.isOntable("B6"));
	}

	@Test
	public void test422() throws Exception {
		System.out.println("Test case 422");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		block.stack("B2", "B6");
		block.unstack("B2", "B6");
		assertTrue("1_5_2_5_5_5", block.isClear("B3"));
		assertTrue("1_5_2_5_5_5", block.isClear("B5"));
		assertTrue("1_5_2_5_5_5", block.isClear("B6"));
		assertTrue("1_5_2_5_5_5", block.isHolding("B2"));
		assertTrue("1_5_2_5_5_5", block.isOntable("B3"));
		assertTrue("1_5_2_5_5_5", block.isOntable("B5"));
		assertTrue("1_5_2_5_5_5", block.isOntable("B6"));
	}

	@Test
	public void test423() throws Exception {
		System.out.println("Test case 423");
		block.unstack("B5", "B6");
		block.putdown("B5");
		block.unstack("B2", "B3");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test 1_5_2_5_6: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_2_5_6", block.isClear("B3"));
		assertTrue("1_5_2_5_6", block.isClear("B5"));
		assertTrue("1_5_2_5_6", block.isClear("B6"));
		assertTrue("1_5_2_5_6", block.isHolding("B2"));
		assertTrue("1_5_2_5_6", block.isOntable("B3"));
		assertTrue("1_5_2_5_6", block.isOntable("B5"));
		assertTrue("1_5_2_5_6", block.isOntable("B6"));
	}

	@Test
	public void test424() throws Exception {
		System.out.println("Test case 424");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		assertTrue("1_5_3", block.isClear("B5"));
		assertTrue("1_5_3", block.isClear("B6"));
		assertTrue("1_5_3", block.isOn("B2", "B3"));
		assertTrue("1_5_3", block.isOn("B5", "B2"));
		assertTrue("1_5_3", block.isOntable("B3"));
		assertTrue("1_5_3", block.isOntable("B6"));
		block.pickup("B6");
		assertTrue("1_5_3_1", block.isClear("B5"));
		assertTrue("1_5_3_1", block.isHolding("B6"));
		assertTrue("1_5_3_1", block.isOn("B2", "B3"));
		assertTrue("1_5_3_1", block.isOn("B5", "B2"));
		assertTrue("1_5_3_1", block.isOntable("B3"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test 1_5_3_1_1: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_3_1_1", block.isClear("B5"));
		assertTrue("1_5_3_1_1", block.isHolding("B6"));
		assertTrue("1_5_3_1_1", block.isOn("B2", "B3"));
		assertTrue("1_5_3_1_1", block.isOn("B5", "B2"));
		assertTrue("1_5_3_1_1", block.isOntable("B3"));
	}

	@Test
	public void test425() throws Exception {
		System.out.println("Test case 425");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.putdown("B6");
		assertTrue("1_5_3_1_2", block.isClear("B5"));
		assertTrue("1_5_3_1_2", block.isClear("B6"));
		assertTrue("1_5_3_1_2", block.isOn("B2", "B3"));
		assertTrue("1_5_3_1_2", block.isOn("B5", "B2"));
		assertTrue("1_5_3_1_2", block.isOntable("B3"));
		assertTrue("1_5_3_1_2", block.isOntable("B6"));
	}

	@Test
	public void test426() throws Exception {
		System.out.println("Test case 426");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B5");
		assertTrue("1_5_3_1_3", block.isClear("B6"));
		assertTrue("1_5_3_1_3", block.isOn("B2", "B3"));
		assertTrue("1_5_3_1_3", block.isOn("B5", "B2"));
		assertTrue("1_5_3_1_3", block.isOn("B6", "B5"));
		assertTrue("1_5_3_1_3", block.isOntable("B3"));
		try {
			block.pickup("B2");
			System.out.println("Test failed at test 1_5_3_1_3_1: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_3_1_3_1", block.isClear("B6"));
		assertTrue("1_5_3_1_3_1", block.isOn("B2", "B3"));
		assertTrue("1_5_3_1_3_1", block.isOn("B5", "B2"));
		assertTrue("1_5_3_1_3_1", block.isOn("B6", "B5"));
		assertTrue("1_5_3_1_3_1", block.isOntable("B3"));
	}

	@Test
	public void test427() throws Exception {
		System.out.println("Test case 427");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B5");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test 1_5_3_1_3_2: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_3_1_3_2", block.isClear("B6"));
		assertTrue("1_5_3_1_3_2", block.isOn("B2", "B3"));
		assertTrue("1_5_3_1_3_2", block.isOn("B5", "B2"));
		assertTrue("1_5_3_1_3_2", block.isOn("B6", "B5"));
		assertTrue("1_5_3_1_3_2", block.isOntable("B3"));
	}

	@Test
	public void test428() throws Exception {
		System.out.println("Test case 428");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B5");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test 1_5_3_1_3_3: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_3_1_3_3", block.isClear("B6"));
		assertTrue("1_5_3_1_3_3", block.isOn("B2", "B3"));
		assertTrue("1_5_3_1_3_3", block.isOn("B5", "B2"));
		assertTrue("1_5_3_1_3_3", block.isOn("B6", "B5"));
		assertTrue("1_5_3_1_3_3", block.isOntable("B3"));
	}

	@Test
	public void test429() throws Exception {
		System.out.println("Test case 429");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		block.stack("B6", "B5");
		block.unstack("B6", "B5");
		assertTrue("1_5_3_1_3_4", block.isClear("B5"));
		assertTrue("1_5_3_1_3_4", block.isHolding("B6"));
		assertTrue("1_5_3_1_3_4", block.isOn("B2", "B3"));
		assertTrue("1_5_3_1_3_4", block.isOn("B5", "B2"));
		assertTrue("1_5_3_1_3_4", block.isOntable("B3"));
	}

	@Test
	public void test430() throws Exception {
		System.out.println("Test case 430");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.pickup("B6");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test 1_5_3_1_4: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_3_1_4", block.isClear("B5"));
		assertTrue("1_5_3_1_4", block.isHolding("B6"));
		assertTrue("1_5_3_1_4", block.isOn("B2", "B3"));
		assertTrue("1_5_3_1_4", block.isOn("B5", "B2"));
		assertTrue("1_5_3_1_4", block.isOntable("B3"));
	}

	@Test
	public void test431() throws Exception {
		System.out.println("Test case 431");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		try {
			block.putdown("B2");
			System.out.println("Test failed at test 1_5_3_2: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_3_2", block.isClear("B5"));
		assertTrue("1_5_3_2", block.isClear("B6"));
		assertTrue("1_5_3_2", block.isOn("B2", "B3"));
		assertTrue("1_5_3_2", block.isOn("B5", "B2"));
		assertTrue("1_5_3_2", block.isOntable("B3"));
		assertTrue("1_5_3_2", block.isOntable("B6"));
	}

	@Test
	public void test432() throws Exception {
		System.out.println("Test case 432");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		try {
			block.stack("B2", "B3");
			System.out.println("Test failed at test 1_5_3_3: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_3_3", block.isClear("B5"));
		assertTrue("1_5_3_3", block.isClear("B6"));
		assertTrue("1_5_3_3", block.isOn("B2", "B3"));
		assertTrue("1_5_3_3", block.isOn("B5", "B2"));
		assertTrue("1_5_3_3", block.isOntable("B3"));
		assertTrue("1_5_3_3", block.isOntable("B6"));
	}

	@Test
	public void test433() throws Exception {
		System.out.println("Test case 433");
		block.unstack("B5", "B6");
		block.stack("B5", "B2");
		block.unstack("B5", "B2");
		assertTrue("1_5_3_4", block.isClear("B2"));
		assertTrue("1_5_3_4", block.isClear("B6"));
		assertTrue("1_5_3_4", block.isHolding("B5"));
		assertTrue("1_5_3_4", block.isOn("B2", "B3"));
		assertTrue("1_5_3_4", block.isOntable("B3"));
		assertTrue("1_5_3_4", block.isOntable("B6"));
	}

	@Test
	public void test434() throws Exception {
		System.out.println("Test case 434");
		block.unstack("B5", "B6");
		block.stack("B5", "B6");
		assertTrue("1_5_4", block.isClear("B2"));
		assertTrue("1_5_4", block.isClear("B5"));
		assertTrue("1_5_4", block.isOn("B2", "B3"));
		assertTrue("1_5_4", block.isOn("B5", "B6"));
		assertTrue("1_5_4", block.isOntable("B3"));
		assertTrue("1_5_4", block.isOntable("B6"));
	}

	@Test
	public void test435() throws Exception {
		System.out.println("Test case 435");
		block.unstack("B5", "B6");
		try {
			block.unstack("B2", "B3");
			System.out.println("Test failed at test 1_5_5: an expected exception is not thrown!");
			System.exit(1);
		} catch (Exception e) {}
		assertTrue("1_5_5", block.isClear("B2"));
		assertTrue("1_5_5", block.isClear("B6"));
		assertTrue("1_5_5", block.isHolding("B5"));
		assertTrue("1_5_5", block.isOn("B2", "B3"));
		assertTrue("1_5_5", block.isOntable("B3"));
		assertTrue("1_5_5", block.isOntable("B6"));
	}

}
