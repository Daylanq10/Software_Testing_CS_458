//Test code generated by MISTA

using Blocks;
using System;
using NUnit.Framework;

namespace test {

[TestFixture()]
	public class BlockTester_RTD {

		private Block block;
		
	[SetUp()]
		public void Init() {
			block = new Block();
			block.GetClears().Add("B2");
			block.GetClears().Add("B5");
			block.GetOns().Add(new ON("B2", "B3"));
			block.GetOns().Add(new ON("B5", "B6"));
			block.GetOntables().Add("B3");
			block.GetOntables().Add("B6");
		}
		
		private void Assert(bool condition, string errorMessage) {
			if (!condition){
				Console.WriteLine(errorMessage);
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			}
		}

	[Test]
		public void Test1() {
			Console.WriteLine("Test case 1");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test 1_1: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_1");
			Assert.True(block.IsClear("B5"), "1_1");
			Assert.True(block.IsOn("B2", "B3"), "1_1");
			Assert.True(block.IsOn("B5", "B6"), "1_1");
			Assert.True(block.IsOntable("B3"), "1_1");
			Assert.True(block.IsOntable("B6"), "1_1");
		}

	[Test]
		public void Test2() {
			Console.WriteLine("Test case 2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test 1_2: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_2");
			Assert.True(block.IsClear("B5"), "1_2");
			Assert.True(block.IsOn("B2", "B3"), "1_2");
			Assert.True(block.IsOn("B5", "B6"), "1_2");
			Assert.True(block.IsOntable("B3"), "1_2");
			Assert.True(block.IsOntable("B6"), "1_2");
		}

	[Test]
		public void Test3() {
			Console.WriteLine("Test case 3");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test 1_3: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_3");
			Assert.True(block.IsClear("B5"), "1_3");
			Assert.True(block.IsOn("B2", "B3"), "1_3");
			Assert.True(block.IsOn("B5", "B6"), "1_3");
			Assert.True(block.IsOntable("B3"), "1_3");
			Assert.True(block.IsOntable("B6"), "1_3");
		}

	[Test]
		public void Test4() {
			Console.WriteLine("Test case 4");
			block.Unstack("B2", "B3");
			Assert.True(block.IsClear("B3"), "1_4");
			Assert.True(block.IsClear("B5"), "1_4");
			Assert.True(block.IsHolding("B2"), "1_4");
			Assert.True(block.IsOn("B5", "B6"), "1_4");
			Assert.True(block.IsOntable("B3"), "1_4");
			Assert.True(block.IsOntable("B6"), "1_4");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test 1_4_1: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "1_4_1");
			Assert.True(block.IsClear("B5"), "1_4_1");
			Assert.True(block.IsHolding("B2"), "1_4_1");
			Assert.True(block.IsOn("B5", "B6"), "1_4_1");
			Assert.True(block.IsOntable("B3"), "1_4_1");
			Assert.True(block.IsOntable("B6"), "1_4_1");
		}

	[Test]
		public void Test5() {
			Console.WriteLine("Test case 5");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			Assert.True(block.IsClear("B2"), "1_4_2");
			Assert.True(block.IsClear("B3"), "1_4_2");
			Assert.True(block.IsClear("B5"), "1_4_2");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2");
			Assert.True(block.IsOntable("B2"), "1_4_2");
			Assert.True(block.IsOntable("B3"), "1_4_2");
			Assert.True(block.IsOntable("B6"), "1_4_2");
			block.Pickup("B2");
			Assert.True(block.IsClear("B3"), "1_4_2_1");
			Assert.True(block.IsClear("B5"), "1_4_2_1");
			Assert.True(block.IsHolding("B2"), "1_4_2_1");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2_1");
			Assert.True(block.IsOntable("B3"), "1_4_2_1");
			Assert.True(block.IsOntable("B6"), "1_4_2_1");
		}

	[Test]
		public void Test6() {
			Console.WriteLine("Test case 6");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			Assert.True(block.IsClear("B2"), "1_4_2_2");
			Assert.True(block.IsClear("B5"), "1_4_2_2");
			Assert.True(block.IsHolding("B3"), "1_4_2_2");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2_2");
			Assert.True(block.IsOntable("B2"), "1_4_2_2");
			Assert.True(block.IsOntable("B6"), "1_4_2_2");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test 1_4_2_2_1: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_4_2_2_1");
			Assert.True(block.IsClear("B5"), "1_4_2_2_1");
			Assert.True(block.IsHolding("B3"), "1_4_2_2_1");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2_2_1");
			Assert.True(block.IsOntable("B2"), "1_4_2_2_1");
			Assert.True(block.IsOntable("B6"), "1_4_2_2_1");
		}

	[Test]
		public void Test7() {
			Console.WriteLine("Test case 7");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Putdown("B3");
			Assert.True(block.IsClear("B2"), "1_4_2_2_2");
			Assert.True(block.IsClear("B3"), "1_4_2_2_2");
			Assert.True(block.IsClear("B5"), "1_4_2_2_2");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2_2_2");
			Assert.True(block.IsOntable("B2"), "1_4_2_2_2");
			Assert.True(block.IsOntable("B3"), "1_4_2_2_2");
			Assert.True(block.IsOntable("B6"), "1_4_2_2_2");
		}

	[Test]
		public void Test8() {
			Console.WriteLine("Test case 8");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			Assert.True(block.IsClear("B3"), "1_4_2_2_3");
			Assert.True(block.IsClear("B5"), "1_4_2_2_3");
			Assert.True(block.IsOn("B3", "B2"), "1_4_2_2_3");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2_2_3");
			Assert.True(block.IsOntable("B2"), "1_4_2_2_3");
			Assert.True(block.IsOntable("B6"), "1_4_2_2_3");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test 1_4_2_2_3_1: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "1_4_2_2_3_1");
			Assert.True(block.IsClear("B5"), "1_4_2_2_3_1");
			Assert.True(block.IsOn("B3", "B2"), "1_4_2_2_3_1");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2_2_3_1");
			Assert.True(block.IsOntable("B2"), "1_4_2_2_3_1");
			Assert.True(block.IsOntable("B6"), "1_4_2_2_3_1");
		}

	[Test]
		public void Test9() {
			Console.WriteLine("Test case 9");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test 1_4_2_2_3_2: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "1_4_2_2_3_2");
			Assert.True(block.IsClear("B5"), "1_4_2_2_3_2");
			Assert.True(block.IsOn("B3", "B2"), "1_4_2_2_3_2");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2_2_3_2");
			Assert.True(block.IsOntable("B2"), "1_4_2_2_3_2");
			Assert.True(block.IsOntable("B6"), "1_4_2_2_3_2");
		}

	[Test]
		public void Test10() {
			Console.WriteLine("Test case 10");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test 1_4_2_2_3_3: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "1_4_2_2_3_3");
			Assert.True(block.IsClear("B5"), "1_4_2_2_3_3");
			Assert.True(block.IsOn("B3", "B2"), "1_4_2_2_3_3");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2_2_3_3");
			Assert.True(block.IsOntable("B2"), "1_4_2_2_3_3");
			Assert.True(block.IsOntable("B6"), "1_4_2_2_3_3");
		}

	[Test]
		public void Test11() {
			Console.WriteLine("Test case 11");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B3", "B2");
			Assert.True(block.IsClear("B2"), "1_4_2_2_3_4");
			Assert.True(block.IsClear("B5"), "1_4_2_2_3_4");
			Assert.True(block.IsHolding("B3"), "1_4_2_2_3_4");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2_2_3_4");
			Assert.True(block.IsOntable("B2"), "1_4_2_2_3_4");
			Assert.True(block.IsOntable("B6"), "1_4_2_2_3_4");
		}

	[Test]
		public void Test12() {
			Console.WriteLine("Test case 12");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			Assert.True(block.IsClear("B3"), "1_4_2_2_3_5");
			Assert.True(block.IsClear("B6"), "1_4_2_2_3_5");
			Assert.True(block.IsHolding("B5"), "1_4_2_2_3_5");
			Assert.True(block.IsOn("B3", "B2"), "1_4_2_2_3_5");
			Assert.True(block.IsOntable("B2"), "1_4_2_2_3_5");
			Assert.True(block.IsOntable("B6"), "1_4_2_2_3_5");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test13() {
			Console.WriteLine("Test case 13");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
			block.Pickup("B5");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test14() {
			Console.WriteLine("Test case 14");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test15() {
			Console.WriteLine("Test case 15");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Putdown("B6");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test16() {
			Console.WriteLine("Test case 16");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			block.Pickup("B5");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test17() {
			Console.WriteLine("Test case 17");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			block.Putdown("B5");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test18() {
			Console.WriteLine("Test case 18");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test19() {
			Console.WriteLine("Test case 19");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test20() {
			Console.WriteLine("Test case 20");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test21() {
			Console.WriteLine("Test case 21");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			block.Unstack("B5", "B6");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test22() {
			Console.WriteLine("Test case 22");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test23() {
			Console.WriteLine("Test case 23");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test24() {
			Console.WriteLine("Test case 24");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test25() {
			Console.WriteLine("Test case 25");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Unstack("B6", "B3");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test26() {
			Console.WriteLine("Test case 26");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test27() {
			Console.WriteLine("Test case 27");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test28() {
			Console.WriteLine("Test case 28");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test29() {
			Console.WriteLine("Test case 29");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B3", "B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test30() {
			Console.WriteLine("Test case 30");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B6", "B5");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test31() {
			Console.WriteLine("Test case 31");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test32() {
			Console.WriteLine("Test case 32");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test33() {
			Console.WriteLine("Test case 33");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test34() {
			Console.WriteLine("Test case 34");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B3", "B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test35() {
			Console.WriteLine("Test case 35");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
			block.Pickup("B6");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test36() {
			Console.WriteLine("Test case 36");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Putdown("B6");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test37() {
			Console.WriteLine("Test case 37");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test38() {
			Console.WriteLine("Test case 38");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test39() {
			Console.WriteLine("Test case 39");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test40() {
			Console.WriteLine("Test case 40");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B6", "B5");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test41() {
			Console.WriteLine("Test case 41");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test42() {
			Console.WriteLine("Test case 42");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test43() {
			Console.WriteLine("Test case 43");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test44() {
			Console.WriteLine("Test case 44");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Unstack("B5", "B3");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test45() {
			Console.WriteLine("Test case 45");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B6");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test46() {
			Console.WriteLine("Test case 46");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B5", "B6");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test47() {
			Console.WriteLine("Test case 47");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			Assert.True(block.IsClear("B2"), "1_4_2_2_4");
			Assert.True(block.IsClear("B3"), "1_4_2_2_4");
			Assert.True(block.IsOn("B3", "B5"), "1_4_2_2_4");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2_2_4");
			Assert.True(block.IsOntable("B2"), "1_4_2_2_4");
			Assert.True(block.IsOntable("B6"), "1_4_2_2_4");
			block.Pickup("B2");
			Assert.True(block.IsClear("B3"), "1_4_2_2_4_1");
			Assert.True(block.IsHolding("B2"), "1_4_2_2_4_1");
			Assert.True(block.IsOn("B3", "B5"), "1_4_2_2_4_1");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2_2_4_1");
			Assert.True(block.IsOntable("B6"), "1_4_2_2_4_1");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test48() {
			Console.WriteLine("Test case 48");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			block.Putdown("B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test49() {
			Console.WriteLine("Test case 49");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOntable("B6"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test50() {
			Console.WriteLine("Test case 50");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test51() {
			Console.WriteLine("Test case 51");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test52() {
			Console.WriteLine("Test case 52");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			block.Unstack("B2", "B3");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test53() {
			Console.WriteLine("Test case 53");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test54() {
			Console.WriteLine("Test case 54");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test 1_4_2_2_4_2: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_4_2_2_4_2");
			Assert.True(block.IsClear("B3"), "1_4_2_2_4_2");
			Assert.True(block.IsOn("B3", "B5"), "1_4_2_2_4_2");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2_2_4_2");
			Assert.True(block.IsOntable("B2"), "1_4_2_2_4_2");
			Assert.True(block.IsOntable("B6"), "1_4_2_2_4_2");
		}

	[Test]
		public void Test55() {
			Console.WriteLine("Test case 55");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test 1_4_2_2_4_3: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_4_2_2_4_3");
			Assert.True(block.IsClear("B3"), "1_4_2_2_4_3");
			Assert.True(block.IsOn("B3", "B5"), "1_4_2_2_4_3");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2_2_4_3");
			Assert.True(block.IsOntable("B2"), "1_4_2_2_4_3");
			Assert.True(block.IsOntable("B6"), "1_4_2_2_4_3");
		}

	[Test]
		public void Test56() {
			Console.WriteLine("Test case 56");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Unstack("B3", "B5");
			Assert.True(block.IsClear("B2"), "1_4_2_2_4_4");
			Assert.True(block.IsClear("B5"), "1_4_2_2_4_4");
			Assert.True(block.IsHolding("B3"), "1_4_2_2_4_4");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2_2_4_4");
			Assert.True(block.IsOntable("B2"), "1_4_2_2_4_4");
			Assert.True(block.IsOntable("B6"), "1_4_2_2_4_4");
		}

	[Test]
		public void Test57() {
			Console.WriteLine("Test case 57");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Pickup("B3");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test 1_4_2_2_5: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_4_2_2_5");
			Assert.True(block.IsClear("B5"), "1_4_2_2_5");
			Assert.True(block.IsHolding("B3"), "1_4_2_2_5");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2_2_5");
			Assert.True(block.IsOntable("B2"), "1_4_2_2_5");
			Assert.True(block.IsOntable("B6"), "1_4_2_2_5");
		}

	[Test]
		public void Test58() {
			Console.WriteLine("Test case 58");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test 1_4_2_3: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_4_2_3");
			Assert.True(block.IsClear("B3"), "1_4_2_3");
			Assert.True(block.IsClear("B5"), "1_4_2_3");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2_3");
			Assert.True(block.IsOntable("B2"), "1_4_2_3");
			Assert.True(block.IsOntable("B3"), "1_4_2_3");
			Assert.True(block.IsOntable("B6"), "1_4_2_3");
		}

	[Test]
		public void Test59() {
			Console.WriteLine("Test case 59");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test 1_4_2_4: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_4_2_4");
			Assert.True(block.IsClear("B3"), "1_4_2_4");
			Assert.True(block.IsClear("B5"), "1_4_2_4");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2_4");
			Assert.True(block.IsOntable("B2"), "1_4_2_4");
			Assert.True(block.IsOntable("B3"), "1_4_2_4");
			Assert.True(block.IsOntable("B6"), "1_4_2_4");
		}

	[Test]
		public void Test60() {
			Console.WriteLine("Test case 60");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			Assert.True(block.IsClear("B2"), "1_4_2_5");
			Assert.True(block.IsClear("B3"), "1_4_2_5");
			Assert.True(block.IsClear("B6"), "1_4_2_5");
			Assert.True(block.IsHolding("B5"), "1_4_2_5");
			Assert.True(block.IsOntable("B2"), "1_4_2_5");
			Assert.True(block.IsOntable("B3"), "1_4_2_5");
			Assert.True(block.IsOntable("B6"), "1_4_2_5");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test 1_4_2_5_1: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_4_2_5_1");
			Assert.True(block.IsClear("B3"), "1_4_2_5_1");
			Assert.True(block.IsClear("B6"), "1_4_2_5_1");
			Assert.True(block.IsHolding("B5"), "1_4_2_5_1");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_1");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_1");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_1");
		}

	[Test]
		public void Test61() {
			Console.WriteLine("Test case 61");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			Assert.True(block.IsClear("B2"), "1_4_2_5_2");
			Assert.True(block.IsClear("B3"), "1_4_2_5_2");
			Assert.True(block.IsClear("B5"), "1_4_2_5_2");
			Assert.True(block.IsClear("B6"), "1_4_2_5_2");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_2");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_2");
			Assert.True(block.IsOntable("B5"), "1_4_2_5_2");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_2");
			block.Pickup("B2");
			Assert.True(block.IsClear("B3"), "1_4_2_5_2_1");
			Assert.True(block.IsClear("B5"), "1_4_2_5_2_1");
			Assert.True(block.IsClear("B6"), "1_4_2_5_2_1");
			Assert.True(block.IsHolding("B2"), "1_4_2_5_2_1");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_2_1");
			Assert.True(block.IsOntable("B5"), "1_4_2_5_2_1");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_2_1");
		}

	[Test]
		public void Test62() {
			Console.WriteLine("Test case 62");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			Assert.True(block.IsClear("B2"), "1_4_2_5_2_2");
			Assert.True(block.IsClear("B5"), "1_4_2_5_2_2");
			Assert.True(block.IsClear("B6"), "1_4_2_5_2_2");
			Assert.True(block.IsHolding("B3"), "1_4_2_5_2_2");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_2_2");
			Assert.True(block.IsOntable("B5"), "1_4_2_5_2_2");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_2_2");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test63() {
			Console.WriteLine("Test case 63");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Putdown("B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test64() {
			Console.WriteLine("Test case 64");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test65() {
			Console.WriteLine("Test case 65");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
			block.Pickup("B2");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test66() {
			Console.WriteLine("Test case 66");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			block.Putdown("B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test67() {
			Console.WriteLine("Test case 67");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
			block.Pickup("B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test68() {
			Console.WriteLine("Test case 68");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			block.Pickup("B6");
			block.Putdown("B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test69() {
			Console.WriteLine("Test case 69");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test70() {
			Console.WriteLine("Test case 70");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test71() {
			Console.WriteLine("Test case 71");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test72() {
			Console.WriteLine("Test case 72");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Unstack("B6", "B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test73() {
			Console.WriteLine("Test case 73");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			block.Pickup("B6");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test74() {
			Console.WriteLine("Test case 74");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test75() {
			Console.WriteLine("Test case 75");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test76() {
			Console.WriteLine("Test case 76");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			block.Unstack("B2", "B3");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test77() {
			Console.WriteLine("Test case 77");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test78() {
			Console.WriteLine("Test case 78");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B2");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test79() {
			Console.WriteLine("Test case 79");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test80() {
			Console.WriteLine("Test case 80");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Putdown("B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test81() {
			Console.WriteLine("Test case 81");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test82() {
			Console.WriteLine("Test case 82");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test83() {
			Console.WriteLine("Test case 83");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test84() {
			Console.WriteLine("Test case 84");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Unstack("B3", "B5");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test85() {
			Console.WriteLine("Test case 85");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Unstack("B6", "B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test86() {
			Console.WriteLine("Test case 86");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			block.Pickup("B2");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test87() {
			Console.WriteLine("Test case 87");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			block.Putdown("B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test88() {
			Console.WriteLine("Test case 88");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test89() {
			Console.WriteLine("Test case 89");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test90() {
			Console.WriteLine("Test case 90");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test91() {
			Console.WriteLine("Test case 91");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			block.Unstack("B2", "B6");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test92() {
			Console.WriteLine("Test case 92");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test93() {
			Console.WriteLine("Test case 93");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test94() {
			Console.WriteLine("Test case 94");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test95() {
			Console.WriteLine("Test case 95");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Unstack("B6", "B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test96() {
			Console.WriteLine("Test case 96");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test97() {
			Console.WriteLine("Test case 97");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test98() {
			Console.WriteLine("Test case 98");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test99() {
			Console.WriteLine("Test case 99");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Unstack("B3", "B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test100() {
			Console.WriteLine("Test case 100");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
			block.Pickup("B2");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test101() {
			Console.WriteLine("Test case 101");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			block.Putdown("B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test102() {
			Console.WriteLine("Test case 102");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
			block.Pickup("B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B6"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test103() {
			Console.WriteLine("Test case 103");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			block.Pickup("B5");
			block.Putdown("B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test104() {
			Console.WriteLine("Test case 104");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B6"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test105() {
			Console.WriteLine("Test case 105");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test106() {
			Console.WriteLine("Test case 106");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test107() {
			Console.WriteLine("Test case 107");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			block.Unstack("B5", "B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test108() {
			Console.WriteLine("Test case 108");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			block.Pickup("B5");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test109() {
			Console.WriteLine("Test case 109");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test110() {
			Console.WriteLine("Test case 110");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test111() {
			Console.WriteLine("Test case 111");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			block.Unstack("B2", "B3");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test112() {
			Console.WriteLine("Test case 112");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test113() {
			Console.WriteLine("Test case 113");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test114() {
			Console.WriteLine("Test case 114");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test115() {
			Console.WriteLine("Test case 115");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			block.Putdown("B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test116() {
			Console.WriteLine("Test case 116");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test117() {
			Console.WriteLine("Test case 117");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
			block.Pickup("B2");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B6"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test118() {
			Console.WriteLine("Test case 118");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Putdown("B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test119() {
			Console.WriteLine("Test case 119");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B6"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test120() {
			Console.WriteLine("Test case 120");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test121() {
			Console.WriteLine("Test case 121");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test122() {
			Console.WriteLine("Test case 122");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			block.Unstack("B2", "B5");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test123() {
			Console.WriteLine("Test case 123");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test124() {
			Console.WriteLine("Test case 124");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test125() {
			Console.WriteLine("Test case 125");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test126() {
			Console.WriteLine("Test case 126");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			block.Unstack("B5", "B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test127() {
			Console.WriteLine("Test case 127");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test128() {
			Console.WriteLine("Test case 128");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test129() {
			Console.WriteLine("Test case 129");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test130() {
			Console.WriteLine("Test case 130");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Unstack("B3", "B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test131() {
			Console.WriteLine("Test case 131");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B3");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test132() {
			Console.WriteLine("Test case 132");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B5");
			Assert.True(block.IsClear("B2"), "1_4_2_5_2_3");
			Assert.True(block.IsClear("B3"), "1_4_2_5_2_3");
			Assert.True(block.IsClear("B6"), "1_4_2_5_2_3");
			Assert.True(block.IsHolding("B5"), "1_4_2_5_2_3");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_2_3");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_2_3");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_2_3");
		}

	[Test]
		public void Test133() {
			Console.WriteLine("Test case 133");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			Assert.True(block.IsClear("B2"), "1_4_2_5_2_4");
			Assert.True(block.IsClear("B3"), "1_4_2_5_2_4");
			Assert.True(block.IsClear("B5"), "1_4_2_5_2_4");
			Assert.True(block.IsHolding("B6"), "1_4_2_5_2_4");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_2_4");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_2_4");
			Assert.True(block.IsOntable("B5"), "1_4_2_5_2_4");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test134() {
			Console.WriteLine("Test case 134");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Putdown("B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test135() {
			Console.WriteLine("Test case 135");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
			block.Pickup("B3");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test136() {
			Console.WriteLine("Test case 136");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			block.Putdown("B3");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test137() {
			Console.WriteLine("Test case 137");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test138() {
			Console.WriteLine("Test case 138");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			block.Pickup("B5");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test139() {
			Console.WriteLine("Test case 139");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			block.Putdown("B5");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test140() {
			Console.WriteLine("Test case 140");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test141() {
			Console.WriteLine("Test case 141");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test142() {
			Console.WriteLine("Test case 142");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test143() {
			Console.WriteLine("Test case 143");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			block.Unstack("B5", "B3");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test144() {
			Console.WriteLine("Test case 144");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B5");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test145() {
			Console.WriteLine("Test case 145");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test146() {
			Console.WriteLine("Test case 146");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test147() {
			Console.WriteLine("Test case 147");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Unstack("B3", "B6");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test148() {
			Console.WriteLine("Test case 148");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test149() {
			Console.WriteLine("Test case 149");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test150() {
			Console.WriteLine("Test case 150");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			block.Putdown("B5");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test151() {
			Console.WriteLine("Test case 151");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test152() {
			Console.WriteLine("Test case 152");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			block.Pickup("B3");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test153() {
			Console.WriteLine("Test case 153");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			block.Pickup("B3");
			block.Putdown("B3");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test154() {
			Console.WriteLine("Test case 154");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test155() {
			Console.WriteLine("Test case 155");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test156() {
			Console.WriteLine("Test case 156");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test157() {
			Console.WriteLine("Test case 157");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Unstack("B3", "B5");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test158() {
			Console.WriteLine("Test case 158");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			block.Pickup("B3");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test159() {
			Console.WriteLine("Test case 159");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test160() {
			Console.WriteLine("Test case 160");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test161() {
			Console.WriteLine("Test case 161");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			block.Unstack("B5", "B6");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test162() {
			Console.WriteLine("Test case 162");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test163() {
			Console.WriteLine("Test case 163");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test164() {
			Console.WriteLine("Test case 164");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test165() {
			Console.WriteLine("Test case 165");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Unstack("B6", "B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test166() {
			Console.WriteLine("Test case 166");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
			block.Pickup("B2");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test167() {
			Console.WriteLine("Test case 167");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			block.Putdown("B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test168() {
			Console.WriteLine("Test case 168");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test169() {
			Console.WriteLine("Test case 169");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
			block.Pickup("B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test170() {
			Console.WriteLine("Test case 170");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			block.Putdown("B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test171() {
			Console.WriteLine("Test case 171");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test172() {
			Console.WriteLine("Test case 172");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test173() {
			Console.WriteLine("Test case 173");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test174() {
			Console.WriteLine("Test case 174");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			block.Unstack("B5", "B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test175() {
			Console.WriteLine("Test case 175");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test176() {
			Console.WriteLine("Test case 176");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test177() {
			Console.WriteLine("Test case 177");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test178() {
			Console.WriteLine("Test case 178");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			block.Unstack("B2", "B6");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test179() {
			Console.WriteLine("Test case 179");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B2");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test180() {
			Console.WriteLine("Test case 180");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test181() {
			Console.WriteLine("Test case 181");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			block.Putdown("B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test182() {
			Console.WriteLine("Test case 182");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test183() {
			Console.WriteLine("Test case 183");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			block.Pickup("B2");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test184() {
			Console.WriteLine("Test case 184");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			block.Pickup("B2");
			block.Putdown("B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test185() {
			Console.WriteLine("Test case 185");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test186() {
			Console.WriteLine("Test case 186");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test187() {
			Console.WriteLine("Test case 187");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test188() {
			Console.WriteLine("Test case 188");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			block.Unstack("B2", "B5");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test189() {
			Console.WriteLine("Test case 189");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			block.Pickup("B2");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test190() {
			Console.WriteLine("Test case 190");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test191() {
			Console.WriteLine("Test case 191");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test192() {
			Console.WriteLine("Test case 192");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			block.Unstack("B5", "B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test193() {
			Console.WriteLine("Test case 193");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Pickup("B5");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test194() {
			Console.WriteLine("Test case 194");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test195() {
			Console.WriteLine("Test case 195");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test196() {
			Console.WriteLine("Test case 196");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Unstack("B6", "B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test197() {
			Console.WriteLine("Test case 197");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
			block.Pickup("B2");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test198() {
			Console.WriteLine("Test case 198");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test199() {
			Console.WriteLine("Test case 199");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			block.Putdown("B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test200() {
			Console.WriteLine("Test case 200");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test201() {
			Console.WriteLine("Test case 201");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			block.Pickup("B2");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test202() {
			Console.WriteLine("Test case 202");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			block.Putdown("B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test203() {
			Console.WriteLine("Test case 203");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test204() {
			Console.WriteLine("Test case 204");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test205() {
			Console.WriteLine("Test case 205");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test206() {
			Console.WriteLine("Test case 206");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			block.Stack("B2", "B3");
			block.Unstack("B2", "B3");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test207() {
			Console.WriteLine("Test case 207");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Pickup("B2");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test208() {
			Console.WriteLine("Test case 208");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test209() {
			Console.WriteLine("Test case 209");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test210() {
			Console.WriteLine("Test case 210");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Unstack("B3", "B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test211() {
			Console.WriteLine("Test case 211");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test212() {
			Console.WriteLine("Test case 212");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test213() {
			Console.WriteLine("Test case 213");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test214() {
			Console.WriteLine("Test case 214");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B6", "B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test215() {
			Console.WriteLine("Test case 215");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test216() {
			Console.WriteLine("Test case 216");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test 1_4_2_5_2_5: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_4_2_5_2_5");
			Assert.True(block.IsClear("B3"), "1_4_2_5_2_5");
			Assert.True(block.IsClear("B5"), "1_4_2_5_2_5");
			Assert.True(block.IsClear("B6"), "1_4_2_5_2_5");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_2_5");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_2_5");
			Assert.True(block.IsOntable("B5"), "1_4_2_5_2_5");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_2_5");
		}

	[Test]
		public void Test217() {
			Console.WriteLine("Test case 217");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test 1_4_2_5_2_6: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_4_2_5_2_6");
			Assert.True(block.IsClear("B3"), "1_4_2_5_2_6");
			Assert.True(block.IsClear("B5"), "1_4_2_5_2_6");
			Assert.True(block.IsClear("B6"), "1_4_2_5_2_6");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_2_6");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_2_6");
			Assert.True(block.IsOntable("B5"), "1_4_2_5_2_6");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_2_6");
		}

	[Test]
		public void Test218() {
			Console.WriteLine("Test case 218");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test 1_4_2_5_2_7: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_4_2_5_2_7");
			Assert.True(block.IsClear("B3"), "1_4_2_5_2_7");
			Assert.True(block.IsClear("B5"), "1_4_2_5_2_7");
			Assert.True(block.IsClear("B6"), "1_4_2_5_2_7");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_2_7");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_2_7");
			Assert.True(block.IsOntable("B5"), "1_4_2_5_2_7");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_2_7");
		}

	[Test]
		public void Test219() {
			Console.WriteLine("Test case 219");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			Assert.True(block.IsClear("B3"), "1_4_2_5_3");
			Assert.True(block.IsClear("B5"), "1_4_2_5_3");
			Assert.True(block.IsClear("B6"), "1_4_2_5_3");
			Assert.True(block.IsOn("B5", "B2"), "1_4_2_5_3");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_3");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_3");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_3");
			block.Pickup("B3");
			Assert.True(block.IsClear("B5"), "1_4_2_5_3_1");
			Assert.True(block.IsClear("B6"), "1_4_2_5_3_1");
			Assert.True(block.IsHolding("B3"), "1_4_2_5_3_1");
			Assert.True(block.IsOn("B5", "B2"), "1_4_2_5_3_1");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_3_1");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_3_1");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test220() {
			Console.WriteLine("Test case 220");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Putdown("B3");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test221() {
			Console.WriteLine("Test case 221");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
			block.Pickup("B6");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test222() {
			Console.WriteLine("Test case 222");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Putdown("B6");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test223() {
			Console.WriteLine("Test case 223");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test224() {
			Console.WriteLine("Test case 224");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test225() {
			Console.WriteLine("Test case 225");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test226() {
			Console.WriteLine("Test case 226");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Unstack("B6", "B3");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test227() {
			Console.WriteLine("Test case 227");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Pickup("B6");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test228() {
			Console.WriteLine("Test case 228");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test229() {
			Console.WriteLine("Test case 229");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test230() {
			Console.WriteLine("Test case 230");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Unstack("B3", "B5");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test231() {
			Console.WriteLine("Test case 231");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test232() {
			Console.WriteLine("Test case 232");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test233() {
			Console.WriteLine("Test case 233");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test234() {
			Console.WriteLine("Test case 234");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Unstack("B3", "B6");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test235() {
			Console.WriteLine("Test case 235");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Unstack("B5", "B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test236() {
			Console.WriteLine("Test case 236");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test237() {
			Console.WriteLine("Test case 237");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			Assert.True(block.IsClear("B3"), "1_4_2_5_3_2");
			Assert.True(block.IsClear("B5"), "1_4_2_5_3_2");
			Assert.True(block.IsHolding("B6"), "1_4_2_5_3_2");
			Assert.True(block.IsOn("B5", "B2"), "1_4_2_5_3_2");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_3_2");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_3_2");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test238() {
			Console.WriteLine("Test case 238");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Putdown("B6");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test239() {
			Console.WriteLine("Test case 239");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test240() {
			Console.WriteLine("Test case 240");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test241() {
			Console.WriteLine("Test case 241");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test242() {
			Console.WriteLine("Test case 242");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Unstack("B5", "B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test243() {
			Console.WriteLine("Test case 243");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Unstack("B6", "B3");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test244() {
			Console.WriteLine("Test case 244");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			block.Pickup("B3");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test245() {
			Console.WriteLine("Test case 245");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			block.Putdown("B3");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test246() {
			Console.WriteLine("Test case 246");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test247() {
			Console.WriteLine("Test case 247");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test248() {
			Console.WriteLine("Test case 248");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test249() {
			Console.WriteLine("Test case 249");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Unstack("B3", "B6");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test250() {
			Console.WriteLine("Test case 250");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B3");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
		}

	[Test]
		public void Test251() {
			Console.WriteLine("Test case 251");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test252() {
			Console.WriteLine("Test case 252");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test253() {
			Console.WriteLine("Test case 253");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B6", "B5");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test254() {
			Console.WriteLine("Test case 254");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test255() {
			Console.WriteLine("Test case 255");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test 1_4_2_5_3_3: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "1_4_2_5_3_3");
			Assert.True(block.IsClear("B5"), "1_4_2_5_3_3");
			Assert.True(block.IsClear("B6"), "1_4_2_5_3_3");
			Assert.True(block.IsOn("B5", "B2"), "1_4_2_5_3_3");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_3_3");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_3_3");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_3_3");
		}

	[Test]
		public void Test256() {
			Console.WriteLine("Test case 256");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test 1_4_2_5_3_4: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "1_4_2_5_3_4");
			Assert.True(block.IsClear("B5"), "1_4_2_5_3_4");
			Assert.True(block.IsClear("B6"), "1_4_2_5_3_4");
			Assert.True(block.IsOn("B5", "B2"), "1_4_2_5_3_4");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_3_4");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_3_4");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_3_4");
		}

	[Test]
		public void Test257() {
			Console.WriteLine("Test case 257");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Unstack("B5", "B2");
			Assert.True(block.IsClear("B2"), "1_4_2_5_3_5");
			Assert.True(block.IsClear("B3"), "1_4_2_5_3_5");
			Assert.True(block.IsClear("B6"), "1_4_2_5_3_5");
			Assert.True(block.IsHolding("B5"), "1_4_2_5_3_5");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_3_5");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_3_5");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_3_5");
		}

	[Test]
		public void Test258() {
			Console.WriteLine("Test case 258");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			Assert.True(block.IsClear("B2"), "1_4_2_5_4");
			Assert.True(block.IsClear("B5"), "1_4_2_5_4");
			Assert.True(block.IsClear("B6"), "1_4_2_5_4");
			Assert.True(block.IsOn("B5", "B3"), "1_4_2_5_4");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_4");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_4");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_4");
			block.Pickup("B2");
			Assert.True(block.IsClear("B5"), "1_4_2_5_4_1");
			Assert.True(block.IsClear("B6"), "1_4_2_5_4_1");
			Assert.True(block.IsHolding("B2"), "1_4_2_5_4_1");
			Assert.True(block.IsOn("B5", "B3"), "1_4_2_5_4_1");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_4_1");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_4_1");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test259() {
			Console.WriteLine("Test case 259");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Putdown("B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test260() {
			Console.WriteLine("Test case 260");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
			block.Pickup("B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test261() {
			Console.WriteLine("Test case 261");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Putdown("B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test262() {
			Console.WriteLine("Test case 262");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test263() {
			Console.WriteLine("Test case 263");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test264() {
			Console.WriteLine("Test case 264");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test265() {
			Console.WriteLine("Test case 265");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Unstack("B6", "B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test266() {
			Console.WriteLine("Test case 266");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test267() {
			Console.WriteLine("Test case 267");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test268() {
			Console.WriteLine("Test case 268");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test269() {
			Console.WriteLine("Test case 269");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B5");
			block.Unstack("B2", "B5");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test270() {
			Console.WriteLine("Test case 270");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test271() {
			Console.WriteLine("Test case 271");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test272() {
			Console.WriteLine("Test case 272");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test273() {
			Console.WriteLine("Test case 273");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			block.Unstack("B2", "B6");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test274() {
			Console.WriteLine("Test case 274");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			block.Unstack("B5", "B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test275() {
			Console.WriteLine("Test case 275");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B2");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test276() {
			Console.WriteLine("Test case 276");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			Assert.True(block.IsClear("B2"), "1_4_2_5_4_2");
			Assert.True(block.IsClear("B5"), "1_4_2_5_4_2");
			Assert.True(block.IsHolding("B6"), "1_4_2_5_4_2");
			Assert.True(block.IsOn("B5", "B3"), "1_4_2_5_4_2");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_4_2");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_4_2");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test277() {
			Console.WriteLine("Test case 277");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Putdown("B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test278() {
			Console.WriteLine("Test case 278");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test279() {
			Console.WriteLine("Test case 279");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test280() {
			Console.WriteLine("Test case 280");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test281() {
			Console.WriteLine("Test case 281");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Unstack("B5", "B3");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test282() {
			Console.WriteLine("Test case 282");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Unstack("B6", "B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test283() {
			Console.WriteLine("Test case 283");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			block.Pickup("B2");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test284() {
			Console.WriteLine("Test case 284");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B2");
			block.Putdown("B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test285() {
			Console.WriteLine("Test case 285");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test286() {
			Console.WriteLine("Test case 286");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test287() {
			Console.WriteLine("Test case 287");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test288() {
			Console.WriteLine("Test case 288");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B2");
			block.Stack("B2", "B6");
			block.Unstack("B2", "B6");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test289() {
			Console.WriteLine("Test case 289");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Pickup("B2");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test290() {
			Console.WriteLine("Test case 290");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test291() {
			Console.WriteLine("Test case 291");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test292() {
			Console.WriteLine("Test case 292");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B6", "B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test293() {
			Console.WriteLine("Test case 293");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Pickup("B6");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test294() {
			Console.WriteLine("Test case 294");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test 1_4_2_5_4_3: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_4_2_5_4_3");
			Assert.True(block.IsClear("B5"), "1_4_2_5_4_3");
			Assert.True(block.IsClear("B6"), "1_4_2_5_4_3");
			Assert.True(block.IsOn("B5", "B3"), "1_4_2_5_4_3");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_4_3");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_4_3");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_4_3");
		}

	[Test]
		public void Test295() {
			Console.WriteLine("Test case 295");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test 1_4_2_5_4_4: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_4_2_5_4_4");
			Assert.True(block.IsClear("B5"), "1_4_2_5_4_4");
			Assert.True(block.IsClear("B6"), "1_4_2_5_4_4");
			Assert.True(block.IsOn("B5", "B3"), "1_4_2_5_4_4");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_4_4");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_4_4");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_4_4");
		}

	[Test]
		public void Test296() {
			Console.WriteLine("Test case 296");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B3");
			block.Unstack("B5", "B3");
			Assert.True(block.IsClear("B2"), "1_4_2_5_4_5");
			Assert.True(block.IsClear("B3"), "1_4_2_5_4_5");
			Assert.True(block.IsClear("B6"), "1_4_2_5_4_5");
			Assert.True(block.IsHolding("B5"), "1_4_2_5_4_5");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_4_5");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_4_5");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_4_5");
		}

	[Test]
		public void Test297() {
			Console.WriteLine("Test case 297");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B6");
			Assert.True(block.IsClear("B2"), "1_4_2_5_5");
			Assert.True(block.IsClear("B3"), "1_4_2_5_5");
			Assert.True(block.IsClear("B5"), "1_4_2_5_5");
			Assert.True(block.IsOn("B5", "B6"), "1_4_2_5_5");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_5");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_5");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_5");
		}

	[Test]
		public void Test298() {
			Console.WriteLine("Test case 298");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			block.Unstack("B5", "B6");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test 1_4_2_5_6: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_4_2_5_6");
			Assert.True(block.IsClear("B3"), "1_4_2_5_6");
			Assert.True(block.IsClear("B6"), "1_4_2_5_6");
			Assert.True(block.IsHolding("B5"), "1_4_2_5_6");
			Assert.True(block.IsOntable("B2"), "1_4_2_5_6");
			Assert.True(block.IsOntable("B3"), "1_4_2_5_6");
			Assert.True(block.IsOntable("B6"), "1_4_2_5_6");
		}

	[Test]
		public void Test299() {
			Console.WriteLine("Test case 299");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B3");
			Assert.True(block.IsClear("B2"), "1_4_3");
			Assert.True(block.IsClear("B5"), "1_4_3");
			Assert.True(block.IsOn("B2", "B3"), "1_4_3");
			Assert.True(block.IsOn("B5", "B6"), "1_4_3");
			Assert.True(block.IsOntable("B3"), "1_4_3");
			Assert.True(block.IsOntable("B6"), "1_4_3");
		}

	[Test]
		public void Test300() {
			Console.WriteLine("Test case 300");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			Assert.True(block.IsClear("B2"), "1_4_4");
			Assert.True(block.IsClear("B3"), "1_4_4");
			Assert.True(block.IsOn("B2", "B5"), "1_4_4");
			Assert.True(block.IsOn("B5", "B6"), "1_4_4");
			Assert.True(block.IsOntable("B3"), "1_4_4");
			Assert.True(block.IsOntable("B6"), "1_4_4");
			block.Pickup("B3");
			Assert.True(block.IsClear("B2"), "1_4_4_1");
			Assert.True(block.IsHolding("B3"), "1_4_4_1");
			Assert.True(block.IsOn("B2", "B5"), "1_4_4_1");
			Assert.True(block.IsOn("B5", "B6"), "1_4_4_1");
			Assert.True(block.IsOntable("B6"), "1_4_4_1");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test 1_4_4_1_1: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_4_4_1_1");
			Assert.True(block.IsHolding("B3"), "1_4_4_1_1");
			Assert.True(block.IsOn("B2", "B5"), "1_4_4_1_1");
			Assert.True(block.IsOn("B5", "B6"), "1_4_4_1_1");
			Assert.True(block.IsOntable("B6"), "1_4_4_1_1");
		}

	[Test]
		public void Test301() {
			Console.WriteLine("Test case 301");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Putdown("B3");
			Assert.True(block.IsClear("B2"), "1_4_4_1_2");
			Assert.True(block.IsClear("B3"), "1_4_4_1_2");
			Assert.True(block.IsOn("B2", "B5"), "1_4_4_1_2");
			Assert.True(block.IsOn("B5", "B6"), "1_4_4_1_2");
			Assert.True(block.IsOntable("B3"), "1_4_4_1_2");
			Assert.True(block.IsOntable("B6"), "1_4_4_1_2");
		}

	[Test]
		public void Test302() {
			Console.WriteLine("Test case 302");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			Assert.True(block.IsClear("B3"), "1_4_4_1_3");
			Assert.True(block.IsOn("B2", "B5"), "1_4_4_1_3");
			Assert.True(block.IsOn("B3", "B2"), "1_4_4_1_3");
			Assert.True(block.IsOn("B5", "B6"), "1_4_4_1_3");
			Assert.True(block.IsOntable("B6"), "1_4_4_1_3");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test 1_4_4_1_3_1: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "1_4_4_1_3_1");
			Assert.True(block.IsOn("B2", "B5"), "1_4_4_1_3_1");
			Assert.True(block.IsOn("B3", "B2"), "1_4_4_1_3_1");
			Assert.True(block.IsOn("B5", "B6"), "1_4_4_1_3_1");
			Assert.True(block.IsOntable("B6"), "1_4_4_1_3_1");
		}

	[Test]
		public void Test303() {
			Console.WriteLine("Test case 303");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test 1_4_4_1_3_2: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "1_4_4_1_3_2");
			Assert.True(block.IsOn("B2", "B5"), "1_4_4_1_3_2");
			Assert.True(block.IsOn("B3", "B2"), "1_4_4_1_3_2");
			Assert.True(block.IsOn("B5", "B6"), "1_4_4_1_3_2");
			Assert.True(block.IsOntable("B6"), "1_4_4_1_3_2");
		}

	[Test]
		public void Test304() {
			Console.WriteLine("Test case 304");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test 1_4_4_1_3_3: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "1_4_4_1_3_3");
			Assert.True(block.IsOn("B2", "B5"), "1_4_4_1_3_3");
			Assert.True(block.IsOn("B3", "B2"), "1_4_4_1_3_3");
			Assert.True(block.IsOn("B5", "B6"), "1_4_4_1_3_3");
			Assert.True(block.IsOntable("B6"), "1_4_4_1_3_3");
		}

	[Test]
		public void Test305() {
			Console.WriteLine("Test case 305");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B3", "B2");
			Assert.True(block.IsClear("B2"), "1_4_4_1_3_4");
			Assert.True(block.IsHolding("B3"), "1_4_4_1_3_4");
			Assert.True(block.IsOn("B2", "B5"), "1_4_4_1_3_4");
			Assert.True(block.IsOn("B5", "B6"), "1_4_4_1_3_4");
			Assert.True(block.IsOntable("B6"), "1_4_4_1_3_4");
		}

	[Test]
		public void Test306() {
			Console.WriteLine("Test case 306");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test 1_4_4_1_4: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_4_4_1_4");
			Assert.True(block.IsHolding("B3"), "1_4_4_1_4");
			Assert.True(block.IsOn("B2", "B5"), "1_4_4_1_4");
			Assert.True(block.IsOn("B5", "B6"), "1_4_4_1_4");
			Assert.True(block.IsOntable("B6"), "1_4_4_1_4");
		}

	[Test]
		public void Test307() {
			Console.WriteLine("Test case 307");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test 1_4_4_2: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_4_4_2");
			Assert.True(block.IsClear("B3"), "1_4_4_2");
			Assert.True(block.IsOn("B2", "B5"), "1_4_4_2");
			Assert.True(block.IsOn("B5", "B6"), "1_4_4_2");
			Assert.True(block.IsOntable("B3"), "1_4_4_2");
			Assert.True(block.IsOntable("B6"), "1_4_4_2");
		}

	[Test]
		public void Test308() {
			Console.WriteLine("Test case 308");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test 1_4_4_3: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_4_4_3");
			Assert.True(block.IsClear("B3"), "1_4_4_3");
			Assert.True(block.IsOn("B2", "B5"), "1_4_4_3");
			Assert.True(block.IsOn("B5", "B6"), "1_4_4_3");
			Assert.True(block.IsOntable("B3"), "1_4_4_3");
			Assert.True(block.IsOntable("B6"), "1_4_4_3");
		}

	[Test]
		public void Test309() {
			Console.WriteLine("Test case 309");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Unstack("B2", "B5");
			Assert.True(block.IsClear("B3"), "1_4_4_4");
			Assert.True(block.IsClear("B5"), "1_4_4_4");
			Assert.True(block.IsHolding("B2"), "1_4_4_4");
			Assert.True(block.IsOn("B5", "B6"), "1_4_4_4");
			Assert.True(block.IsOntable("B3"), "1_4_4_4");
			Assert.True(block.IsOntable("B6"), "1_4_4_4");
		}

	[Test]
		public void Test310() {
			Console.WriteLine("Test case 310");
			block.Unstack("B2", "B3");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test 1_4_5: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "1_4_5");
			Assert.True(block.IsClear("B5"), "1_4_5");
			Assert.True(block.IsHolding("B2"), "1_4_5");
			Assert.True(block.IsOn("B5", "B6"), "1_4_5");
			Assert.True(block.IsOntable("B3"), "1_4_5");
			Assert.True(block.IsOntable("B6"), "1_4_5");
		}

	[Test]
		public void Test311() {
			Console.WriteLine("Test case 311");
			block.Unstack("B5", "B6");
			Assert.True(block.IsClear("B2"), "1_5");
			Assert.True(block.IsClear("B6"), "1_5");
			Assert.True(block.IsHolding("B5"), "1_5");
			Assert.True(block.IsOn("B2", "B3"), "1_5");
			Assert.True(block.IsOntable("B3"), "1_5");
			Assert.True(block.IsOntable("B6"), "1_5");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test 1_5_1: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_5_1");
			Assert.True(block.IsClear("B6"), "1_5_1");
			Assert.True(block.IsHolding("B5"), "1_5_1");
			Assert.True(block.IsOn("B2", "B3"), "1_5_1");
			Assert.True(block.IsOntable("B3"), "1_5_1");
			Assert.True(block.IsOntable("B6"), "1_5_1");
		}

	[Test]
		public void Test312() {
			Console.WriteLine("Test case 312");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			Assert.True(block.IsClear("B2"), "1_5_2");
			Assert.True(block.IsClear("B5"), "1_5_2");
			Assert.True(block.IsClear("B6"), "1_5_2");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2");
			Assert.True(block.IsOntable("B3"), "1_5_2");
			Assert.True(block.IsOntable("B5"), "1_5_2");
			Assert.True(block.IsOntable("B6"), "1_5_2");
			block.Pickup("B5");
			Assert.True(block.IsClear("B2"), "1_5_2_1");
			Assert.True(block.IsClear("B6"), "1_5_2_1");
			Assert.True(block.IsHolding("B5"), "1_5_2_1");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2_1");
			Assert.True(block.IsOntable("B3"), "1_5_2_1");
			Assert.True(block.IsOntable("B6"), "1_5_2_1");
		}

	[Test]
		public void Test313() {
			Console.WriteLine("Test case 313");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			Assert.True(block.IsClear("B2"), "1_5_2_2");
			Assert.True(block.IsClear("B5"), "1_5_2_2");
			Assert.True(block.IsHolding("B6"), "1_5_2_2");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2_2");
			Assert.True(block.IsOntable("B3"), "1_5_2_2");
			Assert.True(block.IsOntable("B5"), "1_5_2_2");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test 1_5_2_2_1: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_5_2_2_1");
			Assert.True(block.IsClear("B5"), "1_5_2_2_1");
			Assert.True(block.IsHolding("B6"), "1_5_2_2_1");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2_2_1");
			Assert.True(block.IsOntable("B3"), "1_5_2_2_1");
			Assert.True(block.IsOntable("B5"), "1_5_2_2_1");
		}

	[Test]
		public void Test314() {
			Console.WriteLine("Test case 314");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Putdown("B6");
			Assert.True(block.IsClear("B2"), "1_5_2_2_2");
			Assert.True(block.IsClear("B5"), "1_5_2_2_2");
			Assert.True(block.IsClear("B6"), "1_5_2_2_2");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2_2_2");
			Assert.True(block.IsOntable("B3"), "1_5_2_2_2");
			Assert.True(block.IsOntable("B5"), "1_5_2_2_2");
			Assert.True(block.IsOntable("B6"), "1_5_2_2_2");
		}

	[Test]
		public void Test315() {
			Console.WriteLine("Test case 315");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			Assert.True(block.IsClear("B5"), "1_5_2_2_3");
			Assert.True(block.IsClear("B6"), "1_5_2_2_3");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2_2_3");
			Assert.True(block.IsOn("B6", "B2"), "1_5_2_2_3");
			Assert.True(block.IsOntable("B3"), "1_5_2_2_3");
			Assert.True(block.IsOntable("B5"), "1_5_2_2_3");
			block.Pickup("B5");
			Assert.True(block.IsClear("B6"), "1_5_2_2_3_1");
			Assert.True(block.IsHolding("B5"), "1_5_2_2_3_1");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2_2_3_1");
			Assert.True(block.IsOn("B6", "B2"), "1_5_2_2_3_1");
			Assert.True(block.IsOntable("B3"), "1_5_2_2_3_1");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test316() {
			Console.WriteLine("Test case 316");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			block.Putdown("B5");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test317() {
			Console.WriteLine("Test case 317");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test318() {
			Console.WriteLine("Test case 318");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test319() {
			Console.WriteLine("Test case 319");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B5", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test320() {
			Console.WriteLine("Test case 320");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B6");
			block.Unstack("B5", "B6");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test321() {
			Console.WriteLine("Test case 321");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B5");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
		}

	[Test]
		public void Test322() {
			Console.WriteLine("Test case 322");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test 1_5_2_2_3_2: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "1_5_2_2_3_2");
			Assert.True(block.IsClear("B6"), "1_5_2_2_3_2");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2_2_3_2");
			Assert.True(block.IsOn("B6", "B2"), "1_5_2_2_3_2");
			Assert.True(block.IsOntable("B3"), "1_5_2_2_3_2");
			Assert.True(block.IsOntable("B5"), "1_5_2_2_3_2");
		}

	[Test]
		public void Test323() {
			Console.WriteLine("Test case 323");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test 1_5_2_2_3_3: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "1_5_2_2_3_3");
			Assert.True(block.IsClear("B6"), "1_5_2_2_3_3");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2_2_3_3");
			Assert.True(block.IsOn("B6", "B2"), "1_5_2_2_3_3");
			Assert.True(block.IsOntable("B3"), "1_5_2_2_3_3");
			Assert.True(block.IsOntable("B5"), "1_5_2_2_3_3");
		}

	[Test]
		public void Test324() {
			Console.WriteLine("Test case 324");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Unstack("B6", "B2");
			Assert.True(block.IsClear("B2"), "1_5_2_2_3_4");
			Assert.True(block.IsClear("B5"), "1_5_2_2_3_4");
			Assert.True(block.IsHolding("B6"), "1_5_2_2_3_4");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2_2_3_4");
			Assert.True(block.IsOntable("B3"), "1_5_2_2_3_4");
			Assert.True(block.IsOntable("B5"), "1_5_2_2_3_4");
		}

	[Test]
		public void Test325() {
			Console.WriteLine("Test case 325");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			Assert.True(block.IsClear("B2"), "1_5_2_2_4");
			Assert.True(block.IsClear("B6"), "1_5_2_2_4");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2_2_4");
			Assert.True(block.IsOn("B6", "B5"), "1_5_2_2_4");
			Assert.True(block.IsOntable("B3"), "1_5_2_2_4");
			Assert.True(block.IsOntable("B5"), "1_5_2_2_4");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test 1_5_2_2_4_1: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_5_2_2_4_1");
			Assert.True(block.IsClear("B6"), "1_5_2_2_4_1");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2_2_4_1");
			Assert.True(block.IsOn("B6", "B5"), "1_5_2_2_4_1");
			Assert.True(block.IsOntable("B3"), "1_5_2_2_4_1");
			Assert.True(block.IsOntable("B5"), "1_5_2_2_4_1");
		}

	[Test]
		public void Test326() {
			Console.WriteLine("Test case 326");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test 1_5_2_2_4_2: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_5_2_2_4_2");
			Assert.True(block.IsClear("B6"), "1_5_2_2_4_2");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2_2_4_2");
			Assert.True(block.IsOn("B6", "B5"), "1_5_2_2_4_2");
			Assert.True(block.IsOntable("B3"), "1_5_2_2_4_2");
			Assert.True(block.IsOntable("B5"), "1_5_2_2_4_2");
		}

	[Test]
		public void Test327() {
			Console.WriteLine("Test case 327");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test 1_5_2_2_4_3: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_5_2_2_4_3");
			Assert.True(block.IsClear("B6"), "1_5_2_2_4_3");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2_2_4_3");
			Assert.True(block.IsOn("B6", "B5"), "1_5_2_2_4_3");
			Assert.True(block.IsOntable("B3"), "1_5_2_2_4_3");
			Assert.True(block.IsOntable("B5"), "1_5_2_2_4_3");
		}

	[Test]
		public void Test328() {
			Console.WriteLine("Test case 328");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B2", "B3");
			Assert.True(block.IsClear("B3"), "1_5_2_2_4_4");
			Assert.True(block.IsClear("B6"), "1_5_2_2_4_4");
			Assert.True(block.IsHolding("B2"), "1_5_2_2_4_4");
			Assert.True(block.IsOn("B6", "B5"), "1_5_2_2_4_4");
			Assert.True(block.IsOntable("B3"), "1_5_2_2_4_4");
			Assert.True(block.IsOntable("B5"), "1_5_2_2_4_4");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test329() {
			Console.WriteLine("Test case 329");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test330() {
			Console.WriteLine("Test case 330");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B3"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test331() {
			Console.WriteLine("Test case 331");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
			block.Pickup("B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test332() {
			Console.WriteLine("Test case 332");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Putdown("B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test333() {
			Console.WriteLine("Test case 333");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test334() {
			Console.WriteLine("Test case 334");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test335() {
			Console.WriteLine("Test case 335");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test336() {
			Console.WriteLine("Test case 336");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B3", "B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test337() {
			Console.WriteLine("Test case 337");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test338() {
			Console.WriteLine("Test case 338");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test339() {
			Console.WriteLine("Test case 339");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test340() {
			Console.WriteLine("Test case 340");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Unstack("B2", "B6");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test341() {
			Console.WriteLine("Test case 341");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B2", "B3");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B6", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test342() {
			Console.WriteLine("Test case 342");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B6", "B5");
			Assert.True(block.IsClear("B2"), "1_5_2_2_4_5");
			Assert.True(block.IsClear("B5"), "1_5_2_2_4_5");
			Assert.True(block.IsHolding("B6"), "1_5_2_2_4_5");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2_2_4_5");
			Assert.True(block.IsOntable("B3"), "1_5_2_2_4_5");
			Assert.True(block.IsOntable("B5"), "1_5_2_2_4_5");
		}

	[Test]
		public void Test343() {
			Console.WriteLine("Test case 343");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Pickup("B6");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test 1_5_2_2_5: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_5_2_2_5");
			Assert.True(block.IsClear("B5"), "1_5_2_2_5");
			Assert.True(block.IsHolding("B6"), "1_5_2_2_5");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2_2_5");
			Assert.True(block.IsOntable("B3"), "1_5_2_2_5");
			Assert.True(block.IsOntable("B5"), "1_5_2_2_5");
		}

	[Test]
		public void Test344() {
			Console.WriteLine("Test case 344");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test 1_5_2_3: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_5_2_3");
			Assert.True(block.IsClear("B5"), "1_5_2_3");
			Assert.True(block.IsClear("B6"), "1_5_2_3");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2_3");
			Assert.True(block.IsOntable("B3"), "1_5_2_3");
			Assert.True(block.IsOntable("B5"), "1_5_2_3");
			Assert.True(block.IsOntable("B6"), "1_5_2_3");
		}

	[Test]
		public void Test345() {
			Console.WriteLine("Test case 345");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test 1_5_2_4: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_5_2_4");
			Assert.True(block.IsClear("B5"), "1_5_2_4");
			Assert.True(block.IsClear("B6"), "1_5_2_4");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2_4");
			Assert.True(block.IsOntable("B3"), "1_5_2_4");
			Assert.True(block.IsOntable("B5"), "1_5_2_4");
			Assert.True(block.IsOntable("B6"), "1_5_2_4");
		}

	[Test]
		public void Test346() {
			Console.WriteLine("Test case 346");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			Assert.True(block.IsClear("B3"), "1_5_2_5");
			Assert.True(block.IsClear("B5"), "1_5_2_5");
			Assert.True(block.IsClear("B6"), "1_5_2_5");
			Assert.True(block.IsHolding("B2"), "1_5_2_5");
			Assert.True(block.IsOntable("B3"), "1_5_2_5");
			Assert.True(block.IsOntable("B5"), "1_5_2_5");
			Assert.True(block.IsOntable("B6"), "1_5_2_5");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test 1_5_2_5_1: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "1_5_2_5_1");
			Assert.True(block.IsClear("B5"), "1_5_2_5_1");
			Assert.True(block.IsClear("B6"), "1_5_2_5_1");
			Assert.True(block.IsHolding("B2"), "1_5_2_5_1");
			Assert.True(block.IsOntable("B3"), "1_5_2_5_1");
			Assert.True(block.IsOntable("B5"), "1_5_2_5_1");
			Assert.True(block.IsOntable("B6"), "1_5_2_5_1");
		}

	[Test]
		public void Test347() {
			Console.WriteLine("Test case 347");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Putdown("B2");
			Assert.True(block.IsClear("B2"), "1_5_2_5_2");
			Assert.True(block.IsClear("B3"), "1_5_2_5_2");
			Assert.True(block.IsClear("B5"), "1_5_2_5_2");
			Assert.True(block.IsClear("B6"), "1_5_2_5_2");
			Assert.True(block.IsOntable("B2"), "1_5_2_5_2");
			Assert.True(block.IsOntable("B3"), "1_5_2_5_2");
			Assert.True(block.IsOntable("B5"), "1_5_2_5_2");
			Assert.True(block.IsOntable("B6"), "1_5_2_5_2");
		}

	[Test]
		public void Test348() {
			Console.WriteLine("Test case 348");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B3");
			Assert.True(block.IsClear("B2"), "1_5_2_5_3");
			Assert.True(block.IsClear("B5"), "1_5_2_5_3");
			Assert.True(block.IsClear("B6"), "1_5_2_5_3");
			Assert.True(block.IsOn("B2", "B3"), "1_5_2_5_3");
			Assert.True(block.IsOntable("B3"), "1_5_2_5_3");
			Assert.True(block.IsOntable("B5"), "1_5_2_5_3");
			Assert.True(block.IsOntable("B6"), "1_5_2_5_3");
		}

	[Test]
		public void Test349() {
			Console.WriteLine("Test case 349");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			Assert.True(block.IsClear("B2"), "1_5_2_5_4");
			Assert.True(block.IsClear("B3"), "1_5_2_5_4");
			Assert.True(block.IsClear("B6"), "1_5_2_5_4");
			Assert.True(block.IsOn("B2", "B5"), "1_5_2_5_4");
			Assert.True(block.IsOntable("B3"), "1_5_2_5_4");
			Assert.True(block.IsOntable("B5"), "1_5_2_5_4");
			Assert.True(block.IsOntable("B6"), "1_5_2_5_4");
			block.Pickup("B3");
			Assert.True(block.IsClear("B2"), "1_5_2_5_4_1");
			Assert.True(block.IsClear("B6"), "1_5_2_5_4_1");
			Assert.True(block.IsHolding("B3"), "1_5_2_5_4_1");
			Assert.True(block.IsOn("B2", "B5"), "1_5_2_5_4_1");
			Assert.True(block.IsOntable("B5"), "1_5_2_5_4_1");
			Assert.True(block.IsOntable("B6"), "1_5_2_5_4_1");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test350() {
			Console.WriteLine("Test case 350");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Putdown("B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test351() {
			Console.WriteLine("Test case 351");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
			block.Pickup("B6");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test352() {
			Console.WriteLine("Test case 352");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Pickup("B6");
			block.Putdown("B6");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test353() {
			Console.WriteLine("Test case 353");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test354() {
			Console.WriteLine("Test case 354");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test355() {
			Console.WriteLine("Test case 355");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test356() {
			Console.WriteLine("Test case 356");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Unstack("B6", "B3");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test357() {
			Console.WriteLine("Test case 357");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Pickup("B6");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test358() {
			Console.WriteLine("Test case 358");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test359() {
			Console.WriteLine("Test case 359");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test360() {
			Console.WriteLine("Test case 360");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B3", "B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test361() {
			Console.WriteLine("Test case 361");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test362() {
			Console.WriteLine("Test case 362");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test363() {
			Console.WriteLine("Test case 363");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test364() {
			Console.WriteLine("Test case 364");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Unstack("B2", "B5");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test365() {
			Console.WriteLine("Test case 365");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Unstack("B3", "B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test366() {
			Console.WriteLine("Test case 366");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B3");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test367() {
			Console.WriteLine("Test case 367");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			Assert.True(block.IsClear("B2"), "1_5_2_5_4_2");
			Assert.True(block.IsClear("B3"), "1_5_2_5_4_2");
			Assert.True(block.IsHolding("B6"), "1_5_2_5_4_2");
			Assert.True(block.IsOn("B2", "B5"), "1_5_2_5_4_2");
			Assert.True(block.IsOntable("B3"), "1_5_2_5_4_2");
			Assert.True(block.IsOntable("B5"), "1_5_2_5_4_2");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test368() {
			Console.WriteLine("Test case 368");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Putdown("B6");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test369() {
			Console.WriteLine("Test case 369");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
			block.Pickup("B3");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test370() {
			Console.WriteLine("Test case 370");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			block.Putdown("B3");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test371() {
			Console.WriteLine("Test case 371");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test372() {
			Console.WriteLine("Test case 372");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test373() {
			Console.WriteLine("Test case 373");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B3", "B6"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test374() {
			Console.WriteLine("Test case 374");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B6");
			block.Unstack("B3", "B6");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test375() {
			Console.WriteLine("Test case 375");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Pickup("B3");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test376() {
			Console.WriteLine("Test case 376");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test377() {
			Console.WriteLine("Test case 377");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B6", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test378() {
			Console.WriteLine("Test case 378");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B2");
			block.Unstack("B6", "B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test379() {
			Console.WriteLine("Test case 379");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test380() {
			Console.WriteLine("Test case 380");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test381() {
			Console.WriteLine("Test case 381");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test382() {
			Console.WriteLine("Test case 382");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Unstack("B2", "B5");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B6", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test383() {
			Console.WriteLine("Test case 383");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			block.Stack("B6", "B3");
			block.Unstack("B6", "B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test384() {
			Console.WriteLine("Test case 384");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Pickup("B6");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B6"), "");
			Assert.True(block.IsOn("B2", "B5"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
		}

	[Test]
		public void Test385() {
			Console.WriteLine("Test case 385");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test 1_5_2_5_4_3: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_5_2_5_4_3");
			Assert.True(block.IsClear("B3"), "1_5_2_5_4_3");
			Assert.True(block.IsClear("B6"), "1_5_2_5_4_3");
			Assert.True(block.IsOn("B2", "B5"), "1_5_2_5_4_3");
			Assert.True(block.IsOntable("B3"), "1_5_2_5_4_3");
			Assert.True(block.IsOntable("B5"), "1_5_2_5_4_3");
			Assert.True(block.IsOntable("B6"), "1_5_2_5_4_3");
		}

	[Test]
		public void Test386() {
			Console.WriteLine("Test case 386");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test 1_5_2_5_4_4: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_5_2_5_4_4");
			Assert.True(block.IsClear("B3"), "1_5_2_5_4_4");
			Assert.True(block.IsClear("B6"), "1_5_2_5_4_4");
			Assert.True(block.IsOn("B2", "B5"), "1_5_2_5_4_4");
			Assert.True(block.IsOntable("B3"), "1_5_2_5_4_4");
			Assert.True(block.IsOntable("B5"), "1_5_2_5_4_4");
			Assert.True(block.IsOntable("B6"), "1_5_2_5_4_4");
		}

	[Test]
		public void Test387() {
			Console.WriteLine("Test case 387");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B5");
			block.Unstack("B2", "B5");
			Assert.True(block.IsClear("B3"), "1_5_2_5_4_5");
			Assert.True(block.IsClear("B5"), "1_5_2_5_4_5");
			Assert.True(block.IsClear("B6"), "1_5_2_5_4_5");
			Assert.True(block.IsHolding("B2"), "1_5_2_5_4_5");
			Assert.True(block.IsOntable("B3"), "1_5_2_5_4_5");
			Assert.True(block.IsOntable("B5"), "1_5_2_5_4_5");
			Assert.True(block.IsOntable("B6"), "1_5_2_5_4_5");
		}

	[Test]
		public void Test388() {
			Console.WriteLine("Test case 388");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			Assert.True(block.IsClear("B2"), "1_5_2_5_5");
			Assert.True(block.IsClear("B3"), "1_5_2_5_5");
			Assert.True(block.IsClear("B5"), "1_5_2_5_5");
			Assert.True(block.IsOn("B2", "B6"), "1_5_2_5_5");
			Assert.True(block.IsOntable("B3"), "1_5_2_5_5");
			Assert.True(block.IsOntable("B5"), "1_5_2_5_5");
			Assert.True(block.IsOntable("B6"), "1_5_2_5_5");
			block.Pickup("B3");
			Assert.True(block.IsClear("B2"), "1_5_2_5_5_1");
			Assert.True(block.IsClear("B5"), "1_5_2_5_5_1");
			Assert.True(block.IsHolding("B3"), "1_5_2_5_5_1");
			Assert.True(block.IsOn("B2", "B6"), "1_5_2_5_5_1");
			Assert.True(block.IsOntable("B5"), "1_5_2_5_5_1");
			Assert.True(block.IsOntable("B6"), "1_5_2_5_5_1");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test389() {
			Console.WriteLine("Test case 389");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Putdown("B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test390() {
			Console.WriteLine("Test case 390");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
			block.Pickup("B5");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B6"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test391() {
			Console.WriteLine("Test case 391");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Pickup("B5");
			block.Putdown("B5");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test392() {
			Console.WriteLine("Test case 392");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B6"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test393() {
			Console.WriteLine("Test case 393");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test394() {
			Console.WriteLine("Test case 394");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test395() {
			Console.WriteLine("Test case 395");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			block.Unstack("B5", "B3");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test396() {
			Console.WriteLine("Test case 396");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Pickup("B5");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test397() {
			Console.WriteLine("Test case 397");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test398() {
			Console.WriteLine("Test case 398");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B2"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test399() {
			Console.WriteLine("Test case 399");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B2");
			block.Unstack("B3", "B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test400() {
			Console.WriteLine("Test case 400");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test401() {
			Console.WriteLine("Test case 401");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test402() {
			Console.WriteLine("Test case 402");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test403() {
			Console.WriteLine("Test case 403");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Unstack("B2", "B6");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B6"), "");
			Assert.True(block.IsHolding("B2"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test404() {
			Console.WriteLine("Test case 404");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Unstack("B3", "B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test405() {
			Console.WriteLine("Test case 405");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B3");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test406() {
			Console.WriteLine("Test case 406");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			Assert.True(block.IsClear("B2"), "1_5_2_5_5_2");
			Assert.True(block.IsClear("B3"), "1_5_2_5_5_2");
			Assert.True(block.IsHolding("B5"), "1_5_2_5_5_2");
			Assert.True(block.IsOn("B2", "B6"), "1_5_2_5_5_2");
			Assert.True(block.IsOntable("B3"), "1_5_2_5_5_2");
			Assert.True(block.IsOntable("B6"), "1_5_2_5_5_2");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test407() {
			Console.WriteLine("Test case 407");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			block.Putdown("B5");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B5"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test408() {
			Console.WriteLine("Test case 408");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
			block.Pickup("B3");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B6"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test409() {
			Console.WriteLine("Test case 409");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Putdown("B3");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test410() {
			Console.WriteLine("Test case 410");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B6"), "");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test411() {
			Console.WriteLine("Test case 411");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test412() {
			Console.WriteLine("Test case 412");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B3", "B5"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test413() {
			Console.WriteLine("Test case 413");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			block.Stack("B3", "B5");
			block.Unstack("B3", "B5");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test414() {
			Console.WriteLine("Test case 414");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			block.Pickup("B3");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsHolding("B3"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test415() {
			Console.WriteLine("Test case 415");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test416() {
			Console.WriteLine("Test case 416");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B2"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test417() {
			Console.WriteLine("Test case 417");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B2");
			block.Unstack("B5", "B2");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test418() {
			Console.WriteLine("Test case 418");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			block.Stack("B5", "B3");
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOn("B5", "B3"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test419() {
			Console.WriteLine("Test case 419");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Pickup("B5");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test : an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "");
			Assert.True(block.IsClear("B3"), "");
			Assert.True(block.IsHolding("B5"), "");
			Assert.True(block.IsOn("B2", "B6"), "");
			Assert.True(block.IsOntable("B3"), "");
			Assert.True(block.IsOntable("B6"), "");
		}

	[Test]
		public void Test420() {
			Console.WriteLine("Test case 420");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test 1_5_2_5_5_3: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_5_2_5_5_3");
			Assert.True(block.IsClear("B3"), "1_5_2_5_5_3");
			Assert.True(block.IsClear("B5"), "1_5_2_5_5_3");
			Assert.True(block.IsOn("B2", "B6"), "1_5_2_5_5_3");
			Assert.True(block.IsOntable("B3"), "1_5_2_5_5_3");
			Assert.True(block.IsOntable("B5"), "1_5_2_5_5_3");
			Assert.True(block.IsOntable("B6"), "1_5_2_5_5_3");
		}

	[Test]
		public void Test421() {
			Console.WriteLine("Test case 421");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test 1_5_2_5_5_4: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_5_2_5_5_4");
			Assert.True(block.IsClear("B3"), "1_5_2_5_5_4");
			Assert.True(block.IsClear("B5"), "1_5_2_5_5_4");
			Assert.True(block.IsOn("B2", "B6"), "1_5_2_5_5_4");
			Assert.True(block.IsOntable("B3"), "1_5_2_5_5_4");
			Assert.True(block.IsOntable("B5"), "1_5_2_5_5_4");
			Assert.True(block.IsOntable("B6"), "1_5_2_5_5_4");
		}

	[Test]
		public void Test422() {
			Console.WriteLine("Test case 422");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			block.Stack("B2", "B6");
			block.Unstack("B2", "B6");
			Assert.True(block.IsClear("B3"), "1_5_2_5_5_5");
			Assert.True(block.IsClear("B5"), "1_5_2_5_5_5");
			Assert.True(block.IsClear("B6"), "1_5_2_5_5_5");
			Assert.True(block.IsHolding("B2"), "1_5_2_5_5_5");
			Assert.True(block.IsOntable("B3"), "1_5_2_5_5_5");
			Assert.True(block.IsOntable("B5"), "1_5_2_5_5_5");
			Assert.True(block.IsOntable("B6"), "1_5_2_5_5_5");
		}

	[Test]
		public void Test423() {
			Console.WriteLine("Test case 423");
			block.Unstack("B5", "B6");
			block.Putdown("B5");
			block.Unstack("B2", "B3");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test 1_5_2_5_6: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B3"), "1_5_2_5_6");
			Assert.True(block.IsClear("B5"), "1_5_2_5_6");
			Assert.True(block.IsClear("B6"), "1_5_2_5_6");
			Assert.True(block.IsHolding("B2"), "1_5_2_5_6");
			Assert.True(block.IsOntable("B3"), "1_5_2_5_6");
			Assert.True(block.IsOntable("B5"), "1_5_2_5_6");
			Assert.True(block.IsOntable("B6"), "1_5_2_5_6");
		}

	[Test]
		public void Test424() {
			Console.WriteLine("Test case 424");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			Assert.True(block.IsClear("B5"), "1_5_3");
			Assert.True(block.IsClear("B6"), "1_5_3");
			Assert.True(block.IsOn("B2", "B3"), "1_5_3");
			Assert.True(block.IsOn("B5", "B2"), "1_5_3");
			Assert.True(block.IsOntable("B3"), "1_5_3");
			Assert.True(block.IsOntable("B6"), "1_5_3");
			block.Pickup("B6");
			Assert.True(block.IsClear("B5"), "1_5_3_1");
			Assert.True(block.IsHolding("B6"), "1_5_3_1");
			Assert.True(block.IsOn("B2", "B3"), "1_5_3_1");
			Assert.True(block.IsOn("B5", "B2"), "1_5_3_1");
			Assert.True(block.IsOntable("B3"), "1_5_3_1");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test 1_5_3_1_1: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "1_5_3_1_1");
			Assert.True(block.IsHolding("B6"), "1_5_3_1_1");
			Assert.True(block.IsOn("B2", "B3"), "1_5_3_1_1");
			Assert.True(block.IsOn("B5", "B2"), "1_5_3_1_1");
			Assert.True(block.IsOntable("B3"), "1_5_3_1_1");
		}

	[Test]
		public void Test425() {
			Console.WriteLine("Test case 425");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Putdown("B6");
			Assert.True(block.IsClear("B5"), "1_5_3_1_2");
			Assert.True(block.IsClear("B6"), "1_5_3_1_2");
			Assert.True(block.IsOn("B2", "B3"), "1_5_3_1_2");
			Assert.True(block.IsOn("B5", "B2"), "1_5_3_1_2");
			Assert.True(block.IsOntable("B3"), "1_5_3_1_2");
			Assert.True(block.IsOntable("B6"), "1_5_3_1_2");
		}

	[Test]
		public void Test426() {
			Console.WriteLine("Test case 426");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			Assert.True(block.IsClear("B6"), "1_5_3_1_3");
			Assert.True(block.IsOn("B2", "B3"), "1_5_3_1_3");
			Assert.True(block.IsOn("B5", "B2"), "1_5_3_1_3");
			Assert.True(block.IsOn("B6", "B5"), "1_5_3_1_3");
			Assert.True(block.IsOntable("B3"), "1_5_3_1_3");
			try {
				block.Pickup("B2");
				Console.WriteLine("Test failed at test 1_5_3_1_3_1: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "1_5_3_1_3_1");
			Assert.True(block.IsOn("B2", "B3"), "1_5_3_1_3_1");
			Assert.True(block.IsOn("B5", "B2"), "1_5_3_1_3_1");
			Assert.True(block.IsOn("B6", "B5"), "1_5_3_1_3_1");
			Assert.True(block.IsOntable("B3"), "1_5_3_1_3_1");
		}

	[Test]
		public void Test427() {
			Console.WriteLine("Test case 427");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test 1_5_3_1_3_2: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "1_5_3_1_3_2");
			Assert.True(block.IsOn("B2", "B3"), "1_5_3_1_3_2");
			Assert.True(block.IsOn("B5", "B2"), "1_5_3_1_3_2");
			Assert.True(block.IsOn("B6", "B5"), "1_5_3_1_3_2");
			Assert.True(block.IsOntable("B3"), "1_5_3_1_3_2");
		}

	[Test]
		public void Test428() {
			Console.WriteLine("Test case 428");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test 1_5_3_1_3_3: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B6"), "1_5_3_1_3_3");
			Assert.True(block.IsOn("B2", "B3"), "1_5_3_1_3_3");
			Assert.True(block.IsOn("B5", "B2"), "1_5_3_1_3_3");
			Assert.True(block.IsOn("B6", "B5"), "1_5_3_1_3_3");
			Assert.True(block.IsOntable("B3"), "1_5_3_1_3_3");
		}

	[Test]
		public void Test429() {
			Console.WriteLine("Test case 429");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			block.Stack("B6", "B5");
			block.Unstack("B6", "B5");
			Assert.True(block.IsClear("B5"), "1_5_3_1_3_4");
			Assert.True(block.IsHolding("B6"), "1_5_3_1_3_4");
			Assert.True(block.IsOn("B2", "B3"), "1_5_3_1_3_4");
			Assert.True(block.IsOn("B5", "B2"), "1_5_3_1_3_4");
			Assert.True(block.IsOntable("B3"), "1_5_3_1_3_4");
		}

	[Test]
		public void Test430() {
			Console.WriteLine("Test case 430");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Pickup("B6");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test 1_5_3_1_4: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "1_5_3_1_4");
			Assert.True(block.IsHolding("B6"), "1_5_3_1_4");
			Assert.True(block.IsOn("B2", "B3"), "1_5_3_1_4");
			Assert.True(block.IsOn("B5", "B2"), "1_5_3_1_4");
			Assert.True(block.IsOntable("B3"), "1_5_3_1_4");
		}

	[Test]
		public void Test431() {
			Console.WriteLine("Test case 431");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			try {
				block.Putdown("B2");
				Console.WriteLine("Test failed at test 1_5_3_2: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "1_5_3_2");
			Assert.True(block.IsClear("B6"), "1_5_3_2");
			Assert.True(block.IsOn("B2", "B3"), "1_5_3_2");
			Assert.True(block.IsOn("B5", "B2"), "1_5_3_2");
			Assert.True(block.IsOntable("B3"), "1_5_3_2");
			Assert.True(block.IsOntable("B6"), "1_5_3_2");
		}

	[Test]
		public void Test432() {
			Console.WriteLine("Test case 432");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			try {
				block.Stack("B2", "B3");
				Console.WriteLine("Test failed at test 1_5_3_3: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B5"), "1_5_3_3");
			Assert.True(block.IsClear("B6"), "1_5_3_3");
			Assert.True(block.IsOn("B2", "B3"), "1_5_3_3");
			Assert.True(block.IsOn("B5", "B2"), "1_5_3_3");
			Assert.True(block.IsOntable("B3"), "1_5_3_3");
			Assert.True(block.IsOntable("B6"), "1_5_3_3");
		}

	[Test]
		public void Test433() {
			Console.WriteLine("Test case 433");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B2");
			block.Unstack("B5", "B2");
			Assert.True(block.IsClear("B2"), "1_5_3_4");
			Assert.True(block.IsClear("B6"), "1_5_3_4");
			Assert.True(block.IsHolding("B5"), "1_5_3_4");
			Assert.True(block.IsOn("B2", "B3"), "1_5_3_4");
			Assert.True(block.IsOntable("B3"), "1_5_3_4");
			Assert.True(block.IsOntable("B6"), "1_5_3_4");
		}

	[Test]
		public void Test434() {
			Console.WriteLine("Test case 434");
			block.Unstack("B5", "B6");
			block.Stack("B5", "B6");
			Assert.True(block.IsClear("B2"), "1_5_4");
			Assert.True(block.IsClear("B5"), "1_5_4");
			Assert.True(block.IsOn("B2", "B3"), "1_5_4");
			Assert.True(block.IsOn("B5", "B6"), "1_5_4");
			Assert.True(block.IsOntable("B3"), "1_5_4");
			Assert.True(block.IsOntable("B6"), "1_5_4");
		}

	[Test]
		public void Test435() {
			Console.WriteLine("Test case 435");
			block.Unstack("B5", "B6");
			try {
				block.Unstack("B2", "B3");
				Console.WriteLine("Test failed at test 1_5_5: an expected exception is not thrown!");
				Console.WriteLine("\nPress any key to continue...");
				Console.Read();
				Environment.Exit(1);
			} catch (Exception e) {}
			Assert.True(block.IsClear("B2"), "1_5_5");
			Assert.True(block.IsClear("B6"), "1_5_5");
			Assert.True(block.IsHolding("B5"), "1_5_5");
			Assert.True(block.IsOn("B2", "B3"), "1_5_5");
			Assert.True(block.IsOntable("B3"), "1_5_5");
			Assert.True(block.IsOntable("B6"), "1_5_5");
		}

}	

} // End of namespace